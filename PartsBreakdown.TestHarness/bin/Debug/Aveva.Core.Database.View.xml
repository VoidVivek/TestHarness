<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aveva.Core.Database.View</name>
    </assembly>
    <members>
        <member name="T:Aveva.Core.Database.View.AttributeColumn">
            <summary>
            Wrapper for a DbAttribute so that they can be used for a Database View Column
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DefinitionItem">
            <summary>
                Class to handle common operations to all database view definition elements
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.IDefinitionItem">
            <summary>
                Interface to define common methods/properties for the database view definition items
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.OwnedMembersOfType(Aveva.Core.Database.DbElementType)">
            <summary>
                Gets all the owned members of a particular type.
            </summary>
            <param name="etype">The element type of the members to get</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.MemberTypes">
            <summary>
                The types of members allowed to exist as members of this definition item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.Add(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                Adds the given item to the owned members
                throws an InvalidOperationException if item is not permitted as a member
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.Insert(System.Int32,Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                Inserts a given item at a given index
            </summary>
            <param name="index">The position to insert the item at</param>
            <param name="item">The item to insert</param>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.Remove(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                Removes the given item from the owned members
            </summary>
            <param name="defItem"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.RemoveAt(System.Int32)">
            <summary>
                Removes the given item from the given index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.IndexOf(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                The index of the given item in the owned members
            </summary>
            <param name="item">The DefinitionItem to search for</param>
            <returns>-1 if the given item is not a member of this definition item, or the index of the item in OwnedMembers</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.Create(System.Int32,Aveva.Core.Database.DbElementType)">
            <summary>
                Creates a new item of the given type at the given index.
                Notes :-
                - throws an IndexOutOfBounds exception if index &gt; Count
                - may throw a PDMSException if the definitions are database based
                - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="index">The position to create the new item at</param>
            <param name="type">The type of item to create</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.CreateAfter(Aveva.Core.Database.DbElementType)">
            <summary>
                Creates a new item of the specified type after this item
                Notes :-
                - may throw a PDMSException if the definitions are database based
                - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type">The type to create</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.CreateBefore(Aveva.Core.Database.DbElementType)">
            <summary>
                Creates a new item of the specified type before this item
                Notes :-
                - may throw a PDMSException if the definitions are database based
                - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type">The type of item to create</param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.CreateFirst(Aveva.Core.Database.DbElementType)">
            <summary>
                Creates a new item of the specified type as the first member of this item
                Notes :-
                - may throw a PDMSException if the definitions are database based
                - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type"></param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.CreateLast(Aveva.Core.Database.DbElementType)">
            <summary>
                Creates a new item of the specified type as the last member of this item
                Notes :-
                - may throw a PDMSException if the definitions are database based
                - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type"></param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.Delete">
            <summary>
                Deletes this item, if allowed.
                throws an exception if not allowed, or a db error occurs
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.IDefinitionItem.Copy">
            <summary>
                Returns a Deep copy of this definition item,
                Notes:
                - This is not a clone since the copied object is not part of a DefinitionSet
                - references within the object hierarchy are copied
                - references to items outside the objects hierarchy are removed, for example DBVWST refs are blanked.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.NAME">
            <summary>
                The database NAME attribute for the definition
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.REF">
            <summary>
                The database REF attribute for the definition
                Nb this will be string.Empty for non-database definitions
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.DefinitionElement">
            <summary>
                The database element that is bound to this definition
                null if the definition isn't a database definition
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.TYPE">
            <summary>
                The database element type this definition represents and manages
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.Owner">
            <summary>
                The owning definition object
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.AllMembers">
            <summary>
                All primary and secondary members of this definition item
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.OwnedMembers">
            <summary>
                All owned/primary members of this definition item
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.OwningDefinitionSet">
            <summary>
                The definition set the definition item is defined in
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.IsValid">
            <summary>
                Indicates this definition is used when database views are used
                If false the definition is not complete enough to use
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.ReadOnlyDefinition">
            <summary>
                Indicates the definition element is readonly
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.Visible">
            <summary>
                Indicates the definition set this is in is hidden from the user
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.Count">
            <summary>
                The number of owned members in this item
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IDefinitionItem.Item(System.Int32)">
            <summary>
                The owned member at the given index.  An exception is trhown if the index is not in range.
            </summary>
            <param name="index">the index of the member to return</param>
            <returns>The definition item requested</returns>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionItem.m_copyOfText">
            <summary>
                text used to create the name of a copied item
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionItem.m_nameAtt">
            <summary>
                cached for speed.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionItem.m_refArray">
            <summary>
                The REF attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionItem.m_OWNER">
            <summary>
                The owning definition object
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionItem.m_members">
            <summary>
                The members of this definition item
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionItem.m_insertItem">
            <summary>
                Only set during an insert operation.
                This enables us to distinguish between database driven creates and Database.View driven creates
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.CheckItem(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                Checks the definition item to see if it would make a valid member of
                this item
            </summary>
            <param name="idefItem"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.InsertDb(System.Int32,Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                If the definition item is defined in the db then match the insert call in the db first
            </summary>
            <param name="index">the position to create the new dbelement</param>
            <param name="item">the item to create</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.SetElementHierarchyAttributes(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                After creation of an element hierarchy works through the hierarchy and sets all of the attribute values.
                This has to be after to sort out element references.
            </summary>
            <param name="item">The item to set the db attributes for and set the attributes for all members</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.DeleteDb">
            <summary>
                This mirrors Remove(IDefinitionItem) and is called after the checks have been made
                This removes the element from the database if it is in the database.
            </summary>
            <returns>true if the item was a database item and has been deleted.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.RemoveRef">
            <summary>
                clears the m_refArray attribute and the m_refArray attribute of all members
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.AddMemberFromXmlDefinition(System.Xml.XmlElement)">
            <summary>
                used internally to construct hierarchies
                This enables read-only hierarchies to be built
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.TrackingAttChangedDelegate(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbAttribute)">
            <summary>
                If a tracked attribute changes this calls the necessary update
            </summary>
            <param name="element"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.IndexInWorld(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElement)">
            <summary>
                Finds the index of the dbvwwld given in the given world
                Note the index only count dbvwwld elements
                Nb crosses database boundaries in the search
            </summary>
            <param name="world">the logical world to search in</param>
            <param name="dbvwwld">the element to find</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.OnMove(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElement,System.Int32)">
            <summary>
                Manages items that move in the db
            </summary>
            <param name="ele1"></param>
            <param name="ele2"></param>
            <param name="i"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.GetDefItemForElement(Aveva.Core.Database.View.IInternalDefinitionItem,Aveva.Core.Database.DbElement,System.Boolean)">
            <summary>
                Gets the DefinitionItem for the given db element
            </summary>
            <param name="searchItem">The item to search the members or descendant of</param>
            <param name="element">The element to search for</param>
            <param name="scanFullHierarchy">if false then only the direct members are scanned</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.CreateDefinitionItem(Aveva.Core.Database.DbElementType)">
            <summary>
                Creates a DefinitionItem of the requested type by calling its default constructor
            </summary>
            <param name="etype">The type to create</param>
            <returns>
                The object created or null if there was an error.
                Any errors are accessible from DbViewLogger.LastError
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.OwnedMembers_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
                Raise Count change events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionItem.m_NAME">
            <summary>
                The NAME attribute
                This is accessible to derived types to support the DefinitionSet NAME editing restrictions
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.RaisePropertyChanged(System.String)">
            <summary>
                Raises the PropertyChanged event for the relevant property
            </summary>
            <param name="name">The name of the property that has changed</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.SetOwner(Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                Sets the owner of the given item to this
            </summary>
            <param name="idefItem">The item to set the owner of</param>
            <param name="owner">The value to set the owner to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.RaiseOwningDefinitionSetChanged">
            <summary>
                raises an event for this item and all its owned members
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.TrackAttributes">
            <summary>
                Must be called by inheriting code once InternalDefinitionItem is functional
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionItem.m_trackingDb">
            <summary>
                change handlers configured.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.TrackCreateDeleteMoveEtc">
            <summary>
                Must be called by inheriting code once InternalDefinitionItem is functional
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.RemoveWithoutDelete(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                Removes a definition item from the members list without deleting it from the database.
            </summary>
            <param name="item">The item to remove</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.CopyMembers(Aveva.Core.Database.View.IDefinitionItem,System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
                Copies the members of a given DefinitionItem and adds them to this item
            </summary>
            <param name="item">The item to copy the members from</param>
            <param name="refItems">the items that have references that need resolving, this is populated by this method</param>
            <param name="refLookup">a lookup from original item to copied item, this is populated by this method</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.#ctor(System.Xml.XmlElement)">
            <summary>
                Base constructor
            </summary>
            <param name="config">The configuration the definition is being loaded from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.#ctor(Aveva.Core.Database.View.DefinitionItem)">
            <summary>
                clone constructor
                Nb doesn't clone members
            </summary>
            <param name="defItem">The item to clone</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.ParseMembers(System.Xml.XmlElement)">
            <summary>
                Parses the members of this definition item from an XmlElement definition and adds them to ownedMembers
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.InternalDefinitionItem">
            <summary>
                returns this.  If definitionItem is wrapped this must be extended to return the wrapped object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.GetDefItemForElement(Aveva.Core.Database.DbElement)">
            <summary>
                Gets the definition item for the given database element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.CheckForCreatesAndDeletes">
            <summary>
                Removes any members that aren't in the database from this definition item
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.OnPreDelete(Aveva.Core.Database.DbElement)">
            <summary>
                Manage deletes of definition items and respond in the hierarchy
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.OnCreate(Aveva.Core.Database.DbElement)">
            <summary>
                manage creation events of definition items and respond in the definition hierarchy
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.SetToMatchDb">
            <summary>
                Iterates through the database attributes and forces the instance to re-evaluate against the database.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.InternalDelete">
            <summary>
                Can be used to remove a member even if the DefinitionSet is readonly.
                Nb this doesn't delete any associated element so mustn't be used for Database derived definitions
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.InternalRemove(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                Remove the given item without first checking whether it is in a readonly Definition Set
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.SetNAME(System.String)">
            <summary>
                internal access provided so that internal code can update the name attribute even if
                the Definition set is read only, this is required for Element type definitions
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.InternalCreate(System.Int32,Aveva.Core.Database.DbElementType)">
            <summary>
                Method to create members without checking readonly status
                Nb this only gets around element type definitions rather than definitions
                that require db access.
            </summary>
            <param name="index">The index to create the member at</param>
            <param name="etype">The element type to create</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.InternalInsert(System.Int32,Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                inserts an item without checking readonly status
            </summary>
            <param name="index">the index to insert the item at</param>
            <param name="item">The item to insert</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.ResolveReferencesForCopy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
                After performing a deep copy this iterates over the copied elements with reference attributes and tidies them up
            </summary>
            <param name="refLookup">the original definition items mapped to their copies</param>
            <param name="refList">The list of items containing references that need resolving</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.MemberTypes">
            <summary>
                The types of members allowed to be created under this DefinitionItem
            </summary>
            <returns>A list of DbElementType instances</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.Add(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                Adds the given item to the owned members
                throws an InvalidOperationException if item is not permitted as a member
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.Insert(System.Int32,Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                Inserts a given item at a given index
            </summary>
            <param name="index">The position to insert the item at</param>
            <param name="item">The item to insert</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.Remove(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                Removes the given item from the owned members
            </summary>
            <param name="item">The item to remove from the members of this definition item</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.RemoveAt(System.Int32)">
            <summary>
                Removes the given item from the given index
            </summary>
            <param name="index">The index of the member to remove from this definition item</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.IndexOf(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
                The index of the given item in the owned members.
            </summary>
            <param name="item">The definition item to get the index of</param>
            <returns>-1 if not found or the index of the requested member</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.GetDefinitionItem">
            <summary>
                Gets the DefinitionItem instance from the implementing class.
                By default returns this
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.Create(System.Int32,Aveva.Core.Database.DbElementType)">
            <summary>
                Creates a new item of the given type at the given index.
                Notes :-
                - throws an IndexOutOfBoundsException if index &gt; Count
                - may throw a PDMSException if the definitions are database based
                - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="index">The position to create the new item at</param>
            <param name="etype">The type of item to create</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.CreateAfter(Aveva.Core.Database.DbElementType)">
            <summary>
                Creates a new item of the specified type after this item
                Notes :-
                - may throw a PDMSException if the definitions are database based
                - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type">The type to create</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.CreateBefore(Aveva.Core.Database.DbElementType)">
            <summary>
                Creates a new item of the specified type before this item
                Notes :-
                - may throw a PDMSException if the definitions are database based
                - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type">The type of item to create</param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.CreateFirst(Aveva.Core.Database.DbElementType)">
            <summary>
                Creates a new item of the specified type as the first member of this item
                Notes :-
                - may throw a PDMSException if the definitions are database based
                - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type"></param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.CreateLast(Aveva.Core.Database.DbElementType)">
            <summary>
                Creates a new item of the specified type as the last member of this item
                Notes :-
                - may throw a PDMSException if the definitions are database based
                - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type"></param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.Delete">
            <summary>
                Deletes this item, if allowed.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.SetDbAttribute(Aveva.Core.Database.DbAttribute,System.Object)">
            <summary>
                Sets a database attribute to a given value on DefinitionElement
                throws an exception if the value can't be set
                Applies the update within its own transaction
            </summary>
            <param name="att">The attribute to set the value of</param>
            <param name="value">The value to set the attribute to</param>
            <returns>true if the database was updated, false if this isn't a database definition item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.Copy">
            <summary>
                Deep copies this DefinitionItem.
                See IDefinitionItem.Copy for behaviour notes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItem.OwnedMembersOfType(Aveva.Core.Database.DbElementType)">
            <summary>
                Returns OwnedMembers of IDefinitionItem for a certain DbElementType.
            </summary>
            <param name="elementType">The type of elements to return.</param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.NAME">
            <summary>
                The NAME attribute of the definition element
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.REF">
            <summary>
                The REF attribute of the definition instance.
                This is string.Empty if the definition is not from a database source
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.Owner">
            <summary>
                The Object that owns this definition
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.DefinitionElement">
            <summary>
                The database element that this definition is from
                This will be null for non-database definition sets.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.ReadOnlyDefinition">
            <summary>
                Indicates the definition element is not editable
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.Visible">
            <summary>
                Indicates the definition element is not editable
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.OwningDefinitionSet">
            <summary>
                The definition set this definition item is declared in
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.AllMembers">
            <summary>
                All of the members of this definition item
                This includes all secondary members such as related DbViews
                the default implementation return OwnedMembers, i.e. it assumes no secondaries
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.OwnedMembers">
            <summary>
                All of the owned members of this definition item
                This only includes direct members
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.IsValid">
            <summary>
                Indicates this definition is ok to use
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.TYPE">
            <summary>
                The DbElementType the definition element is representing
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.Count">
            <summary>
                The number of owned members
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.DefinitionItem.PropertyChanged">
            <summary>
                Raised whenever a public property is Changed
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItem.Item(System.Int32)">
            <summary>
                The owned member at the given index
                IndexOutOfBounds exception thrown if index &gt;= count or index &lt; 0
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Database.View.IColumn">
            <summary>
            Interface for defining database view columns
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.IColumn.GetValue(Aveva.Core.Database.View.DbViewElement)">
            <summary>
            The column value for a given row element, returns DbNull if there was a problem accessing the column value
            </summary>
            <param name="dbViewElement">The row element</param>
            <returns>The value for the column cell, or DbNull if the value cannot be returned</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IColumn.SetValue(Aveva.Core.Database.View.DbViewElement,System.Object)">
            <summary>
            Sets the column value for a given row element.
            A side affect of setting a column value may be element creation.  In the event that element creation can't be completed
            An exception is thrown. in this case the wrapping transaction must be aborted.
            DbViewElement.ErrorInfo is updated if the value can't be set for a simple reason
            </summary>
            <param name="dbViewElement">The row element</param>
            <param name="value">The value to set the row column to</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IColumn.DbViewSets">
            <summary>
            The database view sets that this column is part of
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.IColumn.ColumnRelations">
            <summary>
            The relationships this column is part of
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.IColumn.SourceElement">
            <summary>
            The source element that defines this column
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.IColumn.DbView">
            <summary>
            The database view this column is defined in.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.IColumn.RaiseTypeConverterChanged">
            <summary>
            This method is to be called to indicate to listeners that the TypeConverter has changed.
            This is called automatically if a TypeConverter is registered with the EditRegister
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.IColumn.RaiseUITypeEditorChanged">
            <summary>
            This method is to be called to indicate to listeners that the UITypeEditor has changed.
            This is called automatically if a UITypeEditor is registered with the EditRegister
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IColumn.ColumnName">
            <summary>
            The unique column name within the DbView
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IColumn.UDNAME">
            <summary>
            User requested column name.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IColumn.DESC">
            <summary>
            The column description
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IColumn.UTYPE">
            <summary>
            DbAttribute type for the column value returned from GetValue
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IColumn.ColumnType">
            <summary>
            System type of the column value returned from GetValue
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IColumn.IsArray">
            <summary>
            Column type is array
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IColumn.READONLY">
            <summary>
            Indicates whether this column is read only.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IColumn.Dimension">
            <summary>
            The dimension of the column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IColumn.XmlLocalName">
            <summary>
            The XML encoded local name when this column is used as an Xml element or attribute
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.IInternalDefinitionItem">
            <summary>
            Internal interface required for maintaining IDefinitionItems
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.IInternalDefinitionItem.ToXML(System.Xml.XmlElement)">
            <summary>
            converts the definition instance to its XML representation
            </summary>
            <param name="ownerElement"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IInternalDefinitionItem.SetAllDbAttributes">
            <summary>
            Sets all of the database attributes on DefinitionElement to match the instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.IInternalDefinitionItem.GetDefinitionItem">
            <summary>
            Gets the DefinitionIem instance from the implementing class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.IInternalDefinitionItem.TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.IInternalDefinitionItem.Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Makes a copy of the given definition item
            </summary>
            <param name="refLookup">A lookup from the original item to the copied item</param>
            <param name="refItems">the list of items that require references to be resolved after copy has been called.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.IInternalDefinitionItem.ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Removes any references to items that haven't been copied.  i.e. items not in refLookup
            replaces any references in the hierarchy using the refLookup dictionary.
            </summary>
            <param name="refLookup">The lookup of the copied definition items and their copies</param>
        </member>
        <member name="P:Aveva.Core.Database.View.IInternalDefinitionItem.TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.IInternalNamedItem">
            <summary>
            Interface introduced for columns to help with unique name management
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IInternalNamedItem.UniqueName">
            <summary>
            Access to the unique name, for internal item management only hence the scope
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_dbattAtt">
            <summary>
            attribute cached for performance.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_udaColumns">
            <summary>
            mapping of UDA definitions to columns to manage change
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_unresolvedColumns">
            <summary>
            Attribute columns whos attribute names haven't been resolved to attributes.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.#cctor">
            <summary>
            Manage changes to UDAs to avoid accessing invalid attribute instances.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.UDTracker_UDAsCompiled(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_DESC">
            <summary>
            The DESC of this definition
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_ATTRIBUTE">
            <summary>
            The attribute wrapped by this column definition
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_attName">
            <summary>
            The name of the attribute as last user set.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_UDNAME">
            <summary>
            The users name for this column
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_uniqueName">
            <summary>
            The unique name for this column in its owning DbView
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_xmlName">
            <summary>
            The Xml name for this column
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_READONLY">
            <summary>
            Makes this column readonly
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_qualifier">
            <summary>
            The attribute qualifier to pass in when getting the value
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_dbqualifier">
            <summary>
            The constructed qualifier instance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeColumn.m_tempSetValue">
            <summary>
            a temporary value used when creating elements during a set operation.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.RaiseTypeConverterChanged">
            <summary>
            Raise TypecConverter changes
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.RaiseUITypeEditorChanged">
            <summary>
            Raise type editor changes
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.SetUDNAME(System.String)">
            <summary>
            Sets the m_UDNAME member and raises the necessary change events
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.SetATTRIBUTE(Aveva.Core.Database.DbAttribute)">
            <summary>
            Sets m_ATTRIBUTE and raises the necessary change events
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.SetDbQualifier">
            <summary>
            Constructs a qualifier of the right type from the qualifier string
            Nb DBATT must not be empty
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.#ctor(Aveva.Core.Database.View.AttributeColumn)">
            <summary>
            Copy constructor.  This creates a copy that is not part of the current definition set.
            This doesn't copy members.
            References properties are to the original reference targets and must be amended by calling code
            </summary>
            <param name="attCol"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.ManageAttributeColumn">
            <summary>
            Keeps track of columns based on UDAs
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.UnmanageAttributeColumn">
            <summary>
            Keeps track of columns based on UDAs
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.HandleUDACreate">
            <summary>
            check the attribute if a UDA is created and this has an unresolved attribute
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.HandleUDAChange">
            <summary>
            called when the UDA this attribute column represents is changed
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.HandleUDADelete">
            <summary>
            called when the UDA this attribute columns represents is deleted.
            This unsets the Attribute in order to avoid any access problems
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.TypeFor(Aveva.Core.Database.DbAttribute)">
            <summary>
            Gets the system type for a given attribute
            </summary>
            <param name="att">The attribute to get the system type for.</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="config">The XML configuration node for a ATTCOL element</param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Creates an XML representation of this definition
            </summary>
            <param name="ownerElement">The element to add it to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.RaiseDbViewChanged">
            <summary>
            Raised the property changed event for the DbView property.
            Nb this is called by the DbView and not managed by the column
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.SourceElement">
            <summary>
            The source element this column is defined in
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.DbView">
            <summary>
            The Database View this column definition is in
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.GetValue(Aveva.Core.Database.View.DbViewElement)">
            <summary>
            Gets the value for this column given a row instance
            or returns a DbNull if an exception occurred while accessing the value
            </summary>
            <param name="dbViewElement">The row object</param>
            <returns>DbNull, or the value for the column</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.GetValue(Aveva.Core.Database.View.DbViewElement,System.String,Aveva.Core.Database.DbQualifier)">
            <summary>
            Gets the value for this column given a row instance
            or returns a DbNull if an exception occurred while accessing the value
            </summary>
            <param name="dbViewElement">The row object</param>
            <param name="columnName">The name of column</param>
            <param name="dbqualifier">The qualifier instance</param>
            <returns>DbNull, or the value for the column</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.SetValue(Aveva.Core.Database.View.DbViewElement,System.Object)">
            <summary>
            Sets the value of the column attribute to the value given for the given row instance.
            May throw exceptions resulting from the set, in this case the current transaction must be aborted.
            On failure of a simple attribute set then the Error information on the DbViewElement is updated.
            </summary>
            <param name="dbViewElement">The row object</param>
            <param name="value">The value to set the attribute to</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.SetValue(Aveva.Core.Database.View.DbViewElement,System.Object,System.String,Aveva.Core.Database.DbQualifier)">
            <summary>
            Sets the value of the column attribute to the value given for the given row instance.
            May throw exceptions resulting from the set, in this case the current transaction must be aborted.
            On failure of a simple attribute set then the Error information on the DbViewElement is updated.
            </summary>
            <param name="dbViewElement">The row object</param>
            <param name="value">The value to set the attribute to</param>
            <param name="columnName">The name of column</param>
            <param name="dbqualifier">The qualifier instance</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.ClearErrors(Aveva.Core.Database.View.DbViewElement,Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
             clears errors on columns contained by item
            </summary>
            <param name="viewElement"></param>
            <param name="item"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.SetValueDuringCreate(Aveva.Core.Database.View.CreateInformationSet,System.Boolean@,System.Boolean@)">
            <summary>
            Set the temporary value on attribute columns during element creation
            </summary>
            <param name="ciSet">Create information set for each of the attribute (columns?) to be created on the element</param>
            <param name="cancelled">Cancel creating the element</param>
            <param name="suppress">Suppress getting the values or confirmation about the values - always true</param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.DbViewSets">
            <summary>
            The Database View Sets this column is part of
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.ColumnRelations">
            <summary>
            The Column Relationships that refer to this column
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeColumn.ToString">
            <summary>
            The unique name, within the DbView definition of this column
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.Aveva#Core#Database#View#IInternalNamedItem#UniqueName">
            <summary>
            Sets the unique name for the column, Nb should only be called by DbView since no schecking is performed.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.UITypeEditor">
            <summary>
            Type editor if a specific editor is required.
            This is set using the EditRegister instance
            Nb this returns null if standard editors are to be used.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.TypeConverter">
            <summary>
            Type converter if a specific converter is required.
            This is set using the EditRegister instance
            Nb this returns null if standard converters are to be used.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.ATTRIBUTE">
            <summary>
            The wrapped attribute, this may be null
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.ColumnType">
            <summary>
            The type of the column value
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.UTYPE">
            <summary>
            The type of the column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.IsArray">
            <summary>
            IsArray from the wrapped attribute
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.DESC">
            <summary>
            The column description
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.UDNAME">
            <summary>
            The full name for the column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.ATQUALIFIER">
            <summary>
            The attribute qualifier used to get the column value.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.READONLY">
            <summary>
            Indicates this column is configured to be readonly.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.Dimension">
            <summary>
            The Dimension of the column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.IsValid">
            <summary>
            Indicates this column is ok to use for Database Views
            This is true if the attribute column is named and has DbAttribute set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.TYPE">
            <summary>
            The database element type this object represents/manages
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.ColumnName">
            <summary>
            The name of this column when used in a Data Table
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeColumn.XmlLocalName">
            <summary>
            The Xml Name for this column when used as an element or attribute
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.AttributeFilter">
            <summary>
            A filter for elements that is defined using an attribute, operator and value.
            this matches the Search Utility
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeFilter.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeFilter.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeFilter.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeFilter.m_defItem">
            <summary>
            helper for common methods
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeFilter.m_ATTRIBUTE">
            <summary>
            The database attribute being filtered on
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeFilter.m_FILTOPERATOR">
            <summary>
            The filter operators e.g. equals, in range etc
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeFilter.m_FILTVALUE">
            <summary>
            The value to compare the attribute value to
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.AttributeFilter.m_filter">
            <summary>
            the filter used by this wrapper.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.#ctor(Aveva.Core.Database.View.AttributeFilter,System.Boolean)">
            <summary>
            Clone constructor
            </summary>
            <param name="filter">The filter to clone</param>
            <param name="clone">if true then provides a shallow clone, if false a deep copy</param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.CheckOperator">
            <summary>
            Checks the operator is suitable for the attribute and defaults it if it isn't
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.OperatorOkForAttribute(Aveva.Core.Database.Filters.FilterOperator)">
            <summary>
            Checks an operator against the current attribute for suitability
            </summary>
            <param name="foper"></param>
            <returns>true if ok, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.GetDefaultOperator">
            <summary>
            Gets the default operator for this.DbAttribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.m_defItem_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Cascades property changed events for m_defItem.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for the relevant property
            </summary>
            <param name="name">The name of the property that has changed</param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.SetATTRIBUTE(Aveva.Core.Database.DbAttribute)">
            <summary>
            sets m_ATTRIBUTE and raises necessary events
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="element">The XML definition for this instance</param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            represents this definition as an XmlElement and adds it to the given XmlElement
            </summary>
            <param name="ownerElement">The element to append it to</param>
            <returns>The element created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Aveva#Core#Database#View#IInternalDefinitionItem#GetDefinitionItem">
            <summary>
            provides the definitionItem instance to the calling code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.ScanBelow(Aveva.Core.Database.DbElement)">
            <summary>
            Determines whether or not members should be scanned in an element scan
            </summary>
            <param name="element">The element to test</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Valid(Aveva.Core.Database.DbElement)">
            <summary>
            Tests an element using the filter to see if it matches the filter criteria
            </summary>
            <param name="element">The element to test</param>
            <returns>true if it matches, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.AlternativeEnumerator(Aveva.Core.Database.Db,System.Int32@)">
            <summary>
            method to test whether there is
            an alternative fast Enumerator that can be generated for
            from the predicate for a particular DB.
            e.g. if testing type we could have a name table Enumerator instead
            Needed to make use of indexed Udas
            </summary>
            <param name="db">database</param>
            <param name="priority">Priority. Used by the 'AND' predicate to decide which enumerator to use. If will use the enumerator with the highest value</param>
            <returns>an alternative Enumerator or null</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.#ctor">
            <summary>
            Default constructor,
            object must be added to a DbView or SourceElement
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Clone">
            <summary>
            Makes a deep copy of this attribute filter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Add(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            Adds the given item to the owned members,
            throws an InvalidOperationException if item is not permitted as a member
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Insert(System.Int32,Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            Inserts a given item at a given index
            </summary>
            <param name="index">The position to insert the item at</param>
            <param name="item">The item to insert</param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Remove(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            Removes the given item from the owned members
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.RemoveAt(System.Int32)">
            <summary>
            Removes the given item from the given index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.IndexOf(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            The index of the given item in the owned members.
            </summary>
            <param name="item">The item to search for</param>
            <returns>-1 if not contained, otherwise the index of the given member in the owned members</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Create(System.Int32,Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the given type at the given index.
            Notes :-
            - throws an IndexOutOfBounds exception if index &gt; Count
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="index">The position to create the new item at</param>
            <param name="etype">The type of item to create</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.CreateAfter(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type after this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type">The type to create</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.CreateBefore(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type before this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type">The type of item to create</param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.CreateFirst(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type as the first member of this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type"></param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.CreateLast(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type as the last member of this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type"></param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Delete">
            <summary>
            Deletes this item if allowed, throws an exception if not allowed, or a db error occurs
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.SplitValueIntoList">
            <summary>
            Splits the FILTVALUE into a string[]
            Nb the calling code should first check the value is a list, if a single item then the first string is the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.ToString">
            <summary>
            A string representation to help identify this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.Copy">
            <summary>
            Creates a deep copy of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.AttributeFilter.OwnedMembersOfType(Aveva.Core.Database.DbElementType)">
            <summary>
            Returns OwnedMembers of IDefinitionItem for a certain DbElementType.
            </summary>
            <param name="elementType">The type of elements to return.</param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.BaseFilter">
            <summary>
            Sets the wrapped base filter if possible
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.ATTRIBUTE">
            <summary>
            The attribute that is being filtered
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.FILTOPERATOR">
            <summary>
            The filter operator for the filter
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.FILTVALUE">
            <summary>
            The value to compare the attribute value against using the specified operator
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.NAME">
            <summary>
            The NAME attribute of the definition
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.REF">
            <summary>
            The REF of the filter in the dictionary database
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.TYPE">
            <summary>
            The DbElementType this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.Owner">
            <summary>
            The Owner of this definition item
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.AllMembers">
            <summary>
            An Empty enumeration since members are not permitted.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.OwnedMembers">
            <summary>
            All members, an empty list
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.DefinitionElement">
            <summary>
            The database element this definition is based on
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.IsValid">
            <summary>
            Indicates this definition is ok for use
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.ReadOnlyDefinition">
            <summary>
            The definition is not editable
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.Visible">
            <summary>
            The definition is not editable
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.OwningDefinitionSet">
            <summary>
            The definition set this is defined in
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.Count">
            <summary>
            The number of owned members
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.AttributeFilter.Item(System.Int32)">
            <summary>
            The owned member at the given index
            IndexOutOfBounds exception thrown if index &gt;= count or index &lt; 0
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="E:Aveva.Core.Database.View.AttributeFilter.PropertyChanged">
            <summary>
            Raised whenever a public property is Changed
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter">
            <summary>
            Filter created to support logical delete.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.type">
            <summary>
            Type cached for performance.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.memberTypes">
            <summary>
            Member types cached for performance.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.exclude">
            <summary>
            If true then all database elements for which the EXCLEL attribute is valid and is set on true do not match filter criteria.
            If false then all database elements match filter criteria.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.definitionItemHelper">
            <summary>
            Helper for common methods.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.#ctor(Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.ScanBelow(Aveva.Core.Database.DbElement)">
            <summary>
            Determines whether or not members should be scanned in an element scan.
            </summary>
            <param name="element">The element to test</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Valid(Aveva.Core.Database.DbElement)">
            <summary>
            Tests an element using the filter to see if it matches the filter criteria.
            </summary>
            <param name="element">The element to test</param>
            <returns>true if it matches, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Clone">
            <summary>
            Makes a copy of this attribute filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.OwnedMembersOfType(Aveva.Core.Database.DbElementType)">
            <summary>
            Returns OwnedMembers of IDefinitionItem for a certain DbElementType.
            </summary>
            <param name="elementType">The type of elements to return.</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.MemberTypes">
            <summary>
            The types of members allowed to exist as members of this definition item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Add(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            Adds the given item to the owned members, throws an InvalidOperationException
            if item is not permitted as a member.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Insert(System.Int32,Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            Inserts a given item at a given index.
            </summary>
            <param name="index">The position to insert the item at</param>
            <param name="item">The item to insert</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Remove(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            Removes the given item from the owned members.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.RemoveAt(System.Int32)">
            <summary>
            Removes the given item from the given index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.IndexOf(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            The index of the given item in the owned members.
            </summary>
            <param name="item">The item to search for</param>
            <returns>-1 if not contained, otherwise the index of the given member in the owned members</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Create(System.Int32,Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the given type at the given index.
            Notes :-
            - throws an IndexOutOfBounds exception if index &gt; Count
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="index">The position to create the new item at</param>
            <param name="etype">The type of item to create</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.CreateAfter(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type after this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type">The type to create</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.CreateBefore(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type before this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type">The type of item to create</param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.CreateFirst(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type as the first member of this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type"></param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.CreateLast(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type as the last member of this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type"></param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Delete">
            <summary>
            Deletes this item if allowed, throws an exception if not allowed, or a db error occurs.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Copy">
            <summary>
            Creates a deep copy of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.ToXML(System.Xml.XmlElement)">
            <summary>
            Converts the definition instance to its XML representation.
            </summary>
            <param name="ownerElement"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.SetAllDbAttributes">
            <summary>
            Sets all of the database attributes on DefinitionElement to match the instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.GetDefinitionItem">
            <summary>
            Gets the DefinitionIem instance from the implementing class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call.
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Makes a copy of the given definition item
            </summary>
            <param name="refLookup">A lookup from the original item to the copied item</param>
            <param name="refItems">the list of items that require references to be resolved after copy has been called.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Removes any references to items that haven't been copied.  i.e. items not in refLookup
            replaces any references in the hierarchy using the refLookup dictionary.
            </summary>
            <param name="refLookup">The lookup of the copied definition items and their copies</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.SplitValueIntoList">
            <summary>
            Splits the FILTVALUE into a string[]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Valid(Aveva.Core.Database.View.DbView)">
            <summary>
            Test database view to resolve if it is sense to use this filter.
            </summary>
            <param name="view">Database view.</param>
            <returns>true, false - in this case the Valid(DbElement element) function always return true.</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.ATTRIBUTE">
            <summary>
            The attribute that is being filtered.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.FILTOPERATOR">
            <summary>
            The filter operator for the filter.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.FILTVALUE">
            <summary>
            The value to compare the attribute value against using the specified operator.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.NAME">
            <summary>
            The NAME attribute of the definition.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.REF">
            <summary>
            The REF of the filter in the dictionary database.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.DefinitionElement">
            <summary>
            The database element this definition is based on.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.TYPE">
            <summary>
            The DbElementType this represents.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Owner">
            <summary>
            The Owner of this definition item.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.AllMembers">
            <summary>
            All primary and secondary members of this definition item.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.OwnedMembers">
            <summary>
            All owned/primary members of this definition item.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.OwningDefinitionSet">
            <summary>
            The definition set this is defined in.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.IsValid">
            <summary>
            Indicates if this definition is okay for use.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.ReadOnlyDefinition">
            <summary>
            Indicates if the definition element is readonly.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Visible">
            <summary>
            Indicates if the definition is visible.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Count">
            <summary>
            The number of owned members.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Item(System.Int32)">
            <summary>
            The owned member at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.Exclude">
            <summary>
            If true then all database elements for which the EXCLEL attribute is valid and is set on true do not match filter criteria.
            If false then all database elements match filter criteria.
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.ExcludeFromProjectAttributeFilter.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.ColumnRelation">
            <summary>
            Class defining a parent child relationship between columns, this is used
            to build DataRelation instances for DataSets
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_colRelations">
            <summary>
            A collection of all of the assigned unique names
            This is used to detect and avoid all name clashes
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_definitionSets">
            <summary>
            A collection of all the definition sets used to manage m_dbViewSets.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_defSetPropertyChanged">
            <summary>
            A handler for tracking IsValid on DefinitionSets.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.DefinitionSetPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Ensures if a definition set is removed from the set that its column relation names are freed for reuse.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_config">
            <summary>
            Keep the XML this is defined from, used for lazy initialisation of columns
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_UDNAME">
            <summary>
            The name of this column relationship as requested by the user
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_uniqueName">
            <summary>
            the unique name of this column relationship, managed with all others
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_oldUniqueName">
            <summary>
            When an item is removed from its owner the unique name is cached and removed from name management.
            if the item is reinstated this can then be use in preference to a new one
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_DESC">
            <summary>
            The description of this relationship
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_parentColumn">
            <summary>
            The parent column
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_childColumn">
            <summary>
            The child column
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_initialised">
            <summary>
            Flag to help with lazy initialisation.
            Lazy initialisation is performed to stop cyclic DbViewSets.Instance being called and helps ensure all columns are defined before the
            relationships are resolved.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_columnChangedHandler">
            <summary>
            handler for column events that affect this relationship
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_isValid">
            <summary>
            Last known state of IsValid used to raise IsValid changed event
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnRelation.m_relevantdbTypes">
            <summary>
            The list of dbtypes relevant to this dbViewSet
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.Initialise">
            <summary>
            Sets the parent and child columns on a JIT basis to stop cyclic Instance calls and ensure columns exist.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.ColumnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Used to raise IsValidChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.CheckIsValid">
            <summary>
            Checks that IsValid is upto date and raises PropertyChanged if changed
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.GetColumn(System.String)">
            <summary>
            Gets a column given its name or reference
            </summary>
            <param name="columnRefOrName">The column definition to find</param>
            <returns>A column that matches the given name or ref, or null if not found</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.setPARCOLUMN(Aveva.Core.Database.View.IColumn)">
            <summary>
            Sets PARCOLUMN and raises events
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.setCHDCOLUMN(Aveva.Core.Database.View.IColumn)">
            <summary>
            Sets CHDCOLUMN and raises events
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.CheckColumnContext(Aveva.Core.Database.View.IColumn)">
            <summary>
            Checks whether a column is suitable for parcolumn or chdcolumn
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.CreateHandlersAndDelegates">
            <summary>
            Creates the handlers to manage this instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.#ctor(Aveva.Core.Database.View.ColumnRelation)">
            <summary>
            Creates a copy of this column relation, doesn't copy members
            </summary>
            <param name="colRel">the relationship to deep copy.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.RaisePropertyChanged(System.String)">
            <summary>
            overrides raise property changed in order to respond to Filter and IsValid changes
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.SetUDNAME(System.String)">
            <summary>
            Sets the UDNAME value and sorts out all side effects
            </summary>
            <param name="newValue">The value to set it to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.SetUniqueName">
            <summary>
            Sets the unique name of this ColumnRelation
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.ClearUniqueName">
            <summary>
            Clears the unique name, called when the relation is removed from its owner or
            the definition set is made invalid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.GetRelevantDbTypes">
            <summary>
            gets the list of relevant dbtypes for the DbView
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor.
            Nb it is important that the Columns are defined/constructed before the relationship object
            </summary>
            <param name="config">The xml config node for the ColumnRelation element</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Create an XML representation of this definition node and adds it to the given owner
            </summary>
            <param name="ownerElement"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, sorts out references to point to copied items
            clears references to items not copied
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.#ctor">
            <summary>
            Default constructor
            Must be added to a Definition Set or DbViewSet before use
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.Name">
            <summary>
            The unique name of the Column Relation within DbViewSets.
            If UDNAME is not set or there is a clash with another relation then this will have the form Relation<i>N</i>
            </summary>
            <returns>The globally unique name of this Column Relation</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.DbViewSets">
            <summary>
            The Database View Sets this Column Relation is relevant to,
            this is calculated from the referenced columns
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.AddDataRelation(Aveva.Core.Database.View.DbViewSet,System.Data.DataSet)">
            <summary>
            Adds this data relation to the given dataset
            </summary>
            <param name="dbViewSet">The DatabaseViewSet that is being represented</param>
            <param name="dset">The DataSet to add the relationship to.</param>
            <returns>true if added, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.OwningDbViewSet">
            <summary>
            The Database View Set this relationship is defined in
            null if this is independently defined.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnRelation.ToString">
            <summary>
            Returns the unique name for this column relation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.ColumnRelation.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ColumnRelation.DESC">
            <summary>
            The description of this relationship
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ColumnRelation.UDNAME">
            <summary>
            The name of this dataRelation
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ColumnRelation.PARCOLUMN">
            <summary>
            The parent column or superset column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ColumnRelation.CHDCOLUMN">
            <summary>
            The child column or subset column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ColumnRelation.IsValid">
            <summary>
            Checks whether the data relation is valid or not
            should be checked before building
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ColumnRelation.TYPE">
            <summary>
            The type of DbElement that this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ColumnRelation.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ColumnRelation.RelevantDbTypes">
            <summary>
            The database types that this is relevant to
            Nb this only reflects the database types of the Root elements for the rows.
            identification of database types within the row element is not supported.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.ColumnResultType">
            <summary>
            Type of the expression result (first part maps onto DbAttributeType)
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.INTEGER">
            <summary>
            Integer
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.DOUBLE">
            <summary>
            Floating-point
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.BOOL">
            <summary>
            Boolean (True/False)
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.STRING">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.ELEMENT">
            <summary>
            Element
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.WORD">
            <summary>
            Binary
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.DIRECTION">
            <summary>
            Direction vector
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.POSITION">
            <summary>
            Position point
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.ORIENTATION">
            <summary>
            Orientation matrix
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.DATETIME">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.STRINGARRAY">
            <summary>
            String Array
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.BLOB">
            <summary>
            Blob
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.ELEMENTARRAY">
            <summary>
            Element Array
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.INTEGERARRAY">
            <summary>
            Int Array
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.DOUBLEARRAY">
            <summary>
            Double Array
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ColumnResultType.BOOLARRAY">
            <summary>
            Bool Array
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.ColumnResultTypeConverter">
            <summary>
            Converts to ColumnType from DBAttributeType
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ColumnResultTypeConverter.ToColumnResultType(Aveva.Core.Database.DbAttributeType)">
            <summary>
            Does conversion
            </summary>
            <param name="value">value</param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Database.View.DbAttributeTypeConverter">
            <summary>
            Converts to DbAttributeType from ColumnResultType
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbAttributeTypeConverter.ToDbAttributeType(Aveva.Core.Database.View.ColumnResultType)">
            <summary>
            Does conversion
            </summary>
            <param name="value">value</param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Database.View.CreateInformationType">
            <summary>
            Enumeration of information types required to create a dbelement
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationType.TYPE">
            <summary>
            Information is about the TYPE of the element to create
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationType.OWNER">
            <summary>
            Information is about the OWNER of the new element
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationType.PARAMETER">
            <summary>
            Information is a parameter to be used in the creation process
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationType.ATTRIBUTE">
            <summary>
            Information is about the value of an attribute to set on creation
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationType.STATUS">
            <summary>
            Information is about the status to assign to the new element
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.CreateInformation">
            <summary>
            Class to hold information for one part of the create information
            </summary>
            TODO : what happens when m_validValues is an empty collection
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformation.m_defItem">
            <summary>
            The definition item that this information is from
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformation.m_contextElement">
            <summary>
            The context element to evaluate the expression on
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformation.m_citype">
            <summary>
            The type of information in the information record
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformation.m_uprompt">
            <summary>
            The prompt to display to the user
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformation.m_desc">
            <summary>
            The description or help information for the item
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformation.m_expr">
            <summary>
            An expression used to derive the value of the information
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformation.m_value">
            <summary>
            The value of the information
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformation.m_validValues">
            <summary>
            The valid values specified for this information item
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformation.m_required">
            <summary>
            Indicates this a mandatory information record.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformation.m_infoType">
            <summary>
            The type of Value for the information record.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformation.m_parent">
            <summary>
            The set containing this record.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.#ctor">
            <summary>
            Default constructor hidden from use
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.CheckSTATUSValue(System.Object)">
            <summary>
            Checks the object is a valid value for a status value
            </summary>
            <param name="typedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.CheckValidValues(System.String[])">
            <summary>
            Checks the list of valid values and returns a filtered list of valid values.
            The initial list is checked to see that the values are parsable.
            </summary>
            <param name="vvs">the list to check</param>
            <returns>A list of checked values</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.SetValue(System.Object)">
            <summary>
            Sets Value on this instance
            Nb internal so that internal code can bypass readonly check.
            should only be used for ownerinfo in createElement.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.ConditionsOk(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.CreateInformation})">
            <summary>
            Checks the text expressions for this item return true
            </summary>
            <returns>true if all conditions satisfied</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.ReplaceParameters(Aveva.Core.Database.View.Expression,System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.CreateInformation})">
            <summary>
            Re-evaluates Value by substituting the given parameters into the expression
            </summary>
            <param name="expr">The expression to replace the parameter names in</param>
            <param name="parameters">The parameters to substitute into the expression</param>
            <returns>Modified expression with creation parameters substituted. Will return null on failure</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.#ctor(Aveva.Core.Database.View.SourceElement,Aveva.Core.Database.View.CreateInformationType,Aveva.Core.Database.DbElement,Aveva.Core.Database.View.CreateInformationSet)">
            <summary>
            Constructs an information record object from a DbView.
            </summary>
            <param name="srcElement">The view or srcElement to construct it from</param>
            <param name="citype">The type of information item to create, TYPE or OWNER</param>
            <param name="contextElement">The element to evaluate the expression on</param>
            <param name="set">The information set containing this record</param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.#ctor(Aveva.Core.Database.View.CreateRules,Aveva.Core.Database.View.CreateInformationType,Aveva.Core.Database.DbElement,Aveva.Core.Database.View.CreateInformationSet)">
            <summary>
            Constructs an information object from a CRERUL rule
            </summary>
            <param name="citype"> must be TYPE or OWNER, otherwise an InvalidOperationException is thrown</param>
            <param name="contextElement">The element to evaluate the expression on</param>
            <param name="crerule">The CreateRules DefinitionItem the information record is to be built from</param>
            <param name="set">The information set containing this record</param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.PopulateValidValuesForType(Aveva.Core.Database.View.SourceElement,Aveva.Core.Database.DbElement)">
            <summary>
            uses the source element expression to populate the valid values list
            </summary>
            <param name="srcElement"></param>
            <param name="contextElement"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.#ctor(Aveva.Core.Database.View.SetAttribute,Aveva.Core.Database.DbElement,Aveva.Core.Database.View.CreateInformationSet)">
            <summary>
            Constructs an information record object from a SetAttribute rule
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.#ctor(Aveva.Core.Database.View.SetParameter,Aveva.Core.Database.DbElement,Aveva.Core.Database.View.CreateInformationSet)">
            <summary>
            Constructs an information record object from a SetParameter rule
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.ReEvaluateInformationType">
            <summary>
            Called by the create information set once all create information entities have been created.
            This adjusts the information type which requires the set to be complete at the time of execution.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.#ctor(Aveva.Core.Database.View.SetStatus,Aveva.Core.Database.DbElement,Aveva.Core.Database.View.CreateInformationSet)">
            <summary>
            Constructs an information record object from a SetParameter rule
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.#ctor(Aveva.Core.Database.View.AttributeFilter,Aveva.Core.Database.DbElement,Aveva.Core.Database.View.CreateInformationSet)">
            <summary>
            The attribute filter to match the set rule to
            </summary>
            <param name="attFilter">The attribute filter to create the information record from.</param>
            <param name="contextElement"></param>
            <param name="set">The information set containing this record</param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.#ctor(Aveva.Core.Database.DbAttribute,Aveva.Core.Database.DbElement,Aveva.Core.Database.View.CreateInformationSet)">
            <summary>
            Constructs an information record object from a DbAttribute rule
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.AddFilterInfo(Aveva.Core.Database.View.AttributeFilter)">
            <summary>
            Adds filter constraints to an existing information record.
            </summary>
            <param name="attFilter">The filter to add constraints for</param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.SetValidValues(System.String[])">
            <summary>
            Sets the valid values allowed on this create information
            This is only used for DistributedAttribute support where
            the ENGITEM is listed.
            </summary>
            <param name="validValues"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.EvaluateUsingParameters(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.CreateInformation})">
            <summary>
            Re-evaluates Value by substituting the given parameters into the expression
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.RaiseValueChanged">
            <summary>
            Raises the CreateInfoValueChanged event
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.AllowedValues(Aveva.Core.Database.DbElementType)">
            <summary>
            The values that are valid for this information record for a given DbElementType context.
            If etype is null then the known valid values are returned based on the DbView configuration.
            etype must be provided for attributes so that the dblayer valid values can be accessed and returned once processed
            against the dbview rules.
            </summary>
            <param name="etype">The element type being created, may be null especially if on a TYPE record, for attributes it should be set</param>
            <returns>An IEnumerable of DBAttributeValidValue containing (for each allowed value) the allow value, 
            the display value and it's description. Can return null (or zero count enumerable) if no valid values.
            </returns>	
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.AllowedValuesForArrayItems(Aveva.Core.Database.DbElementType)">
            <summary>
            Gets an IEnumerable list of allowed values for items inside array.
            </summary>
            <param name="etype">The element type the values are applicable for</param>
            <returns>An IEnumerable of the valid values for this DbAttribute (if attribute is information record - attribute to get the values for)
            on the passed element type. Can return null if cannot retrieve the valid values </returns>	
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.SuggestedValues(Aveva.Core.Database.DbElementType)">
            <summary>
            Gets an IEnumerable of values that are suggested but not mandatory for a given DbElementType context.
            This is empty if there is a mandatory list of values.
            </summary>
            <param name="etype">The element type being created. </param>
            <returns>An IEnumerable of the valid values for this 
            DbAttribute (if attribute is information record - attribute to get the values for)
            on the passed element type. Can return null if cannot retrieve the valid values </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.GetAllowedValuesForAttribute(Aveva.Core.Database.DbAttribute,Aveva.Core.Database.DbElementType)">
            <summary>
            Gets the valid values for a given database attribute on a specified element type.
            </summary>
            <param name="att">The attribute to get the values for</param>
            <param name="etype">The element type the values are applicable for</param>
            <returns>An IEnumerable containing the valid values for attribute. Returns null if it can't get
            the allowed attribute values</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.ConditionsMet(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.CreateInformation})">
            <summary>
            Indicates that all of the test expressions for this action return true
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.GetAllowedValuesForParameter(Aveva.Core.Database.DbElementType)">
            <summary>
            Gets the allowed values for this record if this is a parameter record.
            Nb where different element types have different value lists the union of the two sets is returned.
            </summary>
            <param name="etype">The element type if known</param>
            <returns>An IEnumerable containing the allowed values for parameter. 
            Returns null if can't retrieve the allow values</returns>        
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformation.ParameterDbAttribute">
            <summary>
            Tries to parse the attribute that a parameter information record is being used to set. 
            This is provided to help in the promotion of valid values lists to parameters.
            </summary>
            <returns>null if not parsable</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.DefinitionItem">
            <summary>
            Gets the definition item that this information record object was created from.
            Nb in some cases other definition items such as filters may have also contributed to its content.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.ContextElement">
            <summary>
            The element that defines the context for the element creation.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.CreateInformationSet">
            <summary>
            The Set that created this CreateInformation record.
            Nb the record may have been removed from the set since creation
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.CreateInfoType">
            <summary>
            The type of information in this information record
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.InformationType">
            <summary>
            The system type for Value.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.Prompt">
            <summary>
            The prompt to display to the user
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.Key">
            <summary>
            key for the create information, should be unique but might not be
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.Description">
            <summary>
            The help text/description of what is being asked for
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.DefaultValue">
            <summary>
            The default value for this property\information
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.Expression">
            <summary>
            The expression used to derive the Value for this information record.
            Nb the expression may require substitution of the information set parameters
            This returns a null string if no expression is set.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.ExpressionType">
            <summary>
            The syntax of Expression.  If Expression is null then PML is returned as the default value.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.ValueString">
            <summary>
            Returns the string representation of Value
            TODO add TypeConverters for get/set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.Value">
            <summary>
            The value for the information record
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.ParameterName">
            <summary>
            The name of the parameter if this is a parameter information record.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.DbAttribute">
            <summary>
            The database attribute if this is an attribute information record.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.Conditional">
            <summary>
            Indicated that this is conditionally executed.  i.e. there are one
            or more test expressions defined
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.UserInformation">
            <summary>
            Identifies that a record contains user information and doesn't originate from the rules or an expression evaluation
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.InputRequired">
            <summary>
            Identifies whether or not the user/apps still need to provide input for this create information record.
            Nb this doesn't take account of CreateAncestors for OWNER records,
            ie. an OWNER record with CreateAncestors set to true will return true (input required);
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.InputRequested">
            <summary>
            Identifies whether or not the user/apps should provide input for this create information record.
            Nb this doesn't take account of CreateAncestors for OWNER records,
            ie. an OWNER record with CreateAncestors set to true will return true (input required);
            All information records that return true for InputRequired will return true for InputRequested.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.Required">
            <summary>
            Indicates this is a mandatory part of the information for the create process.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.ReadOnly">
            <summary>
            Indicates the value is fixed or expression derived.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformation.IsXPITEM">
            <summary>
            Indicates this is a type information record that contains an XPITEM as its value or all of its allowed values are XPITEMs.
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.CreateInformation.ValueChanged">
            <summary>
            Event raised when an information records value changes
            The information record is passed as the sender
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.CreateInformationSet">
            <summary>
            The full set of information used to create an element and set up its initial state.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationSet.m_typeInfo">
            <summary>
            The TYPE information for the create action
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationSet.m_ownerInfo">
            <summary>
            The OWNER information for the create action
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationSet.m_parameters">
            <summary>
            The PARAMETERS for the create action
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationSet.m_attributes">
            <summary>
            The ATTRIBUTEs for the create action
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationSet.m_statuses">
            <summary>
            The STATUS definitions for the new element
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationSet.m_all">
            <summary>
            All create information records
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationSet.m_suppressed">
            <summary>
            Suppressed creation rules, such as NAME rules when autonaming is turned on.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationSet.m_createAncestors">
            <summary>
            Determines whether ancestors can be automatically created/identified.
            Defaults to true for views without CRERUL elements, otherwise set from CRERUL
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateInformationSet.m_handler">
            <summary>
            Event handler to track changes to information record values
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.#ctor">
            <summary>
            Hidden default constructor, do not use
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.CreateAncestorElements(Aveva.Core.Database.DbElementType)">
            <summary>
            create the ancestor hierarchy for the element
            </summary>
            <returns> the element identified/created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.GetCreateElement(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbElement)">
            <summary>
            Identifies the first member of the given owner with the specified type or creates a members of the right type.
            </summary>
            <param name="owner">the parent element</param>
            <param name="etype">the type to find/create</param>
            <param name="db">the database, obtained using element.GetElement(DbAttributeInstance.DBREF)</param>
            <returns>Nb this differs from members(etype) since dbtype is guaranteed and an element is created if one doesn't exist. </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.CheckReadWrite(System.Collections.Generic.List{Aveva.Core.Database.DbType})">
            <summary>
             Checks the read/write status of the given dbtypes and strips out any
             read only dbs.
            </summary>
            <param name="dbtypes"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.CheckOWNERDbType">
            <summary>
            Checks the configured OWNER is the right one.
            Nb could be extended to cover duplicate naming errors, currently only tries to sort out WORLD elements
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.m_typeInfo_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Ensures that if the type is set to an XPITEM the necessary attribute rules are present.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.CheckForXPITEM">
             <summary>
             If TYPE is set to a UDET of an XPITEM then this makes sure there is an XRPNTR
             attribute rule.  If the type is subsequently changed back to something that isn't an XPITEM
             then the rule is deleted.
            
             Nb this requires all ui to subscribe to refresh the ui.
             </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.XRPNTR_Rule">
            <summary>
            Gets the Attribute rule for the XRPNTR attribute if one is present
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.CreateInfo_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            If a value changes in a parameter then all expressions are checked and updated.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.RaiseCreateInformationChanged">
            <summary>
            raises the CreateInformationChanged event
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.AddSystemParameters(Aveva.Core.Database.DbElement)">
            <summary>
            Adds standard parameters for use in set expressions.
            </summary>
            <param name="contextElement"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.#ctor(Aveva.Core.Database.View.SourceElement,Aveva.Core.Database.DbElement,System.Boolean)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.IncompleteInfo">
            <summary>
            Returns all of the records that don't have a valid Value property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.IncompleteRequiredInfo">
            <summary>
            Returns all of the records that don't have a valid Value property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.CheckRequiredInfo">
            <summary>
            Checks the required information.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.CreateElement">
            <summary>
            Creates the element defined by these rules.
            throws InvalidOperationException if required information is still not set
            throws ApplicationException if their are problems during the create.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.SetAttributesAndStatus(Aveva.Core.Database.DbElement)">
            <summary>
            Sets the attributes and status.
            Any warning messages generated are ignored.
            </summary>
            <param name="result">The result</param>
            <exception cref="T:System.ApplicationException">
            </exception>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.SetAttributesAndStatus(Aveva.Core.Database.DbElement,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Sets the attributes and status.
            </summary>
            <param name="result">The result.</param>
            <param name="warningMessages">Capture warning messages to be displayed by the calling application</param>
            <exception cref="T:System.ApplicationException">
            </exception>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.CreateNormalElement">
            <summary>
            Create elements that don't require XPITEM logic for distributed attributes
            throws an exception if the create fails.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.CreateXPITEM">
            <summary>
            Special create code for XPITEMS
            throws an Exception if the create fails
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.RelevantDbTypes">
            <summary>
            DbTypes that the element can be created in.
            Nb this can only be called once ACTTYP is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.AddSetColumn(System.String,Aveva.Core.Database.View.AttributeColumn,System.Boolean)">
            <summary>
            Adds a column to the CreateInformationSet
            Nb the column must be owned by the SourceElement or DbView element that is being created
            If the column specified already has an attribute rule then the prompt is updated to reflect the application request
            </summary>
            <param name="prompt">The prompt to show to the user (if shown)</param>
            <param name="coldef">The column to add to the create rules</param>
            <param name="required">set completion required or optional if no value given</param>
            <returns>The CreateInformation item added to the collection</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.InputRequiredInfo">
            <summary>
            Returns all of the records that require application/user input
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.InputRequestedInfo">
            <summary>
            Returns all of the records that require user input combined with those that are not mandatory but aren't complete
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateInformationSet.AllInfo">
            <summary>
            Returns all of the information records
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformationSet.Item(Aveva.Core.Database.DbAttribute)">
            <summary>
            Returns the createInfo for the requested attribute, or null if one doesn't exist
            </summary>
            <param name="att">The attribute to search for</param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformationSet.ACTTYP">
            <summary>
            The Element type for the element being created
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformationSet.OWNER">
            <summary>
            The defined owner for the new element, nb this may be null.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformationSet.Parameters">
            <summary>
            The defined parameters for input into the creation process.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformationSet.CreateAncestors">
            <summary>
            Indicates whether the view is defined to enable ancestors of the element to be automatically created/allocated
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformationSet.DbView">
            <summary>
            The Database view that the create has been called for
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformationSet.SourceElement">
            <summary>
            The SourceElement that the create has been called for.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateInformationSet.AutoNameOn">
            <summary>
            Checks if autonaming is turned on for the current type. what about UDETs/basetypes
            </summary>
            <returns></returns>
        </member>
        <member name="E:Aveva.Core.Database.View.CreateInformationSet.CreateInformationChanged">
            <summary>
            Event raised when CreateInformation records are added or removed from the set.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.CreateRuleDelegate">
            <summary>
            Delegate to enable applications to provide information into the create process
            </summary>
            <param name="infoSet">The information being developed to create the element</param>
            <param name="cancelled">A means of cancelling the element creation process</param>
        </member>
        <member name="T:Aveva.Core.Database.View.CreateRuleIncSuppressionDelegate">
            <summary>
            Delegate to enable applications to provide information into the create process and 
            suppress user input for both any required information that has already been provided and confirmation.
            </summary>
            <param name="infoSet">The information being developed to create the element</param>
            <param name="cancelled">A means of cancelling the element creation process</param>
            <param name="suppress">A means of suppressing the user input if the mandatory information required  
            to create the element is already provided</param>	
        </member>
        <member name="T:Aveva.Core.Database.View.CreateRules">
            <summary>
            Object representation of the CRERULES element for Database Views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateRules.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateRules.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateRules.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateRules.m_createRuleDelegates">
            <summary>
            The list of delegates that want to contribute towards the element creation process.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateRules.m_createRuleIncSuppressionDelegate">
            <summary>
            The list of delegates that can contain all the required information to create the element - if suppressed no user input required
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateRules.m_DESC">
            <summary>
            The description for this element
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateRules.m_OWNEXPRESSION">
            <summary>
            Expression denoting the owner for any new elements
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateRules.m_TYPEXPRESSION">
            <summary>
            Expression denoting the type for any new elements
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateRules.m_CREANCESTORS">
            <summary>
            true - creates hierarchy, or places created element in first existing hierarchy
            false - owner must exist
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateRules.m_ownExprPropertyChanged">
            <summary>
            track changes to the owner expression
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.CreateRules.m_typExprPropertyChanged">
            <summary>
            track changes to the type expression
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.CreateHandlersAndDelegates">
            <summary>
            Create the necessary handlers and delegates to manage this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.OwnExpressionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            report changes to the OWNER expression.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.TypExpressionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            report changes to the TYPE expression.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.SetOWNEXTYPE(Aveva.Core.Database.View.ExpressionType)">
            <summary>
            Change the expression type for the OWNER expression
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.SetTYPEXTYPE(Aveva.Core.Database.View.ExpressionType)">
            <summary>
            Change the expression type for the TYPE expression
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.AskApps(Aveva.Core.Database.View.CreateInformationSet,System.Boolean@,System.Boolean@)">
            <summary>
            Ask subscribing applications for their input into the creation process.
            </summary>
            <param name="infoSet"></param>
            <param name="cancelled"></param>
            <param name="suppress">To suppress user input for the creation of the new element</param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.AskUser(Aveva.Core.Database.View.CreateInformationSet,System.Boolean@)">
            <summary>
            Ask the user for their input into the creation process.
            </summary>
            <param name="infoSet"></param>
            <param name="cancelled"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.#ctor(Aveva.Core.Database.View.CreateRules)">
            <summary>
            Copy constructor, doesn't copy members
            </summary>
            <param name="crerul">the defitem to copy</param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="config">the Xml representation of the Database View Set to construct this instance from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Represents this Database View Set as an XML definition
            </summary>
            <param name="element">The world element to add the definition to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.CloneTYPEExpression">
            <summary>
            Provides a copy of the expression object managed by this definition item.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.CloneOWNERExpression">
            <summary>
            Provides a copy of the expression object managed by this definition item.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.CreateInformationSet(Aveva.Core.Database.View.SourceElement,Aveva.Core.Database.DbElement,System.Boolean)">
            <summary>
            Creates the information set used for element creation
            Nb this will throw an InvalidOperationException if :-
            - AUTCRE is not true for the SourceElement given
            - The Database View has an unset ELEL attribute or the SourceElement has an unset EXPR attribute
            </summary>
            <param name="srcElement">The Source element to get the createInformationSet for</param>
            <param name="contextElement">The database element that provides the create context, i.e the element for the owning SourceElement</param>
            <param name="ignoreRules">If importing the DBView elements , ignore the rules</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.CreateElement(Aveva.Core.Database.View.SourceElement,Aveva.Core.Database.DbElement,System.Boolean)">
            <summary>
            Creates an element for this rules object.
            Nb
            - if for a DbView row then context element should be CE, if a SrcElement then context element should be the element we're navigating away from.
            - this method should be wrapped in a transaction and the transaction aborted if an exception is thrown.
            - throws an ApplicationException if an error occurs during the import process.
            - throws an InvalidOperation exception in the event that element creation is configured to be prohibited.
            </summary>
            <param name="srcElement">The Source Element or dbView that the element is to be created for</param>
            <param name="contextElement">For DbViewElement creation this is CE.  
            <param name="ignoreRules">If importing the DBView elements , ignore the rules</param>
            For Source elements this should be the source element context i.e the element from 
            the srcElement that contains the one being created</param>
            <returns>null if the action is cancelled, InvalidOperation if prohibited, ApplicationException if an error occurs, otherwise the element created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.GetOwnerForNewElement(Aveva.Core.Database.View.SourceElement,Aveva.Core.Database.DbElement,Aveva.Core.Database.View.CreateInformationSet@,System.Boolean@,System.Boolean)">
            <summary>
            Gets the owner for new element to be created.
            This method is used in Model driven new
            </summary>
            <param name="srcElement">The source element.</param>
            <param name="contextElement">The context element.</param>
            <param name="infoSet">The information set.</param>
            <param name="cancelled">if set to <c>true</c> [cancelled].</param>
            <param name="ignoreRules">If importing the DBView elements , ignore the rules</param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.AddCreateRuleDelegate(Aveva.Core.Database.View.CreateRuleDelegate)">
            <summary>
            Allows an application to input into the creation process.
            </summary>
            <param name="crdelegate">A delegate that can contribute to the create process</param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.AddCreateRuleDelegate(Aveva.Core.Database.View.CreateRuleIncSuppressionDelegate)">
            <summary>
            Allows an application to input a creation rule into the creation process.
            </summary>
            <param name="crsuppressdelegate">A delegate that can contribute to the create process that includes flags
            for both cancel and suppression of user input</param>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.RemoveCreateRuleDelegate(Aveva.Core.Database.View.CreateRuleDelegate)">
            <summary>
            Removes a given create rule delegate from the list of delegates
            </summary>
            <param name="crdelegate">A delegate previously subscribed to the create process</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.RemoveCreateRuleDelegate(Aveva.Core.Database.View.CreateRuleIncSuppressionDelegate)">
            <summary>
            Removes a given create rule delegate from the list of delegates
            </summary>
            <param name="crsuppressdelegate">A delegate previously subscribed to the create process that includes flags
            for both cancel and suppression of user input</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.#ctor">
            <summary>
            Default constructor
            Item must be added to a DefinitionSet to be used
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.CreateRules.ToString">
            <summary>
            returns NAME
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateRules.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateRules.DESC">
            <summary>
            The description of this CRERULES element
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateRules.OWNEXPRESSION">
            <summary>
            The expression identifying the owner of any created elements
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateRules.OWNEXTYPE">
            <summary>
            The syntax of the owner expression string
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateRules.TYPEXPRESSION">
            <summary>
            The expression identifying the type of any created elements
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateRules.TYPEXTYPE">
            <summary>
            The syntax of the owner expression string
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateRules.CREANCESTORS">
            <summary>
            Indicates whether the create rules should try to create ancestors for the new element.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateRules.TYPE">
            <summary>
            CRERULES
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateRules.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.CreateRules.IsValid">
            <summary>
            true
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbAttributeValidValue">
            <summary>
            A container class to manage valid values, their display value and description for attributes.
            Once DbLayer is improved to give back the actual values this should use type Converters from the Editors dll for display.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbAttributeValidValue.#ctor(System.Object,System.String,System.String)">
            <summary>
            A container class for the allowed attribute value, it's display representation and it's description
            </summary>
            <param name="value">An allowed value the attribute can take</param>
            <param name="displayValue">The string (display) representation of the allowed value</param>
            <param name="description">A description of the allowed value</param>
        </member>
        <member name="P:Aveva.Core.Database.View.DbAttributeValidValue.Value">
            <summary>
            Holds a valid value for an attribute, this may not be set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbAttributeValidValue.DisplayValue">
            <summary>
            Holds a valid display value for an attribute
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbAttributeValidValue.Description">
            <summary>
            A description explaining the valid value, may be string.Empty
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbView">
             <summary>
             A database view that constructs editable columns from attributes of multiple elements.
            
             Nb this keeps track of DbViewElements that have been created for each row.
            
             Two collections are managed:-
             1. If the BindingList is accessed this is maintained after first access.
             2. if individual items are requested these are maintained to ensure that the same instance is returned each time
             </summary>
             TODO
             - change handlers (pre/post delete) if elements types etc change
             - Add remove method for delegates
        </member>
        <member name="T:Aveva.Core.Database.View.SourceElement">
            <summary>
            Class to wrap the functionality associated with managing attributes and expressions for the DbViewElement
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_DESC">
            <summary>
            The description of this definition
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_EXPR">
            <summary>
            The expression used to select an element in context
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_AUTCRE">
            <summary>
            Flag indicating whether creation of the Source Elements is permitted or not
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_allColumns">
            <summary>
            The columns defined in this source element and all of its source element members
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_memberAddedHandler">
            <summary>
            Handler for when columns are added to member source elements
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_memberRemovedHandler">
            <summary>
            Handler for when columns are removed from member source elements
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_columnAddedHandler">
            <summary>
            handler for when columns are added to member source elements
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_columnRemovedHandler">
            <summary>
            handler for when columns are removed from member source elements
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_exprPropertyChanged">
            <summary>
            Handler for expression change events
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SourceElement.m_valid">
            <summary>
            The last known valid state
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.#ctor(Aveva.Core.Database.View.SourceElement)">
            <summary>
            Copy constructor, doesn't copy members
            </summary>
            <param name="srcElement"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.GetElementWrt(Aveva.Core.Database.DbElement@,System.String@)">
            <summary>
            Assumes the given element is the element returned from GetElement on the owner object
            </summary>
            <param name="ownerElement">The element returned from GetElement on the owner element</param>
            <param name="error">Any error messages associated with operation</param>
            <returns>null or a source element</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.ColumnAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Adds a column to the all columns list when added to the members list or a contained
            SrcElement All list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.ColumnRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            Removes a column from the all columns list when removed from the members list
            or a SrcElement members all columns list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.MemberAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Adds a column to the all columns list when added to the members list or a contained
            SrcElement All list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.MemberRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            Removes the property changed event handler from a member when removed
            from a members list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.ExpressionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            report changes to the expression.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.CreateAndAddHandlers">
            <summary>
            creates the tracking handlers and adds them to the necessary objects
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.CheckIsValid">
            <summary>
            Checks that IsValid is upto date and raises PropertyChanged if changed
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.MembersAreValid">
            <summary>
            Checks whether the members are all valid
            </summary>
            <returns>true if all of the members are valid, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.SetDESC(System.String)">
            <summary>
            Sets the description attribute to the new value, without setting the database value
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.SetAUTCRE(System.Boolean)">
            <summary>
            Sets the AUTCRE attribute to the new value without setting the database value;
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor takes the DbView to create the base sourceElement for
            </summary>
            <param name="config">The configuration to build this from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            represents this definition as an XmlElement and adds it to the given XmlElement
            </summary>
            <param name="ownerElement">The element to append it to</param>
            <returns>The element created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.#ctor">
            <summary>
            Default constructor, instance must be added to a DbView to be used
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.GetElement(Aveva.Core.Database.View.DbViewElement,System.String@)">
            <summary>
            Gets the source element identified by this instance given the Database View root element for a row.
            </summary>
            <param name="dbViewElement">The row element to get the element for</param>
            <param name="error">Any error messages associated with the get operation</param>
            <returns>the source element</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.CreateInformationSet(System.String@)">
            <summary>
            Returns the best approximation of the CreateRules for creating an element for this SourceElement.
            It may be different to the actual create information used due to contextual issues such as type and ownership restrictions.
            </summary>
            <param name="error">An error messages from trying to create the information set.  i.e. if this.AUTCRE is set to false</param>
            <returns>The approximate CreateInformationSet or null</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.CreateElement(Aveva.Core.Database.View.DbViewElement,System.String@)">
            <summary>
            If the element for this SrcElement doesn't exist then it may be created by calling this method.
            Nb this throws an InvalidOperationException if AUTCRE is false or the element already exists
            </summary>
            <param name="viewElement">The row to create the source element for</param>
            <param name="error">If rollback isn't required errors are available using this parameter.</param>
            <returns>null on failure or the element created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.ToString">
            <summary>
            returns the string representation of the expression this source element is based on
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.ColumnElements(Aveva.Core.Database.View.DbViewElement,System.Collections.Generic.List{Aveva.Core.Database.DbElement})">
            <summary>
            Gets the DbElements that are used for attribute and expression columns.
            </summary>
            <param name="viewElement">The row element to get the column elements for</param>
            <param name="elements">A collection to place the elements in</param>
            <returns>The number of elements added to the elements collection</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.DbElementTypes">
            <summary>
            Attempts to calculate the list of possible element types
            for this source element.
            If a context DbViewElement instance is known then call
            DbElementTypes with the DbViewElement as a parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.DbElementTypes(Aveva.Core.Database.View.DbViewElement)">
            <summary>
            Attempts to calculate the list of possible element types
            for this source element.
            Throws an exception if the view element is not for the view this source element
            is defined in .
            </summary>
            <param name="viewElement">The DbViewElement to get the types for</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.DbElementTypes(Aveva.Core.Database.DbElement)">
            <summary>
            Attempts to calculate the list of possible element types
            for this source element.
            If a context DbViewElement instance is known then call
            DbElementTypes with the DbViewElement as a parameter.
            Throws an exception if the view element is not for the view this source element
            is defined in .
            </summary>
            <param name="srcElement">The DbElement that results from this.OwningSourceElement.GetElement(DbViewElement)</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.CompareTo(System.Object)">
            <summary>
            Compares source elements based on their desc attributes
            </summary>
            <param name="obj">the object to compare against</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.ExpressionIsValid">
            <summary>
            Checks whether the Expression is valid, this doesn't mean it'll execute, just that it parsed ok.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.PossibleStatusDefinitions">
            <summary>
            Returns the status definitions that can be applied to the elements referenced by this source element.
            Nb 
            - this may return more status definitions than appropriate if the element type of the 
            containing SourceElement cannot be correctly determined.
            - If the element is known then call PossibleStatusDefinitions with the element type of the element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.PossibleStatusDefinitions(Aveva.Core.Database.DbElementType)">
            <summary>
            Returns the status definitions that can be applied to the elements referenced by this source element.
            Nb 
            - this may return more status definitions than appropriate if the element type of the 
            containing SourceElement cannot be correctly determined.
            - this doesn't check the given element type is relevant to this source element.
            </summary>
            <param name="etype">The element type of an element associated with this source element</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.CommonAttributes">
            <summary>
            Gets the list of attributes that are common to all of the element types for this 
            Source element.
            Nb
            - If DbElementTypes() cannot determine the element types for this source element then an empty list is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.CommonAttributes(System.Collections.Generic.IEnumerable{Aveva.Core.Database.DbElementType})">
            <summary>
            Gets the list of attributes that are common to all of the element types given.
            </summary>
            <param name="etypes"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SourceElement.DistributedAttributes">
            <summary>
            Returns the list of distributed attributes for the dbview
            </summary>
            <returns> List of distributed DbAttributes </returns>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.DbView">
            <summary>
            The database view this source element is defined in.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.DESC">
            <summary>
            The description of this Source element
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.OwningSourceElement">
            <summary>
            The parent source element for this source element.
            Nb null if the parent is the DbView
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.Columns">
            <summary>
            Gets the columns defined by this SourceElement and its members
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.TYPE">
            <summary>
            The element type this definition item represents (DbElementTypeInstance.SRCELEMENT)
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.EXPRESSION">
            <summary>
            The expression string used to identify an element
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.EXPTYPE">
            <summary>
            The syntax of the expression string
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.AUTCRE">
            <summary>
            Flag indicating whether or not elements are permitted to be created for this source element
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.IsValid">
            <summary>
            true if the expression is set and parsable,
            false if there's a problem with the expression
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.IsDistributedAttRef">
            <summary>
            true if this source element represents a navigation from an ENGITEM to one of its associated XPITEMs.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SourceElement.ReferenceAttribute">
            <summary>
            If this source element is a simple navigation of a reference attribute then this returns the attribute.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.DbViewElementColumnName">
            <summary>
            Name of the column sin DataTables containing the row element
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_type">
            <summary>
            Cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_dbViewMemberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_dbViews">
            <summary>
            A collection of all of the assigned unique names
            This is used to detect and avoid all name clashes
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_complexTrackViews">
            <summary>
            A collection of the database views that require complex tracking.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_udetViews">
            <summary>
            mapping of UDET to DbView to manage change to UDETs
            Nb m_elementTypeToViews can't be used as it's only populated when views data is accessed.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_elementTypeToViews">
            <summary>
            A map from element type to DbView to help manage OnCreate and PreDelete with a single event subscription for each
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_preDeleteAncestorElementTypeToViews">
            <summary>
            A map from element type to dbView to help manage PreDeleteAncestor with single event subscription per type.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_attributeToViews">
            <summary>
            A map from DbAttribute to DbView to help manage tracking of view contents that use attribute and expression filters.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_viewToAttributes">
            <summary>
            A map from DbView to DbAttribute to help manage tracking of view contents that use attribute and expression filters.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_preDeleteDelegate">
            <summary>
            The delegate used to handle delete events and update the list of DbViewElements
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_preDeleteAncestorDelegate">
            <summary>
            The delegate used to handle delete events of DbViewElement ancestors
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_postCreateDelegate">
            <summary>
            The delegate used to handle create events
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_postAttributeChangeDelegate">
            <summary>
            The delegate used to track attribute changes that affect database views.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_ACTTYP">
            <summary>
            ACTTYP attribute definition defined as static to stop constant lookups
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.#cctor">
            <summary>
            Static constructor to subscribe to db events.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.UDTracker_UDAPreDelete(Aveva.Core.Database.DbAttribute,Aveva.Core.Database.DbElement)">
            <summary>
            manages UDA DELETE
            </summary>
            <param name="uda">UDA definition</param>
            <param name="definition" />
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.Attribute(System.String)">
            <summary>
            In order to delete UDA coloumn  from the view .
            </summary>
            <param name="udaname" />
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DatabaseService_PostUndo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
            Handle undo events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DatabaseService_PostRedo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
            handle redo event to update the element list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DatabaseService_PostGetWork(System.Object,Aveva.Core.Database.DbGetWorkChangesEventArgs)">
            <summary>
            handle getwork events to update element lists
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.HandlePreRawChanges(Aveva.Core.Database.DbRawChanges)">
            <summary>
            processes a RawChanges after the change and manage the UDA and UDET changes
            </summary>
            <param name="changes"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.HandlePostRawChanges(Aveva.Core.Database.DbRawChanges)">
            <summary>
            processes a RawChanges after the change and manage the UDA and UDET changes
            </summary>
            <param name="changes"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.HierarchyCreated(Aveva.Core.Database.DbElement)">
            <summary>
            handle created hierarchies
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DatabaseService_Changes(System.Object,Aveva.Core.Database.DbChangesEventArgs)">
            <summary>
            For a database change event set re-Evaluate required to true on complex track views
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.UDTracker_UDETCreated(Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbElement)">
            <summary>
            UDET create events can require ELEL attributes to be updated.
            For example where a UDET is deleted and then the action is undone
            </summary>
            <param name="udet"></param>
            <param name="definition"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.UDTracker_UDETChanged(Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbElement)">
            <summary>
            Handle UDET changes so that the element tracking works ok.
            </summary>
            <param name="udet"></param>
            <param name="definition"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.UDTracker_UDETPreDelete(Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbElement)">
            <summary>
            Clear UDETs from DbView state before the UDET is deleted.
            </summary>
            <param name="udet"></param>
            <param name="definition"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.UDTracker_UDETPostDelete(Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbElement)">
            <summary>
            Clear invalid state from the element type management lookups
            </summary>
            <param name="udet"></param>
            <param name="definition"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.AddUdetMapping(Aveva.Core.Database.View.DbView)">
            <summary>
            Keeps track of all the DbViews based on UDETs.
            </summary>
            <param name="dbview"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.RemoveUdetMapping(Aveva.Core.Database.View.DbView)">
            <summary>
            Keeps track of all the DbViews based on UDETs.
            </summary>
            <param name="dbview"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.RemoveInvalidTypes(System.Collections.Generic.Dictionary{Aveva.Core.Database.DbElementType,System.Collections.Generic.List{Aveva.Core.Database.View.DbView}},System.Collections.Generic.List{Aveva.Core.Database.View.DbView})">
            <summary>
            returns a duplicate dictionary that is missing invalid element types
            </summary>
            <param name="list"></param>
            <param name="affectedViews">A list of the views that were in removed entries, this is populated as removed.  Can be null</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.ManageElementTypes(Aveva.Core.Database.View.DbView)">
            <summary>
            Once called the OnCreate Method on the view will be called for each new element of the listed types
            Also the PreDelete Method will be called when deleting an element of the right type.
            </summary>
            <param name="view">The view to manage the element types for</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.UnmanageElementTypes(Aveva.Core.Database.View.DbView)">
            <summary>
            Removes the given view from the managed element types.
            Nb this is called before a change to ELEL
            </summary>
            <param name="view">The View to remove from being managed.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.OnPostAttributeChange(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbAttribute)">
            <summary>
            Manage attribute change on elements that would include/exclude elements from the Database View
            </summary>
            <param name="element"></param>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.ManageAncestors(Aveva.Core.Database.View.DbView)">
            <summary>
            Adds views to the preDelete map
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.RemoveViewFromPreDeleteAncestors(Aveva.Core.Database.View.DbView)">
            <summary>
            In the event that a UDET has been deleted or changed we are unable to track which ancestors the associated views
            are registered for.  This method removes a view from the m_preDeleteAncestor map
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.OnCreateDbViewElement(Aveva.Core.Database.DbElement)">
            <summary>
            Handles element creation events for all views
            </summary>
            <param name="element">The element being created</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.OnPreDeleteDbViewElement(Aveva.Core.Database.DbElement)">
            <summary>
            Handles element deletion events for all views
            </summary>
            <param name="element">The element being deleted</param>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_uniqueName">
            <summary>
            The unique name of the database view, required to manage name clashes and unnamed views.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_xmlName">
            <summary>
            The Xml name for this Database View
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_oldUniqueName">
            <summary>
            When an item is removed from its owner the unique name is cached and removed from name management.
            if the item is reinstated this can then be use in preference to a new one
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_UDNAME">
            <summary>
            The name of the Database View
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_DBVWSTREF">
            <summary>
            The DBVWSTREF attribute value
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_ALWDEL">
            <summary>
            Flag indicating whether deletion of a Source Elements is permitted or not
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_elementTypes">
            <summary>
            The element types permitted in this Database View
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_elementTypeStrings">
            <summary>
            The names of the element types last requested through a public interface
            these may be different to m_elementTypes due to udet delete events
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_dbViewSets">
            <summary>
            The Database View Sets this Database View is part of
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_properties">
            <summary>
            The properties defined on each Database View element in this Database View.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_dbViewValid">
            <summary>
            The last calculated value of IsValid
            reassessed with member/property change
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_dbViewElements">
            <summary>
            The BindingList of items in this Database View.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_element2DbViewElement">
            <summary>
            A map of DbElement to DbViewElements for this database view
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.dbViewFilter">
            <summary>
            This is an ElementType filter combined with the filters from m_sourceElement to provide the IsValidRoot capability
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_elelFilter">
            <summary>
            Filters for element selection (ie. the filter minus the type constraints
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_exclelFilter">
            <summary>
            Filter for EXCLEL attribute to support logical delete.
            Note that this field refers to instance of the ExcludeFromProjectAttributeFilter class
            only if the ExcludeFromProjectAttributeFilter.Valid(this) function return true.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.logicalDelete">
            <summary>
            If true then logical delete is supported.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_relevantdbTypes">
            <summary>
            The list of dbtypes relevant to this dbview
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_reEvaluateRequired">
            <summary>
            flag use to indicate database changes have not been evaluated for a view
            containing pseudo attribute or expression based filters
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_reEvaluateTimer">
            <summary>
            Timer used to initiate a refresh for complex views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_filterChangedHandler">
            <summary>
            Manage changes to filters
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_columnChangedHandler">
            <summary>
            Manage changes to columns
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_elementTypesManaged">
            <summary>
            indicates the ELEL list is being watched for database changes (creates, deletes etc)
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbView.m_columnNamesInitialised">
            <summary>
            indicates whether CheckColumnNames has been called
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.#ctor(Aveva.Core.Database.View.DbView)">
            <summary>
            Creates a copy of the given DbView, doesn't copy members
            See IDefinitionItem.Copy for alternatives.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.BuildProperties">
            <summary>
            Build the property definitions for this Database View
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.RebuildProperties">
            <summary>
            rebuilds the properties after a change for this view.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.GetDbCollection(Aveva.Core.Database.DbType)">
            <summary>
            Gets a DbElementCollection of the elements that match the type filter for this dataset from the current mdb.
            The Interrupt object for the collection is set to the Interrupt property of this DbView.
            </summary>
            <returns>The DbElementCollection or null if no databases exist for the given type</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.GetDbCollectionFor(Aveva.Core.Database.DbElement)">
            <summary>
            The collection of view elements that reside under CE.
            </summary>
            <returns>null if CE isn't set otherwise a collection object</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.GetFilter">
            <summary>
            Calculates the filter to use for checking whether an element is a root element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.CheckIsValid">
            <summary>
            Checks that IsValid is upto date and raises PropertyChanged if changed
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.CheckELELForInvalidTypes">
            <summary>
            Checks that no invalid types are in the ELEL list
            </summary>
            <returns>true if invalid types were removed.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Manage additions to the managed list of elements
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            Manage items removed from the list of elements
            TODO : check this is called for each item when Clear() is used
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.OnCreate_DbViewElement(Aveva.Core.Database.DbElement)">
            <summary>
            manage creation events for root elements
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.IsValidRoot(Aveva.Core.Database.DbElement)">
            <summary>
            Checks whether the given element can be used as the basis for a row in the dataset
            </summary>
            <param name="element">The element to check</param>
            <returns>true if it can, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.IsValidRoot(Aveva.Core.Database.DbElement,System.String@)">
            <summary>
            Checks whether the given element can be used as the basis for a row in the dataset
            </summary>
            <param name="element">The element to check</param>
            <param name="msg">Set when the result is false.  This is the reason the element isn't valid for this DbView</param>
            <returns>true if it can, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.CheckRootElementEventHandlers">
            <summary>
            Check the root element event handlers to ensure they are up to date
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.OnAttributeChangeRoot(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbAttribute)">
            <summary>
            Manage attribute change on elements that would include/exclude elements from the Database View
            </summary>
            <param name="element"></param>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.OnPreDelete_DbViewElement(Aveva.Core.Database.DbElement)">
            <summary>
            Manage delete events for root elements
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.OnPreDeleteAncestor_DbViewElement(Aveva.Core.Database.DbElement)">
            <summary>
            Manage delete events for ancestors of root elements
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.ComplexTracking">
            <summary>
            Indicates the view needs complex tracking instead of relying on 
            attribute change events.
            </summary>
            <returns>true if complex tracking is required, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.RaisePropertyChanged(System.String)">
            <summary>
            overrides raise property changed in order to respond to Filter and IsValid changes
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.ColumnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Track changes to filters so that the list of elements is managed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.AllColumns_ColumnAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Add event handlers to new columns
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.AllColumns_ItemRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            Remove event handlers from removed columns
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.FilterPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Track changes to filters so that the list of elements is managed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.MemberAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Add event handler to new filters
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.MemberRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            Remove event handler from removed filters
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.CreateHandlersAndDelegates">
            <summary>
            Sets up the handlers to maintain the state of this DbView
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.SetELEL(Aveva.Core.Database.DbElementType[])">
            <summary>
            Changes the value of ELEL
            </summary>
            <param name="newElementTypes"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.SetDBVWST(System.Collections.Generic.List{Aveva.Core.Database.View.DbViewSet})">
            <summary>
            Changes the value of DBVWST
            </summary>
            <param name="newDbViewSets"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DefinitionSetValidityChanged">
            <summary>
            Method to update the state of the DbView when the definition set it is in changes from being valid or invalid
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.ManageColumns">
            <summary>
            Track changes to UDAs to manage column state
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.UnmanageColumns">
            <summary>
            Remove UDA tracking to manage column state. This will free up resources
            </summary>      
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.SetUniqueName">
            <summary>
            Sets the unique name of this DbView
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.ClearUniqueName">
            <summary>
            Clears the unique name, called when the view is removed from its owner or
            the definition set is made invalid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.SetRelevantDbTypes">
            <summary>
            Checks the relevant dbtypes and change sit sending a propertychanged event if required.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.GetRelevantDbTypes">
            <summary>
            gets the list of relevant dbtypes for the DbView
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.PopulateDbViewElements">
            <summary>
            Populates m_dbViewElements for the first time with the elements of this database view
            may throw a System.OutOfMemoryException or an Aveva.Core.Shared.InterruptException
            </summary>
            <returns>the populated list</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.CheckElement(Aveva.Core.Database.DbElement)">
            <summary>
            Checks an element to see whether or not its relevant.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.ReEvaluateDbViewElements">
            <summary>
            This is called when the Database Views filters or element types have changed.
            This Clears the managed contents if the view or owning definition set are invalid.
            May throw an Aveva.Core.Shared.InterruptException
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView._DbViewElementsIn(System.Collections.Generic.List{Aveva.Core.Database.DbElement},System.Collections.Generic.List{Aveva.Core.Database.DbElement},System.Collections.Generic.List{Aveva.Core.Database.View.DbViewElement})">
            <summary>
            filters the view elements given a set of element/view element constraints
            </summary>
            <param name="ancestorElements">Ancestors of the root elements, may be null</param>
            <param name="setOfElements">A set of the root elements permitted, may be null </param>
            <param name="volumeElements">A set of elements within a pre-executed volume constraint, may be null</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.BuildELELFilter">
            <summary>
            Builds a compound filter from the filter members
            As a side affect updates the complex tracking status
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.CheckComplexTrackingStatus">
            <summary>
            Updates the list of views that are managed as complex.
            this is views that use expression filters or pseudo attributes.
            NB reEvaluate will always be called when filters are changed so no need to set status
            of m_reEvaluateRequired.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.ReEvaluateTimerTick(System.Object,System.EventArgs)">
            <summary>
            Forces re-evaluation of database view elements after a timed event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="config">The XML that this is to be derived from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Creates an XML representation of this definition and adds it to the given element as a member
            </summary>
            <param name="ownerElement">The element to add it to</param>
            <returns>The element created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, sorts out DBVWSTREF by replacing original values with copied values
            intentionally clears references to items not copied.
            </summary>
            <param name="refLookup">original item -> new item</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.CheckColumnNames">
            <summary>
            Iterates through the columns to perform a self name check
            Called by the columns after any column name has changed.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.SetUDNAME(System.String)">
            <summary>
            Sets the UDNAME value and sorts out all side effects
            internal access required to manage Element types in read only mode
            </summary>
            <param name="newValue">The value to set it to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.SetALWDEL(System.Boolean)">
            <summary>
            Sets the ALWDEL attribute to the new value without setting the database value;
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.TimerBasedRefresh">
            <summary>
            Refreshes the view contents only after a timer event.
            this is to reduce the overhead at the point of request and avoid repeated
            timers events if a lot of requests comeat once.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.HandleUDETCreate">
            <summary>
            Handle UDET creation events.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.HandleUDETChange">
            <summary>
            Handle changes to UDET definitions and clean up the view
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.HandleUDETPreDelete(Aveva.Core.Database.DbElementType)">
            <summary>
            Deal with UDET deletion events by removing invalid element types.
            Nb this doesn't tidy up the m_preDeleteAncestor map for other views till after the delete event.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.HandleUDETPostDelete">
            <summary>
            Handle UDET deletes once the type is invalid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.HandleUDADefinitionChange">
            <summary>
            Handle changes to UDA definitions and clean up the view
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.#ctor">
            <summary>
            Default constructor
            The DbView must be added to the definition item or a dbViewSet
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.Name">
            <summary>
            The unique name of the Database view within DbViewSets.
            If UDNAME is not set or there is a clash with another table then this will have the form Table<i>N</i>
            </summary>
            <returns>The globally unique name of this Database View</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.OwningDbViewSet">
            <summary>
            The Database View Set that owns the definition of this Database View.
            Nb this will be null if the Database View is defined inside a DBVWWLD or DBVWGROUP
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.CreateDbViewElementInTransaction">
            <summary>
            Creates a DbViewElement by creating the relevant Database element in the required view state for this Database View,
            if the create fails a null is returned.
            Error messages are available via DbViewLogger.
            The create is managed inside a transaction which is aborted on failure.
            </summary>
            <returns>An Exception is thrown if create failed or the DbViewElement is returned for the row created.</returns>        
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.CreateDbViewElement(System.Boolean)">
            <summary>
            Creates a DbViewElement by creating the relevant Database element in the required view state for this Database View,
            if the create fails a null is returned.
            Error messages are available via DbViewLogger.
            The create is not managed inside a transaction is an exception is thrown the calling code must abort the transaction in progress.
            </summary>
            <param name="ignoreRules">If importing the DBView elements , ignore the rules</param>
            <returns>An Exception is thrown if create failed or the DbViewElement is returned for the row created.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.GetDbViewElement(Aveva.Core.Database.DbElement)">
            <summary>
            Checks if database element created.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.GetOwnerForNewElement(Aveva.Core.Database.View.SourceElement,Aveva.Core.Database.DbElement,Aveva.Core.Database.View.CreateInformationSet@,System.Boolean@)">
            <summary>
            Gets the owner for new element to be created.
            This method is used in Model driven new
            </summary>
            <param name="srcElement">The source element.</param>
            <param name="contextElement">The context element.</param>
            <param name="infoSet">The information set.</param>
            <param name="cancelled">if set to <c>true</c> [cancelled].</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DeleteDbViewElementInTransaction(Aveva.Core.Database.View.DbViewElement)">
            <summary>
            Deletes the database element(s) for a given Database View element
            throws an ApplicationException on failure
            The delete is carried out in a transaction which is aborted on failure.
            </summary>
            <param name="viewElement">The View element to delete.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DeleteDbViewElement(Aveva.Core.Database.View.DbViewElement)">
            <summary>
            Deletes the DbElements for a given Database View element.
            Nb this algorithm may be improved as the requirements are clarified.
            currently deletes the root element for the row, may delete other elements
            that the view has create responsibility for.
            </summary>
            <param name="viewElement"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.CloneDbViewElement(Aveva.Core.Database.View.DbViewElement)">
            <summary>
            Performs a deep copy where possible on relevant elements
            throws an exception on failure
            This method should be wrapped in a transaction and aborted on failure
            TODO
            </summary>
            <param name="viewElement">The view element to copy</param>
            <returns>The clone</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.CloneDbViewElementInTransaction(Aveva.Core.Database.View.DbViewElement)">
            <summary>
            Performs a deep copy where possible on relevant elements
            Throws an exception on failure
            manages the change inside a transaction that is aborted on failure
            </summary>
            <param name="viewElement">The view element to copy</param>
            <returns>The clone</returns>        
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.UnFilteredDataTable">
            <summary>
            Returns a DataTable populated with the values defined by this Database View definition
            Notes :-
             - this is not tied to the database events so provides a snapshot of the data
             - This is inefficient since all data is loaded into the DataTable when requested.
             - The name of the table is
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.FilteredDataTable(Aveva.Core.Database.DbElement)">
            <summary>
            Returns a DataTable populated with the values defined by this Database View Definition for
            all root elements that are descendants of the given element
            </summary>
            <param name="contextElement">The element to limit the result to</param>
            <returns>a DataTable populated with rows from elements inside the contextElement</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.FilteredDataTable(System.Collections.Generic.IEnumerable{Aveva.Core.Database.DbElement})">
            <summary>
            Returns a DataTable populated with the values defined by this Database View Definition for
            all root elements that are descendants of the given elements
            </summary>
            <param name="contextElements">The elements to limit the result to</param>
            <returns>a DataTable populated with rows from elements inside the contextElement</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.FilteredDataTable(System.Collections.Generic.List{Aveva.Core.Database.DbElement},System.Collections.Generic.List{Aveva.Core.Database.DbElement},Aveva.Core.Database.DbElement,System.Boolean)">
            <summary>
            Filters the view elements into a DataTable
            </summary>
            <param name="ancestorElements">the ancestors of the root elements for each row, may be null</param>
            <param name="setOfElements">the root elements for each row, may be null</param>
            <param name="volumeElement">the volume defining element to search inside, may be null</param>
            <param name="fully">fully (true) or partially (false) within the volume element</param>
            <returns>A populated data table to meet the given constraints</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.FilteredDataTable(System.Collections.Generic.List{Aveva.Core.Database.DbElement},System.Collections.Generic.List{Aveva.Core.Database.DbElement},Aveva.Core.Geometry.LimitsBox,System.Boolean)">
            <summary>
            Filters the view elements into a DataTable
            </summary>
            <param name="ancestorElements">the ancestors of the root elements for each row, may be null</param>
            <param name="setOfElements">the root elements for each row, may be null</param>
            <param name="limitsBox">the volume to search inside, may be null</param>
            <param name="fully">fully (true) or partially (false) within the volume</param>
            <returns>A populated data table to meet the given constraints</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DataTableFor(Aveva.Core.Database.DbElement)">
            <summary>
            Gets a DataTable with a single row populated for the root element given.
            Notes :-
             - if the element given isn't a root element for a row then an empty DataTable is returned
            </summary>
            <param name="element">The element to use as the root element of a single row</param>
            <returns>A DataTable</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DataTableFor(System.Collections.Generic.IEnumerable{Aveva.Core.Database.DbElement})">
            <summary>
            Gets a DataTable with rows populated for the root elements given.
            Notes :-
             - if an element given isn't a root element then a row for the element will not be present
            </summary>
            <param name="elements">The elements to use as the root element of the rows</param>
            <returns>A DataTable</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DataTableFor(Aveva.Core.Database.View.DbViewElement)">
            <summary>
            Gets a DataTable with a single row populated for the root element given.
            throws an InvalidOperationException if the root element is not for this view
            </summary>
            <param name="viewElement">The root element to be included ni the table</param>
            <returns>A DataTable</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DataTableFor(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.DbViewElement})">
            <summary>
            Gets a DataTable with a rows populated for the root elements given.
            Notes :-
            - if the elements given aren't root elements then they will not be added to the returned table
            </summary>
            <param name="viewElements">The elements to use as the root elements of the populated rows</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.EmptyDataTable">
            <summary>
            Returns an empty DataTable with the correct column definition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.AddDataRow(System.Data.DataTable@,Aveva.Core.Database.View.DbViewElement)">
            <summary>
            Adds a row to a DataTable for a given DbViewElement,
            assumes the table matches the output of EmptyDataTable.
            </summary>
            <param name="table">The table to add the row to</param>
            <param name="dsElement">The element to create the row from</param>
            <returns>false if the element is null, otherwise true</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementForWithoutTest(Aveva.Core.Database.DbElement)">
            <summary>
            Permits a Filetered DbView to add/access a view element without re-executing the filter tests.
            The element given must match the views element criteria
            </summary>
            <param name="element">The DbElement to get the row object for</param>
            <returns>null if rootElement isn't a valid root, or the DbViewElement</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementFor(Aveva.Core.Database.DbElement)">
            <summary>
            Gets a DbViewElement instance for the given DbElement or null if the element isn't a root view element
            </summary>
            <param name="element">The DbElement to get the row object for</param>
            <returns>null if rootElement isn't a valid root, or the DbViewElement</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementsFor(System.Collections.Generic.IEnumerable{Aveva.Core.Database.DbElement})">
            <summary>
            Gets the DbViewElement instances for the given DbElements
            </summary>
            <param name="elements">The DbElements to get the row objects for</param>
            <returns>null if rootElement isn't a valid root, or the DbViewElement</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementsBelow(Aveva.Core.Database.DbElement)">
            <summary>
            Returns the DbViewElement instances below the context element.
            </summary>
            <param name="contextElement"> The element to find the descendants of</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementsBelow(System.Collections.Generic.IEnumerable{Aveva.Core.Database.DbElement})">
            <summary>
            Returns the DbViewElement instances below the context element.
            </summary>
            <param name="contextElements"> The element to find the descendants of</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementsInVolume(Aveva.Core.Database.DbElement,System.Boolean)">
            <summary>
            Gets a list of the DbViewElements that are within the volume of a given element
            </summary>
            <param name="volumeElement">The volume definition</param>
            <param name="fully">fully or partially within</param>
            <returns>the list of database view elements</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementsInVolume(Aveva.Core.Geometry.LimitsBox,System.Boolean)">
            <summary>
            Gets a list of the DbViewElements that are within the volume of a given element
            </summary>
            <param name="limitsBox">The volume definition</param>
            <param name="fully">fully or partially within</param>
            <returns>the list of database view elements</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementsIn(System.Collections.Generic.List{Aveva.Core.Database.DbElement},System.Collections.Generic.List{Aveva.Core.Database.DbElement},Aveva.Core.Database.DbElement,System.Boolean)">
            <summary>
            Provides the Database View elements that meet the given criteria
            </summary>
            <param name="ancestorElements">The list of elements that must be ancestors of the row root elements, may be null</param>
            <param name="setOfElements">The set of elements that constrain the row elements, i.e a row can only exist if the root element is in the given set, may be null</param>
            <param name="volumeElement">The volume constraint, may be null</param>
            <param name="fully">only relevant if there is a volume constraint, i.e. fully in volume or partially in volume</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementsIn(System.Collections.Generic.List{Aveva.Core.Database.DbElement},System.Collections.Generic.List{Aveva.Core.Database.DbElement},Aveva.Core.Geometry.LimitsBox,System.Boolean)">
            <summary>
            Provides the Database View elements that meet the given criteria
            </summary>
            <param name="ancestorElements">The list of elements that must be ancestors of the row root elements, may be null</param>
            <param name="setOfElements">The set of elements that constrain the row elements, i.e a row can only exist if the root element is in the given set, may be null</param>
            <param name="limitsBox">The volume constraint, may be null</param>
            <param name="fully">only relevant if there is a volume constraint, i.e. fully in volume or partially in volume</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViewElementsIn(System.Collections.Generic.List{Aveva.Core.Database.DbElement},System.Collections.Generic.List{Aveva.Core.Database.DbElement})">
            <summary>
            Provides the Database View elements that meet the given criteria
            </summary>
            <param name="ancestorElements">The list of elements that must be ancestors of the row root elements, may be null</param>
            <param name="setOfElements">The set of elements that constrain the row elements, i.e a row can only exist if the root element is in the given set, may be null</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.ToString">
            <summary>
            The Name of this Database View in its parent context (i.e. Name(null) )
            Nb this won't be correct for a different context if the name of this view clashes with another
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbElementTypes">
            <summary>
            Returns the list of possible DbElementTypes for root elements of this view
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.ClearErrorInfo">
            <summary>
            Clears the error information on all view elements
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.ClearErrorInfo(System.String)">
            <summary>
            Clears all error information on all database view elements for a particular property
            </summary>
            <param name="columnName">The column name to clear the error information for</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbView.DbViews(Aveva.Core.Database.DbElementType)">
            <summary>
            Returns all database views that are mapped to a given element type.
            </summary>
            <param name="etype"></param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.ELELString">
            <summary>
            Gets the element types as a single string representation
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.DBVWSTString">
            <summary>
            The value of the DBVWSTREF attribute on the definition
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.DBVWSTNames">
            <summary>
            The value of the DBVWSTREF attribute on the definition
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.InterruptRequested">
            <summary>
            Check if an Interrupt has been requested by the calling code
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.ELELExpanded">
            <summary>
            Returns the ELEL with base types expanded to cover all udets
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.DbsSwitched">
            <summary>
            Indicates whether or not any of the databases have been switched to a previous state.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.ELELFilter">
            <summary>
            Gets the compound filter that includes all ATTFILTER and EXPFILTER filters
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.DbViewFilter">
            <summary>
            The complete filter used for DbViewElement selection.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.EXCLELFilter">
            <summary>
            Filter for EXCLEL attribute to support logical delete.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.UDNAME">
            <summary>
            The name of the Database View, as defined by the configuration
            Nb this may not be the name used when in a DbViewSet due to name clashes etc
            the name method should be used instead.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.ALWDEL">
            <summary>
            Flag indicating whether or not the database elements wrapped by a DbViewElement object should be allowed to be deleted in the UI.
            i.e. if this is false the user shouldn't be given the option to delete a row from the view
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.ELEL">
            <summary>
            The database element types at the root of this dataset
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.DBVWST">
            <summary>
            The value of DBVWST for the DbView.  This is the database view sets that the view would like to be included in, excluding the Database
            view set that is the parent of the Database View.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.Properties">
            <summary>
            The public properties available on this object
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.DbViewSets">
            <summary>
            The Database View Sets this Database View is part of including the owning DbViewSet if there is one
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.DbViewElements">
            <summary>
            Returns a binding list of the elements in this Database View.
            Nb the binding list is bound to the definition so as elements are created/deleted they
            are added/removed from this BindingList.
            Nb adding and removing items from this instance will affect other users of this bindinglist.
            </summary>
            <returns>A BindingList of the elements in this Database View</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.IsPopulated">
            <summary>
            Indicates that the view contents have all been accessed and are being mamnaged
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.RelevantDbTypes">
            <summary>
            The Database Types that this Database View is relevant to
            Nb this only reflects the databasetypes of the Root elements for the rows.
            identification of database types within the row element is not supported.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.IsValid">
            <summary>
            Indicates this Database View is suitable for use
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.TYPE">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.EXPRESSION">
            <summary>
            Hide expressions if in a property grid
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.EXPTYPE">
            <summary>
            Hide exptyp if in a property grid
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.XmlLocalName">
            <summary>
            The XML Name for this DatabaseView when used as an element or attribute tag
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.IsDistributedAttRef">
            <summary>
            true if this source element represents a navigation from an ENGITEM to one of its associated XPITEMs.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.ReferenceAttribute">
            <summary>
            If this source element is a simple navigation of a reference attribute then this returns the attribute.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.Interrupt">
            <summary>
            Allows interrupt requests to be serviced.
            The interrupt state is checked when populating or refreshing the database view contents.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.LogicalDelete">
            <summary>
            If true then logical delete is supported.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.ExcludeLogicallyDeleted">
            <summary>
            If true then logically deleted elements are excluded from view
            (excluded from binding list returned by the DbViewElements property)
            as if they were physically deleted.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbView.DataTable">
            <summary>
            Returns a DataTable populated with the values defined by this Database View definition
            Notes :-
             - this is not tied to the database events so provides a snapshot of the data
             - This is inefficient since all data is loaded into the DataTable when requested.
             - The name given to the table is based on the table name within the Owning DbViewSet.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewElement">
            <summary>
            A row element for a DbView.  This is self-describing for easy use with UI components
            </summary>
            TODO : INotifyPropertyChanged
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewElementTypeDescriptor">
            <summary>
            type descriptor
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementTypeDescriptor.Properties">
            <summary>
            The Properties from the base implementation
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElement.m_lastElementAccessed">
            <summary>
            The last element used to access or set an attribute value.
            This is reset every time GetElement is called.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.#ctor(Aveva.Core.Database.DbElement,Aveva.Core.Database.View.DbView)">
            <summary>
            Constructor
            </summary>
            <param name="rootElement">The root element for the row element</param>
            <param name="dbview">The database view this is part</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.ElementForColumn(Aveva.Core.Database.View.IColumn)">
            <summary>
            Provides the element that is used as the basis for the given column
            This is the element identified by the source element that the column is defined in.
            </summary>
            <param name="column">The column to get the element for</param>
            <returns>the element identified or null if no element is selected for this column</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.ElementForColumn(Aveva.Core.Database.View.IColumn,System.String@)">
            <summary>
            Provides the element that is used as the basis for the given column
            This is the element identified by the source element that the column is defined in.
            </summary>
            <param name="column">The column to get the element for</param>
            <param name="error">Any errors reported while evaluating the column element</param>
            <returns>the element identified or null if no element is selected for this column</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.ElementForColumn(Aveva.Core.Database.View.IColumn,System.Boolean,System.String@)">
            <summary>
            Provides the element that is used as the basis for the given column
            This is the element identified by the source element that the column is defined in.
            If create is set to false then null may be returned.
            If create is set to true then null may be returned with a message logged or an exception thrown.
            If an exception is thrown the current transaction must be aborted.
            </summary>
            <param name="column">The column to get the element for</param>
            <param name="create">If set to true then an attempt is made to create the element</param>
            <param name="error">Any errors encountered that don't require rollback</param>
            <returns>The element identified or null if no element is selected for this column</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.CreateSourceElementElement(Aveva.Core.Database.View.SourceElement,Aveva.Core.Database.View.DbViewElement,System.String@)">
            <summary>
            Creates the source element if allowed to.
            - If not allowed to then messages are logged.
            - If an error occurs then exceptions are thrown and the current transaction must be rolled back
            </summary>
            <param name="srcElement">The Source element to create</param>
            <param name="viewElement">The DbViewElement to create it for</param>
            <param name="error">Any errors encountered that don't require rollback</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.SetErrorInfo(System.String,System.String)">
            <summary>
            Sets the error message for a given column
            </summary>
            <param name="columnName">The name of the column (IColumn.ColumnName)</param>
            <param name="value">The message, NB default is string.Empty</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.ClearErrorInfo">
            <summary>
            Clears all error information
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.GetPropertiesForDbElement(Aveva.Core.Database.DbElement)">
            <summary>
            Gets the PropertyDescriptors that base their data on a given element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.GetPropertiesForDbElement(Aveva.Core.Database.View.SourceElement,Aveva.Core.Database.DbElement,System.Collections.Generic.List{System.ComponentModel.PropertyDescriptor})">
            <summary>
            Gets the PropertyDescriptors for a given srcElement that base their data on a given element.
            </summary>
            <param name="element"></param>
            <param name="srcElement"></param>
            <param name="result"></param>
            <returns></returns>		
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.GetDbElementForProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            gets the DbElement that backs the value for a given property
            </summary>
            <param name="pdesc"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.GetDbElementsForAllProperties">
            <summary>
            Gets all elements that property values are derived from.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElement.GetSessionHistory(System.Collections.Generic.List{Aveva.Core.Editors.SessionChange}@,System.Collections.Generic.Dictionary{System.String,Aveva.Core.Editors.ContextConfig})">
            <summary>
            Gets the history of the properties of this object
            </summary>
            <param name="changes">The changes</param>
            <param name="displayConfig"> the configuration to use to convert values for display</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElement.Item(Aveva.Core.Database.View.IColumn)">
            <summary>
            Gets/Sets the value of the indicated column
            Set operations may throw exceptions, Nb if this occurs the current transaction must be aborted.
            </summary>
            <param name="column">The column to get/set the value of</param>
            <returns>the column value</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElement.Item(System.String)">
            <summary>
            Gets/Sets the value of the indicated column
            </summary>
            <param name="columnName">The column to get/set the value of</param>
            <returns>the column value</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElement.RootElement">
            <summary>
            The database element that triggers the existence of this row object
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElement.DbView">
            <summary>
            The Database View responsible for managing this instance
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElement.Properties">
            <summary>
            The properties on this object
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElement.LastElementAccessed">
            <summary>
            The last DbElement accessed wrt to this DbViewElement.
            This will usually be the last element accessed for column get/set operations
            But this will also include the last element return by ElementForColumn.
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.DbViewElement.PropertyChanged">
            <summary>
            Implementation of INotifyPropertyChanges for easy UI development.
            This event is raised every time a property value changes where dblayer supports notification
            essentially this doesn't yet work for expression columns and pseudo attributes.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElement.System#ComponentModel#IDataErrorInfo#Error">
            <summary>
            The error associated with this object, the default is string.Empty
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElement.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <summary>
            Gets the error message for a given column
            </summary>
            <param name="columnName">The name of the column (IColumn.ColumnName)</param>
            <returns>Any message associated with the column</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElement.IsHistorySupported">
            <summary>
            true, history is supported for this element
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewElementPropertyDescriptor">
            <summary>
            Class used to map column attributes into PropertyDescriptor definitions.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.m_colDef">
            <summary>
            The column being described
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.#ctor(Aveva.Core.Database.View.IColumn)">
            <summary>
            Constructor.
            </summary>
            <param name="colDef">   The column to represent.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.#ctor(System.String,Aveva.Core.Database.View.IColumn)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column Name</param>
            <param name="colDef">Column definition</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.CreateAttributes(Aveva.Core.Database.View.IColumn)">
            <summary>
            Create the attributes for the property descriptor
            </summary>
            <param name="colDef">The column to create it from</param>
            <returns>The set of attributes</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the column value for a given DbViewElement.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.GetSessionValue(System.Object)">
            <summary>
            Gets the value for the current db state. while this base implementation does nothing
            different to GetValue this is overriden on SessionComparisonDbViewElementPropertyDescriptor.
            </summary>
            <param name="obj">  .</param>
            <returns>
            The session value.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the column value for a given DbViewElement Notes :-
            - throws exceptions if the value can't be set in the database.
            If an exception is encountered the current transaction must be aborted.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Equivalent to SetAttributeDefault for an attribute.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
             True if the column is not readonly.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this
            property needs to be persisted.
            </summary>
            <param name="obj">The component with the property to be examined for persistence.</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.DbAttributeFor(System.Object)">
            <summary>
            Gets the attribute the property is based on if based on an attribute.
            </summary>
            <param name="instance"> .</param>
            <returns>
            A DbAttribute.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.DbElement(System.Object)">
            <summary>
            Gets the element the property is based on.
            </summary>
            <param name="instance"> .</param>
            <returns>
            A DbElement.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.DbElementTypeFor(System.Object)">
            <summary>
            The element type of the objects the property is got from, this should be null if this isn't a
            single type.
            </summary>
            <param name="instance"> The instance.</param>
            <returns>
            A DbElementType.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.GetConverter(System.Object)">
            <summary>
            Check the views register for TypeConverters, otherwise returns the UIRegistry one.
            </summary>
            <param name="instance"> .</param>
            <returns>
            The converter.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.GetConverter(System.Object,Aveva.Core.Database.DbElement)">
            <summary>
            Check the views register for TypeConverters, otherwise returns the UIRegistry one Used only
            for grid performance.
            </summary>
            <param name="instance"> .</param>
            <param name="element">  The element that matches DbElement(object)</param>
            <returns>
            The converter.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.GetEditor(System.Type)">
            <summary>
            gets an instance.
            </summary>
            <param name="editorBaseType">   .</param>
            <returns>
            The editor.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.GetEditor(System.Type,System.Object)">
            <summary>
            Gets the editor from the Database views registry, otherwise returns the UIRegistry one.
            </summary>
            <param name="editorBaseType">   .</param>
            <param name="instance"> .</param>
            <returns>
            The editor.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.RootElement(System.Object)">
            <summary>
            Gets the root element for a row object given the row instance.
            </summary>
            <param name="instance"> .</param>
            <returns>
            A DbElement.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.GetSessionHistory(System.Object,System.Collections.Generic.List{Aveva.Core.Editors.SessionChange}@,Aveva.Core.Editors.ContextConfig)">
            <summary>
            Gets the session history for this property the key is either the session number (if
            IsFromSingleDb == true), or the datetime for the session in ticks (UTC)
            </summary>
            <param name="instance"> The DbViewElement being used.</param>
            <param name="history">  [in,out].</param>
            <param name="config">   The configuration to use for display value conversion.</param>
            <returns>
            true if ok, otherwise false.
            </returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.IsReadOnly">
            <summary>
            indicates the column is readonly.
            </summary>
            <value>
            true if this Aveva.Core.Database.View.DbViewElementPropertyDescriptor is read only, false if
            not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.ComponentType">
            <summary>
            DbViewElement type.
            </summary>
            <value>
            The type of the component.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.Column">
            <summary>
            The column this descriptor is describing.
            </summary>
            <value>
            The column.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.IsValid">
            <summary>
            Indicates the column is valid for use.
            </summary>
            <value>
            true if this Aveva.Core.Database.View.DbViewElementPropertyDescriptor is valid, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.Dimension">
            <summary>
            Gets the dimension.
            </summary>
            <value>
            The dimension.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.DbAttribute">
            <summary>
            Gets the attribute the property is based on if based on an attribute.
            </summary>
            <value>
            The database attribute.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.DbElementType">
            <summary>
            The element type of the objects the property is got from, this should be null if this isn't a
            single type.
            </summary>
            <value>
            The type of the database element.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.Converter">
            <summary>
            Gets an instance of TypeConverter for this property.
            </summary>
            <value>
            The converter.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.IsHistorySupported">
            <summary>
            indicates that session history functionality is available.
            </summary>
            <value>
            true if this Aveva.Core.Database.View.DbViewElementPropertyDescriptor is history supported,
            false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptor.IsFromSingleDb">
            <summary>
            Checks whether the content of this property is guaranteed to be from a single database.
            </summary>
            <value>
            true if this Aveva.Core.Database.View.DbViewElementPropertyDescriptor is from single database,
            false if not.
            </value>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache">
            <summary>
            Enhances the effectivity of the DbViewElementPropertyDescriptorCache class by using memory cache.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.key">
            <summary>
            Unique identifier for a CacheItem instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.#ctor(Aveva.Core.Database.View.IColumn)">
            <summary>
            Constructor.
            </summary>
            <param name="colDef">The column to represent.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.#ctor(System.String,Aveva.Core.Database.View.IColumn)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column Name</param>
            <param name="colDef">Column definition</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.GetValue(System.Object)">
            <summary>
            Gets the column value for a given DbViewElement
            </summary>
            <param name="obj">The DbViewElement to get the column value for</param>
            <returns>The column value</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.SetValue(System.Object,System.Object)">
            <summary>
            Sets the column value for a given DbViewElement
            Notes :-
            - throws exceptions if the value can't be set in the database.
            If an exception is encountered the current transaction must be aborted.
            </summary>
            <param name="obj">The DbViewElement to set the value of</param>
            <param name="value">The value to set it to.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.GetConverter(System.Object,Aveva.Core.Database.DbElement)">
            <summary>
            Check the views register for TypeConverters, otherwise returns the UIRegistry one
            Used only for grid performance
            </summary>
            <param name="instance"></param>
            <param name="element">The element that matches DbElement(object)</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.GetConverter(System.Object)">
            <summary>
             Check the views register for TypeConverters, otherwise returns the UIRegistry one.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.CacheOn">
            <summary>
            Indicates if cache mechanism is enabled or disabled.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp3">
            <summary>
            The MemoryCache wrapper to have code more readable.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp3.key">
            <summary>
            Unique identifier for a CacheItem instance.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp3.propertyDescriptor">
            <summary>
            First key of the value get or set.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp3.obj">
            <summary>
            Second key of the value get or set.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp3.dictionary1">
            <summary>
            Value of given CacheItem instance.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp3.dictionary2">
            <summary>
            Value under given key in this.dictionary1.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp3.#ctor(System.String,Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Unique identifier for a CacheItem instance.</param>
            <param name="propertyDescriptor">First key of the value get or set.</param>
            <param name="obj">Second key of the value get or set.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp3.TryGetValue(System.Object@)">
            <summary>
            Try to get value from MemoryCache.
            </summary>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise null,</param>
            <returns>true if an element with the specified key exist; otherwise, false.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp3.SetValue(System.Object)">
            <summary>
            Sets value to MemoryCache.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp4">
            <summary>
            The MemoryCache wrapper to have code more readable.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp4.key">
            <summary>
            Unique identifier for a CacheItem instance.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp4.propertyDescriptor">
            <summary>
            First key of the value get or set.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp4.instance">
            <summary>
            Second key of the value get or set.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp4.element">
            <summary>
            Third key of the value get or set.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp4.dictionary1">
            <summary>
            Value of given CacheItem instance.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp4.dictionary2">
            <summary>
            Value under given key in this.dictionary1.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp4.dictionary3">
            <summary>
            Value under given key in this.dictionary2.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp4.#ctor(System.String,Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache,System.Object,Aveva.Core.Database.DbElement)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Unique identifier for a CacheItem instance.</param>
            <param name="propertyDescriptor">First key of the value get or set.</param>
            <param name="instance">Second key of the value get or set.</param>
            <param name="element">Third key of the value get or set.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp4.TryGetValue(System.ComponentModel.TypeConverter@)">
            <summary>
            Try to get value from MemoryCache.
            </summary>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise null,</param>
            <returns>true if an element with the specified key exist; otherwise, false.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementPropertyDescriptorCache.MemoryCacheWrp4.SetValue(System.ComponentModel.TypeConverter)">
            <summary>
            Sets value to MemoryCache.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewGroup">
            <summary>
            Object representation of the DBVWGROUP element for Database Views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewGroup.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewGroup.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewGroup.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewGroup.m_DESC">
            <summary>
            The description for this Database View Group
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewGroup.#ctor(Aveva.Core.Database.View.DbViewGroup)">
            <summary>
            Copy constructor, doesn't copy members
            </summary>
            <param name="group">the group to copy</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewGroup.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="config">the Xml representation of the Database View Set to construct this instance from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewGroup.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Represents this Database View Set as an XML definition
            </summary>
            <param name="wldElement">The world element to add the definition to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewGroup.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewGroup.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewGroup.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewGroup.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewGroup.#ctor">
            <summary>
            Default constructor
            Item must be added to a DefinitionSet to be used
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewGroup.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewGroup.ToString">
            <summary>
            returns NAME
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewGroup.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewGroup.DESC">
            <summary>
            The description of this Database View Group
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewGroup.TYPE">
            <summary>
            DBVWGROUP
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewGroup.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewGroup.IsValid">
            <summary>
            true
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewLogger">
            <summary>
            DbViewLogger class for logging Database View related events This class raises log events that
            can be utilised by the calling application Events are registered with the
            Aveva.Core.Database.Xml.LogManager which outputs all events to file. The log file is located
            in %AVEVA_DESIGN_WORK% in the schematics folder.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewLogger.m_instance">
            <summary>
            singleton instance.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewLogger.m_MessageLogMessages">
            <summary>
            A list of pending messages that are to be output to the message log
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewLogger.m_UpdateMessageLogTimer">
            <summary>
            Timer to update the message log after timer duration has elapsed since the last message 
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewLogger.m_continueTimer">
            <summary>
            Flag to determine if the ellapsed time should continue
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogMessage(System.String)">
            <summary>
            Raises a log event for an information message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogMessage(System.String,System.Boolean)">
            <summary>
            Raises a log event for an information message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogMessage(System.String,System.Object[])">
            <summary>
            Raises a log event for an information message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogMessage(System.String,System.Boolean,System.Object[])">
            <summary>
            Raises a log event for an information message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogMessage(System.String,System.String)">
            <summary>
            Raises a log event for an information message.
            </summary>
            <param name="resourceKey">  The identity of the message within the given resource set.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogMessage(System.String,System.String,System.Boolean)">
            <summary>
            Raises a log event for an information message.
            </summary>
            <param name="resourceKey">  The identity of the message within the given resource set.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogMessage(System.String,System.String,System.Object[])">
            <summary>
            Raises a log event for an information message.
            </summary>
            <param name="resourceKey">  The identity of the message within the given resource set.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogMessage(System.String,System.String,System.Boolean,System.Object[])">
            <summary>
            Raises a log event for an information message.
            </summary>
            <param name="resourceKey">  The identity of the message within the given resource set.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogWarning(System.String)">
            <summary>
            Raises a log event for a warning message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogWarning(System.String,System.Boolean)">
            <summary>
            Raises a log event for a warning message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogWarning(System.String,System.Object[])">
            <summary>
            Raises a log event for a warning message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogWarning(System.String,System.Boolean,System.Object[])">
            <summary>
            Raises a log event for a warning message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogWarning(System.String,System.String)">
            <summary>
            Raises a log event for a warning message.
            </summary>
            <param name="resourceKey">  The identity of the message within the given resource set.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogWarning(System.String,System.String,System.Boolean)">
            <summary>
            Raises a log event for a warning message.
            </summary>
            <param name="resourceKey">  The identity of the message within the given resource set.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogWarning(System.String,System.String,System.Object[])">
            <summary>
            Raises a log event for a warning message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogWarning(System.String,System.String,System.Boolean,System.Object[])">
            <summary>
            Raises a log event for a warning message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogError(System.String)">
            <summary>
            Raises a log event for an error message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogError(System.String,System.Boolean)">
            <summary>
            Raises a log event for an error message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogError(System.String,System.Object[])">
            <summary>
            Raises a log event for an error message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogError(System.String,System.Boolean,System.Object[])">
            <summary>
            Raises a log event for an error message.
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources
                                      file.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogError(System.String,System.String)">
            <summary>
            Raises a log event for an error message.
            </summary>
            <param name="resourceKey">  The identity of the message within the given resource set.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogError(System.String,System.String,System.Boolean)">
            <summary>
            Raises a log event for an error message.
            </summary>
            <param name="resourceKey">  The identity of the message within the given resource set.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogError(System.String,System.String,System.Object[])">
            <summary>
            Raises a log event for an error message.
            </summary>
            <param name="resourceKey">  The identity of the message within the given resource set.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogError(System.String,System.String,System.Boolean,System.Object[])">
            <summary>
            Raises a log event for an error message.
            </summary>
            <param name="resourceKey">  The identity of the message within the given resource set.</param>
            <param name="resourceSet">  The name of the resource set to get the message from.</param>
            <param name="OutputToMessageLog">   True to send this message to the message log.</param>
            <param name="args"> Any arguments required by the resource string.</param>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewLogger.m_timerHandler">
            <summary>
            Event handler for message log timer events
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.#ctor">
            <summary>
            Default constructor, called to create the singleton instance.
            Registers the instance with the log manager from Aveva.Core.Database.Xml.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogResourceString(Aveva.Core.Database.Xml.LOGRECORDTYPE,System.String,System.String,System.Boolean,System.Object[])">
            <summary>
            Logs any type of message to the open destination
            </summary>
            <param name="type">The message type</param>
            <param name="resourceSet">The name of the resource set that contains the message</param>
            <param name="resourceKey">The identity of the resource used for the message</param>
            <param name="OutputToMessageLog">True to send this message to the message log.</param>
            <param name="args">Any message arguments required by the resource</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.LogResourceString(Aveva.Core.Database.Xml.LOGRECORDTYPE,System.String,System.String,System.Boolean)">
            <summary>
            Logs any type of message to the open destination
            </summary>
            <param name="type">the message type</param>
            <param name="resourceSet">The name of the resource set that contains the message</param>
            <param name="resourceKey">The identity of the resource used for the message</param>
            <param name="OutputToMessageLog">True to send this message to the message log.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.UpdateMessageLog_Tick(System.Object,System.EventArgs)">
            <summary>
            Method updates the message log with any pending messages 
            Clears the pending message list on completion
            </summary>
            <returns>True if the message log was update false if there where no messages to update</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewLogger.RaiseEvent(Aveva.Core.Database.Xml.LOGRECORDTYPE,System.String,System.String,System.String,System.Boolean,System.Object[])">
            <summary>
            Writes a message of a given type to the open destination.
            This outputs information frmo the call stack and therefore expects 2 DbVwLogger methods in the call
            stack prior to the call to this method.
            </summary>
            <param name="type">The type of the message being output</param>
            <param name="message">The fully formatted message</param>
            <param name="resourceKey">The resource identity of the message</param>
            <param name="resourceSet">The resource file the message is defined in </param>
            <param name="outputToMessageLog"></param>
            <param name="args">The arguments used in formatting the message</param>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewLogger.Instance">
            <summary>
            Access to the singleton instance. This provides access to the logEvent event only.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="E:Aveva.Core.Database.View.DbViewLogger.LogEvent">
            <summary>
            Raised for every event logged.
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.DbViewLogger.LogErrorEvent">
            <summary>
            A low level alert to be brought to the users attention.
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.DbViewLogger.LogErrorOrWarningEvent">
            <summary>
            A low level alert to be brought to the users attention.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewLogger.LastError">
            <summary>
            The last error reported by the logger.
            </summary>
            <value>
            The last error.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewLogger.LastErrorOrWarning">
            <summary>
            The last error or warning reported by the logger.
            </summary>
            <value>
            The last error or warning.
            </value>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewNavigator">
            <summary>
            XPathNavigator for navigating the contents of a database view as an XML document. If database
            change occur during navigation the navigator may become unstable. The navigator can be used
            for XSL transformations and/or XPath queries.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.#ctor(Aveva.Core.Database.View.DbViewSet,System.String)">
            <summary>
            This creates an XPathNavigator for a given Database View Set.
            </summary>
            <param name="viewSet">  The Database View Set being navigated.</param>
            <param name="schemaLocation">The full pathname of the associated schema file or String.Empty.
                                         Nb the document namespace is added to the pathname given by
                                         this constructor.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.#ctor(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.DbView},System.String)">
            <summary>
            This creates an XPathNavigator that contains several Database Views.
            </summary>
            <param name="views">    An array of views the navigator is to contain.</param>
            <param name="schemaLocation">The full pathname of the associated schema file or String.Empty.
                                         Nb the document namespace is added to the pathname given by
                                         this constructor.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.#ctor(Aveva.Core.Database.View.DbView,System.String)">
            <summary>
            This creates an XPathNavigator for a single view.
            </summary>
            <param name="view"> The view the navigator is to contain.</param>
            <param name="schemaLocation">The full pathname of the associated schema file or String.Empty.
                                         Nb the document namespace is added to the pathname given by
                                         this constructor.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.#ctor(Aveva.Core.Database.View.DbViewNavigator)">
            <summary>
            Constructs a navigator from a given navigator.
            </summary>
            <param name="navigator">    The navigator to use to construct a new one.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.Clone">
            <summary>
            Creates a shallow copy of this navigator.
            </summary>
            <returns>
            A copy of this Aveva.Core.Database.View.DbViewNavigator.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.ArrayValueAsDouble(System.Int32)">
            <summary>
            If the current node is an array of double then this returns the value of the indexed item.
            </summary>
            <param name="index">    .</param>
            <returns>
            A double.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.GetAttribute(System.String,System.String)">
            <summary>
            Gets the string value of the specified attribute.
            </summary>
            <param name="localName">    The local name of the attribute to retrieve the value for.</param>
            <param name="namespaceURI"> The namespace of the attribute to retrieve the value for.</param>
            <returns>
            The string value of the specified attribute.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the named attribute.
            </summary>
            <param name="localName">    The unqualified name of the attribute.</param>
            <param name="namespaceURI"> The Namespace.</param>
            <returns>
            true if the navigator moved to the named attribute, false if not.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute node of the current node.
            </summary>
            <returns>
            true if the navigator moved, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToNextAttribute">
            <summary>
            Moves to the next attribute node of the current parent.
            </summary>
            <returns>
            true if the navigator moved, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.GetNamespace(System.String)">
            <summary>
            Gets the namespace for the first named descendant element.
            </summary>
            <param name="localname"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToNamespace(System.String)">
            <summary>
            Moves the navigator to the first node with the named namespace.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
             Moves the navigator to the first namespace with the given scope.
            </summary>
            <param name="namespaceScope"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the navigator to the next node with the given scope.
            </summary>
            <param name="namespaceScope">   The namespace scope to consider.</param>
            <returns>
            true if the navigator moved, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToNext">
            <summary>
            Moves the navigator onto the next element.
            </summary>
            <returns>
            true if the navigator moved, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToPrevious">
            <summary>
            Moves the navigator to the previous element.
            </summary>
            <returns>
            true if the navigator moved, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToFirst">
            <summary>
            Moves to the first element in the current node context.
            </summary>
            <returns>
            true if the navigator moved, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToFirstChild">
            <summary>
            Moves the navigator to the first child element.
            </summary>
            <returns>
            true if the navigator moved, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToParent">
            <summary>
            Moves to the parent node of the current navigator node.
            </summary>
            <returns>
            true if the navigator moved, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToRoot">
            <summary>
            Moves the navigator to the root node of the document.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Moves the navigator to a position indicated by a given navigator.
            </summary>
            <param name="other">    The navigator that indicates another position.</param>
            <returns>
            true if successful, false if the given navigator doesn't have the same document heritage.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveToId(System.String)">
            <summary>
            Moves the navigator to an item based on its identity Nb even though dbrefs are not valid ids
            and aren't declared as id types this fix works since the processor passes the ids through
            unchecked.
            </summary>
            <param name="id">   The ID attribute of the item to move to.</param>
            <returns>
            true if the navigator moved, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            Checks if this navigator is at the same position as a given navigator.
            </summary>
            <param name="other">    the navigator to check against.</param>
            <returns>
            true if tthey both point at the same position, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.RunXPath(System.String)">
            <summary>
            added to simplify XPath expression usage with namespaces. Throws XPath exceptions from
            XPathNavigator Compile() and Select() members. Assumes the XPath expression uses the default
            namespaces and prefixes specified in Namespaces.
            </summary>
            <param name="xpath">    The XPath Expression to evaluate.</param>
            <returns>
            A Node iterator.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveTo(System.String)">
            <summary>
            Moves the navigator to the database view element denoted by a given NAME attribute according
            to default search rules for duplicates.
            </summary>
            <param name="name">The value of the NAME attribute to move to. including the leading '/'.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveTo(System.String,Aveva.Core.Database.DbType)">
            <summary>
            Moves the navigator to the database view element denoted by a given NAME attribute in a
            database with the specified type.
            </summary>
            <param name="name">The value of the NAME attribute to move to. including the leading '/'.</param>
            <param name="dbType">   The database type.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveTo(System.String,System.String)">
            <summary>
            Moves the navigator to the database view element denoted by a given NAME attribute in a
            database with the specified type.
            </summary>
            <param name="name">The value of the NAME attribute to move to. including the leading '/'.</param>
            <param name="dbTypeName">   The database type.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveTo(System.Int32[])">
            <summary>
            Moves the navigator to the database element denoted by a given dbref.
            </summary>
            <param name="dbref">    the integer components of a dbref.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.MoveTo(Aveva.Core.Database.DbElement@)">
            <summary>
            Moves the navigator to a given database element This doesn't cater for elements in secondary
            hierarchies.
            </summary>
            <param name="element">  [in,out] The element to move to.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.AddToNametable(Aveva.Core.Database.View.DbView)">
            <summary>
            Adds a given view to the nametable
            </summary>
            <param name="view"></param>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewNavigator.m_state">
            <summary>
            container for navigator state.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NodeType">
            <summary>
            The node type being navigated.
            </summary>
            <value>
            The type of the node.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.LocalName">
            <summary>
            The local name of the current node.
            </summary>
            <value>
            The name of the local.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.Name">
            <summary>
            The fully qualified name of the current node.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NamespaceURI">
            <summary>
            The full namespace of the current node.
            </summary>
            <value>
            The namespace URI.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.Prefix">
            <summary>
            The namespace prefix for the current node.
            </summary>
            <value>
            The prefix.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.Value">
            <summary>
            The text value of the current node.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.ValueAsDouble">
            <summary>
            The current node as a double value.
            </summary>
            <value>
            The value as double.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.ValueUnits">
            <summary>
            The units of the current node.
            </summary>
            <value>
            The value units.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.BaseURI">
            <summary>
            String.Empty.
            </summary>
            <value>
            The base URI.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.IsEmptyElement">
            <summary>
            returns !Haschildren.
            </summary>
            <value>
            true if this Aveva.Core.Database.View.DbViewNavigator is empty element, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.XmlLang">
            <summary>
            en.
            </summary>
            <value>
            The XML language.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NameTable">
            <summary>
            The nametable for the current document.
            </summary>
            <value>
            The name table.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.HasAttributes">
            <summary>
            True if the current node has attributes, iotherwise false.
            </summary>
            <value>
            true if this Aveva.Core.Database.View.DbViewNavigator has attributes, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.HasChildren">
            <summary>
            True if the current node has child elements, otherwise false.
            </summary>
            <value>
            true if this Aveva.Core.Database.View.DbViewNavigator has children, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.UnderlyingObject">
            <summary>
            Returns the DbViewElement if on an element node for a Database View row.
            </summary>
            <value>
            The underlying object.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NamespaceManager">
            <summary>
            Provides access to a namespace manager for use with XPathExpressions when using the Select
            and Evaluate methods.
            </summary>
            <value>
            The namespace manager.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.ReferencesAsNames">
            <summary>
            If true then DbElement reference attributes are output as names and not ref values. If an
            item is unamed it is output as per normal database practice e.g. 'SCEQUI 1 of SCGROUP 2 of
            /*'.
            </summary>
            <value>
            true if references as names, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.ResolvableNames">
            <summary>
            If true then unnamed items will be represented as their REF in reference attributes even if
            ReferencesAsNames is true.
            e.g. the output will contain =1234/12345 instead of 'SCEQUI 1 of SCGROUP 2 of /*'.
            </summary>
            <value>
            true if resolvable names, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.OutputDateTimeAsLocal">
            <summary>
            Gets or sets a value indicating whether the output date time as local.
            </summary>
            <value>
            true if output date time as local, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.UnitsOfMeasureDbFormats">
            <summary>
            The format objects to use for units of measure. Nb this interface allows you to specify one
            format per DbDoubleDimension.  If more than one format object is provided for a single
            dimension then the first one is used. TODO : Add support for individual attribute
            configuration and TypeConverters.
            </summary>
            <value>
            The units of measure database formats.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.DbViewElement">
            <summary>
            Gets the DbElement that the navigator currently points to. This is null if the navigator
            points at metadata elements or the document root element.
            </summary>
            <value>
            The database view element.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.Column">
            <summary>
            Accesses the Database View Column this navigator currently points to, or returns null.
            </summary>
            <value>
            The column.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.DbViews">
            <summary>
            Provides the set of DbViews wrapped by this navigator.
            </summary>
            <value>
            The database views.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.RootTagName">
            <summary>
            The name of the Root element of the XML output.
            </summary>
            <value>
            The name of the root tag.
            </value>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewNavigator.NavigatorState">
            <summary>
            This class keeps track of the m_state the navigator is in.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.m_rootTagName">
            <summary>
            The name of the XML root element.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.#ctor(Aveva.Core.Database.View.DbViewSet,System.String)">
            <summary>
            Constructor to set the given elements as the root db elements wrapped by this navigator.
            </summary>
            <param name="viewSet">  The Database View Set to base the navigator on.</param>
            <param name="schemaLocation">   the full pathname of the schema or String.Empty.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.#ctor(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.DbView},System.String)">
            <summary>
            Constructor to set the given Database views as the views wrapped by this navigator.
            </summary>
            <param name="views">    The Database Views to base the navigator on.</param>
            <param name="schemaLocation">   the full pathname of the schema or String.Empty.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.#ctor(Aveva.Core.Database.View.DbViewNavigator.NavigatorState)">
            <summary>
            constructor to create a shallow copy of another state class.
            </summary>
            <param name="NavState"> .</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.ArrayValueAsDouble(System.Int32)">
            <summary>
            Gets the indexed array value back as a double.
            </summary>
            <param name="index">    .</param>
            <returns>
            A double.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.MoveToRoot">
            <summary>
            Moves the navigator to the root node.
            </summary>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.GetAttribute(System.String,System.String)">
            <summary>
            Returns the value of the requested attribute.
            </summary>
            <param name="localName">    the attribute to get the value for.</param>
            <param name="namespaceURI"> the namespace of the attribute to get.</param>
            <returns>
            The value of the attribute requested or string.Empty.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.MoveToFirstAttribute">
            <summary>
            Moves the navigator to the first attribute of the current element.
            </summary>
            <returns>
            true if moved, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves the navigator to the requested attribute of the current element.
            </summary>
            <param name="localName">    the name of the attribute to move to.</param>
            <param name="namespaceURI"> the namespace of the attribute.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.MoveToNextAttribute">
            <summary>
            Moves the navigator to the next attribute only works if operating the attributes of CVE.
            </summary>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.MoveToNext">
            <summary>
            Moves the navigator on one view element.
            </summary>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.MoveToPrevious">
            <summary>
            Moves the navigator back one element.
            </summary>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.MoveToFirst">
            <summary>
            Moves the state to the first DbViewElement being navigated.
            </summary>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.MoveToDocumentNode">
            <summary>
            Moves to the document node.
            </summary>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.MoveTo(Aveva.Core.Database.DbElement@)">
            <summary>
            Moves to the first row element based on the given element in the navigator.
            </summary>
            <param name="element">  [in,out] The element to find a row for.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.ViewsMatch(Aveva.Core.Database.View.DbView[])">
            <summary>
            Checks a DbView array against the views in this navigator.
            </summary>
            <param name="views">    the views to check.</param>
            <returns>
            true if they are the same, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.GetAttributeValueForCVE(Aveva.Core.Database.View.IColumn)">
            <summary>
            Gets the value of a column for Current View Element. Nb CVE must not be null.
            </summary>
            <param name="col">  The column to get the value of.</param>
            <returns>
            the column value converted to a string.
            </returns>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.m_schemaLocation">
            <summary>
            schemaLocation - if this is set then the xsi namespace and schemaLocation attributes are
            present on the root node.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.m_dbFormatsForUnits">
            <summary>
            The format instances used to output values with units.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.DBREF(Aveva.Core.Database.DbElement[])">
            <summary>
            Converts a set of elements into a string representation of a DBREF array
            </summary>
            <param name="elements">The elements to convert</param>
            <returns>a string representation of the refno's given or Nulref</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.GetResolvableNames(Aveva.Core.Database.DbElement[])">
            <summary>
            Converts a set of elements into a string representation of a their NAMES and REFs array
            If elements are named their NAME is output otherwise REF is output
            </summary>
            <param name="elements">The elements to convert</param>
            <returns>a string representation of the elements given or Nulref</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.GetNames(Aveva.Core.Database.DbElement[])">
            <summary>
            Converts a set of elements into a string representation of their NAMES
            </summary>
            <param name="elements">The elements to convert</param>
            <returns>a string representation of the elements given or Nulref</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.GetBoolArray(System.Boolean[])">
            <summary>
            Converts an array of bool to a string representation
            </summary>
            <param name="bools">the array of bool</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.GetIntArray(System.Int32[])">
            <summary>
            Converts an array of int values to a string representation
            </summary>
            <param name="ints">the array of ints</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.GetDoubleArray(System.Double[])">
            <summary>
            Converts an array of int values to a string representation
            </summary>
            <param name="dbls">the array of ints</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.GetDbDoubleArray(Aveva.Core.Database.DbDouble[],Aveva.Core.Database.DbFormat)">
            <summary>
            Converts an array of int values to a string representation
            </summary>
            <param name="dbls">the array of ints</param>
            <param name="format">the format object to use for output, may be null</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.FindColumn(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.IColumn},System.String)">
            <summary>
            Finds a given column in a set of columns
            </summary>
            <param name="columns">The set of columns to find it in.</param>
            <param name="columnName">The Xml name of the column to find</param>
            <returns>-1 if not found or the index of the attribute</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.CVE">
            <summary>
            The current view element of the navigator.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <value>
            The cve.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.Column">
            <summary>
            The Database View Column this navigator currently points to.
            </summary>
            <value>
            The column.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.DbViews">
            <summary>
            The views being navigated.
            </summary>
            <value>
            The database views.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.DbView">
            <summary>
            The current view being navigated.
            </summary>
            <value>
            The database view.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.AtDocumentNode">
            <summary>
            True if on the DbDocument element.
            </summary>
            <value>
            true if at document node, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.AttributeIndex">
            <summary>
            The index of the attribute currently viewed or -1 if navigating a different node type.
            </summary>
            <value>
            The attribute index.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.NamespaceIndex">
            <summary>
            The index of the namespace being navigated or -1.
            </summary>
            <value>
            The namespace index.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.ViewElementIndex">
            <summary>
            The index of the element being navigated with the view elements.
            </summary>
            <value>
            The view element index.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.ViewIndex">
            <summary>
            The index of the view being navigated at the moment.
            </summary>
            <value>
            The view index.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.SchemaLocation">
            <summary>
            The value of the schemaLocation attribute for the DbDocument.
            </summary>
            <value>
            The schema location.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.Node">
            <summary>
            The type of node being navigated.
            </summary>
            <value>
            The node.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.ReferencesAsNames">
            <summary>
            Outputs references attributes using GetAsString(RefAtt);
            </summary>
            <value>
            true if references as names, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.ResolvableNames">
            <summary>
            Outputs references attributes using their NAMES for named elements and REFs for unnamed
            elements.
            </summary>
            <value>
            true if resolvable names, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.OutputDateTimeAsLocal">
            <summary>
            Outputs Date time values in the local time zone.
            </summary>
            <value>
            true if output date time as local, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.UnitsOfMeasureDbFormats">
            <summary>
            Gets or sets the formats for units of measure output.
            </summary>
            <value>
            The units of measure database formats.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.HasSchema">
            <summary>
            Indicates whether we know about a schema file for this DbDocument.
            </summary>
            <value>
            true if this Aveva.Core.Database.View.DbViewNavigator.NavigatorState has schema, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.Value">
            <summary>
            Returns the text value of the current node.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.ValueAsDouble">
            <summary>
            Returns the text value of the current node.
            </summary>
            <value>
            The value as double.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.ValueUnits">
            <summary>
            The units label for the current value, or null;
            </summary>
            <value>
            The value units.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.Name">
            <summary>
            Returns the qualified name of the current node.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.LocalName">
            <summary>
            Returns the unqualified name of the current node.
            </summary>
            <value>
            The name of the local.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.Prefix">
            <summary>
            Returns the namespace prefix of the current node.
            </summary>
            <value>
            The prefix.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.HasChildren">
            <summary>
            Indicates whether the current node has members.
            </summary>
            <value>
            true if this Aveva.Core.Database.View.DbViewNavigator.NavigatorState has children, false if
            not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.HasAttributes">
            <summary>
            Indicates whether the current node has attributes.
            </summary>
            <value>
            true if this Aveva.Core.Database.View.DbViewNavigator.NavigatorState has attributes, false if
            not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewNavigator.NavigatorState.NamespaceURI">
            <summary>
            Returns the namespace for the node.
            </summary>
            <value>
            The namespace URI.
            </value>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewSet">
            <summary>
            The Database View Set definition object
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_dbViewSets">
            <summary>
            A collection of all of the assigned unique names
            This is used to detect and avoid all name clashes
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_definitionSets">
            <summary>
            A collection of all the definition sets used to manage m_dbViewSets.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_defSetPropertyChanged">
            <summary>
            A handler for tracking IsValid on DefinitionSets.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.DefinitionSetPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Ensures if a definition set is removed from the set that its view set names are freed for reuse.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_uniqueName">
            <summary>
            The unique name of the database view set, required to manage name clashes and unnamed view sets.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_oldUniqueName">
            <summary>
            When an item is removed from its owner the unique name is cached and removed from name management.
            if the item is reinstated this can then be use in preference to a new one
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_UDNAME">
            <summary>
            The name of this Database View Set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_DESC">
            <summary>
            The description for this Database View Set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_dbViews">
            <summary>
            The database views that are part of this set, this includes items that aren't members
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_columnRelations">
            <summary>
            The column relations that are part of this set, this include sitems that aren't members
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_relevantdbTypes">
            <summary>
            The list of dbtypes relevant to this dbViewSet
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_columnRelationChangedHandler">
            <summary>
            Handler for when column relationships change
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSet.m_dbViewChangedHandler">
            <summary>
            Handler for when DbView attributes change
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.#ctor(Aveva.Core.Database.View.DbViewSet)">
            <summary>
            Copy constructor doesn't copy members
            </summary>
            <param name="viewSet"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.DbViewPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Manage changes to DbView properties
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.CheckDbView(Aveva.Core.Database.View.DbView)">
            <summary>
            Check whether a database view should be part of this database view set or not, also checks the views column relations
            </summary>
            <param name="dbView"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.ColumnRelationsForView(Aveva.Core.Database.View.DbView)">
            <summary>
            Gets an column relationships that are associated to a given view
            </summary>
            <param name="dbView">The view to check for</param>
            <returns>An enumerable list of Column Relationships</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.ColumnRelationPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Manage changes to column relation properties
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.CheckColumnRelation(Aveva.Core.Database.View.ColumnRelation)">
            <summary>
            
            </summary>
            <param name="colRel"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.AllColumnRelations_ItemRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            If a column relation is removed then remove handlers and relationship from set
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.AllColumnRelations_ItemAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            If a column relation is added then add handlers and relationship if required.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.AddColumnRelation(Aveva.Core.Database.View.ColumnRelation)">
            <summary>
            Adds a column relation to m_columnRelations if relevant to this set
            </summary>
            <param name="colRel"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.AllDbViews_ItemRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            If a DbView is removed then remove handlers and relationship from set
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.AllDbViews_ItemAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Is a DbView is added then add handlers and DbView if required.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.AddDbView(Aveva.Core.Database.View.DbView)">
            <summary>
             adds a DbView to this set if it is related
            </summary>
            <param name="dbView"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.SetUDNAME(System.String)">
            <summary>
            Sets the UDNAME value and sorts out all side effects
            </summary>
            <param name="newValue">The value to set it to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.SetUniqueName">
            <summary>
            Sets the unique name of this DbViewSet
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.ClearUniqueName">
            <summary>
            Clears the unique name, called when the view is removed from its owner or
            the definition set is made invalid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.SetRelevantDbTypes">
            <summary>
            Sets the relevant dbtypes, checking if they have changed, and raises the change event
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.GetRelevantDbTypes">
            <summary>
            gets the list of relevant dbtypes for the DbView
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet._FilteredDataSet(Aveva.Core.Database.DbElement[])">
            <summary>
            Gets a DataSet that is a subset defined by a set of ancestor elements
            </summary>
            <param name="contextElements">Limits the results to be rows based on root elements that are descendants of the context elements</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.AddColumnRelations(System.Data.DataSet)">
            <summary>
            Adds the column relations for this DbViewSet to a given dataset
            </summary>
            <param name="dset"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.RaisePropertyChanged(System.String)">
            <summary>
            overrides raise property changed in order to respond to Filter and IsValid changes
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.MemberAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Check the status of a member that is added to the set.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.MemberRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            Check the status of a member that is removed from the set.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="config">the Xml representation of the Database View Set to construct this instance from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Represents this Database View Set as an XML definition
            </summary>
            <param name="wldElement">The world element to add the definition to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.#ctor">
            <summary>
            Default constructor
            Item must be added to a DefinitionSet to be used
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.Name">
            <summary>
            The name of the Database View Set
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.DataSet">
            <summary>
            Returns this Database View Set as a DataSet instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.FilteredDataSet(Aveva.Core.Database.DbElement)">
            <summary>
            Gets a DataSet that is a subset of this Database View Set.  All row elements are descendants of the given context element.
            </summary>
            <param name="contextElement">Limits the results to be rows based on root elements that are descendants of the context element</param>
            <returns>The populated DataSet</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.FilteredDataSet(Aveva.Core.Database.DbElement[])">
            <summary>
            Gets a DataSet that is a subset defined by a set of ancestor elements
            </summary>
            <param name="contextElements">Limits the results to be rows based on root elements that are descendants of the context elements</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.FilteredDataSet(System.Collections.Generic.List{Aveva.Core.Database.DbElement},System.Collections.Generic.List{Aveva.Core.Database.DbElement},Aveva.Core.Database.DbElement,System.Boolean)">
            <summary>
            A DataSet containing row elements that meet the given criteria
            </summary>
            <param name="ancestorElements">The ancestors of the root elements for each row, may be null</param>
            <param name="setOfElements">The root elements for each row, may be null</param>
            <param name="volumeElement">The volume defining element to search inside, may be null</param>
            <param name="fully">fully (true) or partially (false) within the volume element</param>
            <returns>A populated DataSet to meet the given constraints</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.FilteredDataSet(System.Collections.Generic.List{Aveva.Core.Database.DbElement},System.Collections.Generic.List{Aveva.Core.Database.DbElement},Aveva.Core.Geometry.LimitsBox,System.Boolean)">
            <summary>
            Filters the view elements into a DataTable
            </summary>
            <param name="ancestorElements">The ancestors of the root elements for each row, may be null</param>
            <param name="setOfElements">The root elements for each row, may be null</param>
            <param name="limitsBox">The volume to search inside, may be null</param>
            <param name="fully">fully (true) or partially (false) within the volume</param>
            <returns>A populated DataSet to meet the given constraints</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.EmptyDataSet">
            <summary>
            Gets a DataSet of the full structure without any data contents
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.ToString">
            <summary>
            Provide the name of the Database View Set as the string description
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSet.DbView(System.String)">
            <summary>
            Gets a named Database View definition from the collection
            </summary>
            <param name="name">The name of the Database View to look for, this should match DbView.Name() and not DbView.UDNAME.</param>
            <returns>the DbView asked for otherwise null</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSet.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSet.RelevantDbTypes">
            <summary>
            The database types that this is relevant to
            Nb this only reflects the database types of the Root elements for the rows.
            identification of database types within the row element is not supported.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSet.IsValid">
            <summary>
            Implies this database set is ready for use
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSet.TYPE">
            <summary>
            The database element type this definition represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSet.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSet.DbViews">
            <summary>
            The database views contained by this set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSet.ColumnRelations">
            <summary>
            The valid Column Relations that reference more than one column in this Database View Set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSet.UDNAME">
            <summary>
            The name of the Database View Set, as defined by the configuration
            Nb this may not be the name used when in a DbViewSet due to name clashes etc
            the name method should be used instead.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSet.DESC">
            <summary>
            The description of this Database View Set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSet.AllMembers">
            <summary>
            All column relations and database views related to this database view set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSet.Item(System.String)">
            <summary>
            Gets a named DbView from the collection.
            The name given should match the Name() method of DbView and not UDNAME or NAME
            </summary>
            <param name="name">The name of the DbView to look for.</param>
            <returns>the DbView asked for otherwise null</returns>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewSets">
            <summary>
                Singleton for access to all Database View constructs
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSets.m_instance">
            <summary>
                Singleton instance to help manage change across the application
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSets.m_dbViewSets">
            <summary>
                Collection of all currently defined Database View Sets
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSets.m_visibleDbViewSets">
            <summary>
                Collection of all visible Database View Sets
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSets.m_dbViews">
            <summary>
                Collection of all currently defined Database Views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSets.m_visibleDbViews">
            <summary>
                Collection of all visible Database Views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSets.m_columnRelations">
            <summary>
                Collection of all currently defined ColumnRelation instances
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSets.m_definitionSets">
            <summary>
                The contexts that definitions have come from
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSets.m_visibleDefinitionSets">
            <summary>
                The visible definition sets
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSets.m_newMemberHandler">
            <summary>
                Handler for additions to the members of a Definition Set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewSets.m_removedMemberHandler">
            <summary>
                Handler for members being removed from within a Database View Set
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.#ctor">
            <summary>
                singleton constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.LoadDatabaseViews">
            <summary>
                Load all the view definitions for the session
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.GetSettingsManager">
            <summary>
                Gets the settings manager for project settings access.
                This method is used to initialise the CAF in case of TTY execution
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.DatabaseService_MDBOpened(System.Object,System.EventArgs)">
            <summary>
                load up views if an MDB is opened
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.DatabaseService_MDBClosing(System.Object,System.EventArgs)">
            <summary>
                Close all views when an mdb is closed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.m_definitionSets_ItemRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
                Keeps track of visible definition sets
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.m_definitionSets_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
                Keeps track of visible definition sets
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.m_dbViewSets_ItemRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
                Keeps track of visible view sets
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.m_dbViewSets_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
                Keeps track of visible view sets.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.m_dbViews_ItemRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
                Keeps track of visible database views
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.m_dbViews_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
                Keeps track of visible database views.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.PdmsApplication_BeforeFinished(System.Object,System.EventArgs)">
            <summary>
                Save all definition sets before shutting down.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.SortOutSettingsManager">
            <summary>
                Records the files opened for use in the next session.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.m_defContexts_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
                track the addition/removal of definition sets
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.m_defContexts_ItemRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
                track the addition/removal of definition sets
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.DefSetMemberAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
                track the addition/removal of definition set members
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.DefSetMemberRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
                track the addition/removal of definition set members
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.SaveWorkHandler(Aveva.Core.Database.DbRawChanges,Aveva.Core.Database.DbEvents.operation)">
            <summary>
                Responds to savework events and saves the Definition Sets if not readonly
            </summary>
            <param name="changes"></param>
            <param name="operation"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.Add(Aveva.Core.Database.View.DefinitionSet)">
            <summary>
                Adds a Definition Set to the sets of definition sets.
                Nbs any errors will be displayed in graphics mode.
                only for internal use to manage project and element type sets.
            </summary>
            <param name="defSet"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.DbViewSet(System.String)">
            <summary>
                Gets a first Database View Set from the collection with the given name
            </summary>
            <param name="name">The name of the Database View Set to look for.</param>
            <returns>The Database View Set asked for otherwise null</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.DataSet(System.String)">
            <summary>
                Gets a DataSet that represents the first Database View Set that has a given name
            </summary>
            <param name="dbViewSetName">The name of the Database View Set to access.</param>
            <returns>The dataset or null if the named Database View Set doesn't exist</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.AddDefinitions(System.String,System.String,System.String,System.Boolean,Aveva.Core.Database.View.DefinitionSet@)">
            <summary>
                Adds Database View definitions from an external file
            </summary>
            <param name="applicationName">The name of the appware requesting the addition of Database Views</param>
            <param name="setName">The name of the definition set in the application</param>
            <param name="filepath">The filepath containing the definitions</param>
            <param name="definitionSet">The definition set created as a result of the request, null on failure</param>
            <param name="visible">Show the new definition set to the user?</param>
            <returns>true if ok, false if there were errors</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.CheckDefinitionFileAddition(System.String)">
            <summary>
                Checks a filepath to see if we should add it.
                Nb doesn't validate the file, this is done later
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.AddDefinitions(System.String,System.String,System.Xml.XmlDocument,System.Boolean,Aveva.Core.Database.View.DefinitionSet@)">
            <summary>
                Adds Database View Definitions from an XML document
            </summary>
            <param name="applicationName">The name of the appware requesting the addition</param>
            <param name="setName">The name of the definition set within the application</param>
            <param name="doc">The document containing the definitions</param>
            <param name="definitionSet">The definition set created as a result, null on failure</param>
            <param name="visible">Show the new definitions to the user?</param>
            <returns>true, if the definitions were built ok, false if there were errors</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.AddUserDefinitions(System.String,Aveva.Core.Database.View.DefinitionSet@)">
            <summary>
                Adds Database View definitions from an external file
            </summary>
            <param name="filepath">The filepath containing the definitions</param>
            <param name="definitionSet">The definition set created as a result of the request, null on failure</param>
            <returns>true if ok, false if there were errors</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.RemoveDefinitions(Aveva.Core.Database.View.DefinitionSet)">
            <summary>
                Removes all definitions from a definition set from the Database Views
            </summary>
            <param name="definitionSet">The definitions to remove</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.CreateNewDefinitionSet(System.String,System.String,Aveva.Core.Database.View.DefinitionSource,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Creates a new definition set instance.
                This writes any created definitions to a specified file when the savework operation is called.
                If the file already exists then it can either be overwritten or an error will be reported depending on the value of
                overwriteExistingFile
                If a DefinitionSet exists that has the same filepath then an error is reported
            </summary>
            <param name="applicationName">The application requesting the creation of the definitions</param>
            <param name="setName">The name of the definition set within the application</param>
            <param name="defSrc">APPLICATION or USERFILE, otherwise an error is reported.</param>
            <param name="filename">The file to save the definitions to</param>
            <param name="description">A description for the definitions</param>
            <param name="visible">Indicates the views are visible to the user, must be true for user definitions</param>
            <param name="overwriteExistingFile">If the file exists setting this to true will permit the file to be overwritten</param>
            <returns>The DefinitionSet created or null if an error occurred</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.DbView(System.String)">
            <summary>
                Gets a named DbView
                The name given must match the name method of the DbView and not NAME or UDNAME
            </summary>
            <param name="name"></param>
            <returns>null if not found or the DbView requested</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.DefinitionSet(System.String)">
            <summary>
                Gets a named DefinitionSet
                The name given must match the name method of the DefinitionSet
            </summary>
            <param name="name"></param>
            <returns>null if not found or the DefinitionSet requested</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSets.LogicalDelete(System.Boolean)">
            <summary>
                Enables/disables logical delete.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSets.Instance">
            <summary>
                the singleton instance of the dataset definitions
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSets.AllDbViewSets">
            <summary>
                The list of all Database View Sets defined
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSets.VisibleDbViewSets">
            <summary>
                The list of visible Database View Sets defined
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSets.Item(System.String)">
            <summary>
                Gets a named Database View Set definition from this Database View Set collection
            </summary>
            <param name="dbViewSet">The name of the Database View Set to get</param>
            <returns>The Database View Set asked for otherwise null</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSets.AllDbViews">
            <summary>
                A collection of all of the Database Views defined
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSets.VisibleDbViews">
            <summary>
                A collection of all of the visible Database Views defined
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSets.AllColumnRelations">
            <summary>
                A collection of all of the column relations defined
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSets.DefinitionSets">
            <summary>
                The definitions the DbViewSets have been built from
                Method should not be used, use AllDefinitionSets
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSets.AllDefinitionSets">
            <summary>
                The definitions the DbViewSets have been built from
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewSets.VisibleDefinitionSets">
            <summary>
                The user visible definition sets
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewWorld">
            <summary>
            Object representation for the DBVWWORLD database element for Database Views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewWorld.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewWorld.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewWorld.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewWorld.m_DESC">
            <summary>
            The description for this Database View Group
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewWorld.m_dbViewSets">
            <summary>
            The Database View Sets in this definition set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewWorld.m_dbViews">
            <summary>
            The Database Views in this definition set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewWorld.m_columnRelations">
            <summary>
            The Column Relations in this definition set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewWorld.m_memberAddedHandler">
            <summary>
            Handler for additions to the members of this world or any contained groups
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewWorld.m_memberRemovedHandler">
            <summary>
            Handler for members being removed from this world or any contained groups
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewWorld.m_dbViewSetMemberAddedHandler">
            <summary>
            Handler for additions to the members of a Database View Set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewWorld.m_dbViewSetMemberRemovedHandler">
            <summary>
            Handler for members being removed from within a Database View Set
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.#ctor(Aveva.Core.Database.View.DbViewWorld)">
            <summary>
            Copy Constructor, doesn't copy members
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.CreateHandlers">
            <summary>
            creates the handlers to manage the list properties
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.MemberItemAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Manages additions to the type lists
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.MemberItemRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            Manages removal from the type lists
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.DbViewSetAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            If a member is added to a DbViewSet then this adds it to relevant collection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.DbViewSetRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            If a member is removed from a DbViewSet then this removes it from the relevant collection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.DbViewSetMemberAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            If a member is added to a DbViewSet then this adds it to relevant collection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.DbViewSetMemberRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            If a member is removed from a DbViewSet then this removes it from the relevant collection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="config">the Xml representation of the Database View Set to construct this instance from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Represents this Database View Set as an XML definition
            </summary>
            <param name="wldElement">The world element to add the definition to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.#ctor">
            <summary>
            Default constructor
            Item must be added to a DefinitionSet to be used
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewWorld.ToString">
            <summary>
            return NAME as string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewWorld.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewWorld.DESC">
            <summary>
            The description of this Database View Set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewWorld.DbViewSets">
            <summary>
            The database view sets in this definition set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewWorld.DbViews">
            <summary>
            The database views in this definition set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewWorld.ColumnRelations">
            <summary>
            The column relations in this definition set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewWorld.TYPE">
            <summary>
            DBVWWLD
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewWorld.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewWorld.IsValid">
            <summary>
            true
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DefinitionItemHelper">
            <summary>
            Helper class to be used when a definition item extends another base class so can't use DefinitionItem
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionItemHelper.m_etype">
            <summary>
            The database element type the helper instance is supporting
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionItemHelper.m_intDefItem">
            <summary>
            The wrapper that is using this helper class.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItemHelper.InternalDefinitionItem">
            <summary>
            Returns the object that wraps this helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItemHelper.#ctor(Aveva.Core.Database.DbElementType,Aveva.Core.Database.View.IInternalDefinitionItem)">
            <summary>
            Constructor
            </summary>
            <param name="etype">The element type this is helping to represent</param>
            <param name="internalDefItem">The object that is relying on this helper</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItemHelper.#ctor(System.Xml.XmlElement,Aveva.Core.Database.DbElementType,Aveva.Core.Database.View.IInternalDefinitionItem)">
            <summary>
            Constructor
            </summary>
            <param name="config">The XmlElement this is being built from</param>
            <param name="etype">The element type this is helping to represent</param>
            <param name="internalDefItem">The object that is relying on this helper</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionItemHelper.#ctor(Aveva.Core.Database.View.DefinitionItemHelper,Aveva.Core.Database.View.IInternalDefinitionItem)">
            <summary>
            Clone constructor
            </summary>
            <param name="defItem">The item to clone</param>
            <param name="internalDefItem">the object that is relying on this helper</param>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItemHelper.IsValid">
            <summary>
            throws an InvalidOperationException
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionItemHelper.TYPE">
            <summary>
            The DbElementType that this helper class is supporting
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DefinitionSource">
            <summary>
                Helps track where the Database View concept was defined
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSource.DATABASE">
            <summary>
                Definition is part of the project databases
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSource.USERSETTINGS">
            <summary>
                Definition is part of the users settings for the current project
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSource.USERFILE">
            <summary>
                Definition has been defined by the user in an external file
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSource.APPLICATION">
            <summary>
                Definition has been defined by an application in memory
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSource.ELEMENTTYPES">
            <summary>
                Definition has been derived from the element type definitions in the current mdb
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSource.UNSET">
            <summary>
                Definition set not set, item is not in a definition set
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DefinitionSet">
            <summary>
                Class to keep track of where items are defined.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_mdbSet">
            <summary>
                The project defined definition set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_userSets">
            <summary>
                The user defined definition set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_etypeSet">
            <summary>
                The element type based definition set;
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_typeAtt">
            <summary>
                The type attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_refAtt">
            <summary>
                The ref attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_ownerAtt">
            <summary>
                The owner attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_dbtyAtt">
            <summary>
                The owner attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_acttypeAtt">
            <summary>
                The ACTTYP attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_worldEtype">
            <summary>
                The world element type
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_memberTypes">
            <summary>
                cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_trackingAttributes">
            <summary>
                cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_fileWatchers">
            <summary>
                File watchers for keeping track of file changes
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_watchedFiles">
            <summary>
                The files being watched
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.HandleUDETChanged(Aveva.Core.Database.DbElementType,System.Collections.Generic.List{Aveva.Core.Database.View.DbView})">
            <summary>
                Manages the schema derived views when a UDET is changed.
                this is called after DbView has done its work
            </summary>
            <param name="etype"></param>
            <param name="views"></param>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_readOnly">
            <summary>
                Indicates whether this definition set is readonly
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_visible">
            <summary>
                Indicates whether this definition set is visible to users
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_changed">
            <summary>
                Indicates this definition set has changed since it was first created/loaded/saved.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_appName">
            <summary>
                The application responsible for this definition set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_defsetName">
            <summary>
                The name of this definition set as specified by the constructing app.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_source">
            <summary>
                The source of the definition, for example database, user settings etc
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_fileInfo">
            <summary>
                The FileInfo for the source.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_fileModTime">
            <summary>
                The time associated with the last file load/save
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_saving">
            <summary>
                indicates the definition sset is in the process of being saved
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_doc">
            <summary>
                The XmlDocument the the definition was loaded from
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_DESC">
            <summary>
                Description of the definition set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_dbViewSets">
            <summary>
                The Database View Sets in this definition set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_dbViews">
            <summary>
                The Database Views in this definition set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_columnRelations">
            <summary>
                The Column Relations in this definition set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_dbViewSetAddedHandler">
            <summary>
                Handler for additions to the members of a Database View Set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_dbViewSetRemovedHandler">
            <summary>
                Handler for members being removed from within a Database View Set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_dbViewAddedHandler">
            <summary>
                Handler for additions to the members of a Database View Set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_dbViewRemovedHandler">
            <summary>
                Handler for members being removed from within a Database View Set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_columnRelationAddedHandler">
            <summary>
                Handler for additions to the members of a Database View Set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_columnRelationRemovedHandler">
            <summary>
                Handler for members being removed from within a Database View Set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSet.m_isValid">
            <summary>
                indicates this definition set is valid. i.e. is is part of DbViewSets.Instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.#ctor(Aveva.Core.Database.View.DefinitionSet)">
            <summary>
                Copy constructor that creates a copy of this definition set, doesn't copy members.
            </summary>
            <param name="defSet"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
                Provides an XML representation of the definitions in this definition, WORLD element and below
            </summary>
            <param name="ownerElement">The element to add the definitions to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
                Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
                When a database attribute associated with this object is changed this methods is called.
                The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
                Provides a deep copy of the given item.
                refLookup is populated with a mapping from the original item to the new copy
                refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
                required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.OwnedMembersItemAdded(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
                Manages additions to the type lists
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.OwnedMembersItemRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
                Manages removal from the type lists
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.CreateHandlers">
            <summary>
                Creates the handlers used by this instance and adds them to the relevant collections.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.Build(System.IO.FileInfo)">
            <summary>
                Build the definition set by loading it from file.
                throws exceptions if the set can't be loaded
            </summary>
            <param name="finfo"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.Build(System.Xml.XmlDocument)">
            <summary>
                Build the definition objects from its XML representation
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.AddEtype(Aveva.Core.Database.DbElementType)">
            <summary>
                Adds an element type to m_etypeSet
            </summary>
            <param name="etype"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.AddEtypeForDbType(Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbType)">
            <summary>
                Adds an element type view to the m_etypeset for a given dbtype
            </summary>
            <param name="etype"></param>
            <param name="dbtype"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.ProjectSet_PreGetWork(System.Object,Aveva.Core.Database.DbGetWorkChangesEventArgs)">
            <summary>
                Manages the ProjectViews when a Get Work is initiated, in particular manage deletes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.ProjectSet_PostGetWork(System.Object,Aveva.Core.Database.DbGetWorkChangesEventArgs)">
            <summary>
                Manages the ProjectViews when a GetWork is initiated, in particular manages changes and creates
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.ProjectSet_PreUndo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
                Manage the ProjectViews when an Undo is initiated (deletes)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.ProjectSet_PostUndo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
                Manage the ProjectViews when an Undo is initiated (creates and changes)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.ProjectSet_PreRedo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
                Manage the ProjectViews when a Redo is initiated (deletes)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.ProjectSet_PostRedo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
                Manage the ProjectViews when a Redo is initiated (create/change)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.ProjectSet_HandleRawChanges(Aveva.Core.Database.DbRawChanges,System.Boolean)">
            <summary>
                Processes a RawChanges list to manage the ProjectViews
            </summary>
            <param name="changes"></param>
            <param name="pre">If pre is true the deletes are managed, otherwise creates and changes Nb behaviour subject to P-31963</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.EtypeSet_UDTracker_UDETCreated(Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbElement)">
            <summary>
                Manage Element Type Definition set when UDET's are created
            </summary>
            <param name="udet"></param>
            <param name="definition"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.AddFileWatcher(System.IO.FileInfo)">
            <summary>
                Watch all system files that we have loaded from to track change
            </summary>
            <param name="finfo">The file we have loaded a definition set from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.RemoveFileWatcher(System.IO.FileInfo)">
            <summary>
                Removes a file watcher for a given file.
            </summary>
            <param name="finfo">The file to stop watching</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.WatchedFileChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
                Manage file change
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.PromptReload(System.IO.FileInfo)">
            <summary>
                Asks the user if they wish to reload the definition set
            </summary>
            <param name="finfo">The fileinfo for the set.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.PromptUnload">
            <summary>
                Asks the user if they wish to unload the definition set.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.GetDefinitionSet(System.IO.FileInfo)">
            <summary>
                Gets the definition set that matches a given filepath
            </summary>
            <param name="finfo"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.CheckReferencesAreNamed">
            <summary>
                Checks that all referenced items are named so that they can be resolved when they are reloaded.
                This should only need to be called for project views that may have been edited using the command line
                Notes :-
                - Reports all of the unnamed items and not just the first one
            </summary>
            <returns>true if ok, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.#ctor(System.String,System.String,Aveva.Core.Database.View.DefinitionSource,System.Xml.XmlDocument,System.String,System.Boolean)">
            <summary>
                Constructor
                Notes:-
                If providing a filename to the DbViewSets object then the definitionDocument will be loaded and validated by the
                DbViewSets code.
            </summary>
            <param name="applicationName">
                The application that has added the definition to the set, this is the addin, dll or
                appware responsible
            </param>
            <param name="setName">The name to give the definition set, if left empty then loaded from the definition document</param>
            <param name="source">
                DATABASE, USERSETTINGS, USERFILE (for user included files), APPLICATION (for application included
                files or on the fly definitions), ELEMENTTYPES
            </param>
            <param name="definitionDocument">The XML document the definition is from, null if not yet loaded</param>
            <param name="description">The description of the definition set, if left empty then loaded from the definition document</param>
            <param name="visible">Show the definitions to the user?</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.#ctor(System.String,System.String,Aveva.Core.Database.View.DefinitionSource,System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
                Constructor
                Notes:-
                If providing a filename to the DbViewSets object then the definitionDocument will be loaded and validated by the
                DbViewSets code.
            </summary>
            <param name="applicationName">
                The application that has added the definition to the set, this is the addin, dll or
                appware responsible
            </param>
            <param name="setName">The name to give the definition set, if left empty then loaded form the specified file</param>
            <param name="source">
                DATABASE, USERSETTINGS, USERFILE (for user included files), APPLICATION (for application included
                files or on the fly definitions), ELEMENTTYPES
            </param>
            <param name="finfo">The file to load the definitions from</param>
            <param name="description">The description of the definition set, if left empty then loaded from the specified file</param>
            <param name="visible">true for views to be user visible, false if hidden</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.SetChanged">
            <summary>
                Sets the Changed indicator to true.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.InitState">
            <summary>
                Ensure we set IsValid to true when the definition set is added to DbViewSets.Instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.ClearState">
            <summary>
                Ensure we stop watching files when definition sets are no longer in use.
                This has to be called by DbViewSets.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.MDBClosed">
            <summary>
                Method must only be called by DbViewSets when the definition sets have been unloaded.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.GetProjectSet">
            <summary>
                The definition set for the MDB
                If not accessed before then this creates it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.GetUserSets">
            <summary>
                The definition set for the user settings
                If not accessed before then creates it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.GetElementTypeSet">
            <summary>
                Gets the definition set built from the DbElementTypes
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.Name">
            <summary>
                The name of this definition set or the default value if not named
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.ToString">
            <summary>
                represents this class as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.Save">
            <summary>
                Save the definition set to file.
                Nb not suitable for ElementType and Database defined definition sets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.SaveAs(System.String)">
            <summary>
                Saves the definitions in one set to a file that they didn't come from
            </summary>
            <param name="filename">The filename of the location to save the definitions to</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.MemberTypes">
            <summary>
                The database element types permitted as members of a definition set, this is only DBVWWLD elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.DbView(System.String)">
            <summary>
                Gets a named DbView from this Definition Set
                The name given must match the name method of the DbView and not NAME or UDNAME
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.DbViewSet(System.String)">
            <summary>
                Gets a named DbViewSet from this Definition Set
                The name given must match the name method of the DbViewSet and not NAME or UDNAME
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSet.ToXML">
            <summary>
                Provides an XML representation of the definitions in this definition
            </summary>
            <returns>The created document</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
                The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.UserSettingsDirectories">
            <summary>
                The potential Users settings folders.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.AVEVAUSER">
            <summary>
                the full pathname of the PDMS installation directory that contains the line list schema file.
                for this instance of PDMS.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.PDMSDirectoryName">
            <summary>
                the full pathname of the PDMS installation directory that contains the line list schema file.
                for this instance of PDMS.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.ApplicationName">
            <summary>
                Provides the name of the addin, dll or appware that has added the definition
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.DbViewSets">
            <summary>
                The database view sets in this definition set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.DbViews">
            <summary>
                The Database Views in this definition set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.ColumnRelations">
            <summary>
                The column relations in this definition set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.Changed">
            <summary>
                Indicates this definition set has changed since it was last loaded/saved
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.FileInfo">
            <summary>
                Gets the file information for the file the definition was loaded from
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.DefinitionDocument">
            <summary>
                Gets the XML Document the definition is from
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.DefinitionSource">
            <summary>
                The source of the definition
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.DESC">
            <summary>
                Description of the definition set
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.ReadOnly">
            <summary>
                true if the definitions are not editable
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.Visible">
            <summary>
                true if the definitions are not editable
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.IsValid">
            <summary>
                Always returns true
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.NAME">
            <summary>
                don't permit NAME to be changed if it is user, elementtype or database settings
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.TYPE">
            <summary>
                WORLD
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DefinitionSet.DbElementType">
            <summary>
                The Database Element type this represents
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.SetValueDelegate">
            <summary>
            Delegate for setting the value of database elements when a set is attempted
            on a column defined by an expression
            </summary>
            <param name="dbViewElement">The DbViewElement to set the column value on</param>
            <param name="colDef">The Column to set the value of</param>
            <param name="value">The value to set</param>
        </member>
        <member name="T:Aveva.Core.Database.View.EditRegister">
            <summary>
            A register of the non-default Editors, TypeConvertors and SetValueDelegates used for editing by Database Views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.EditRegister.m_instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.EditRegister.m_uiTypeEditors">
            <summary>
            Registry of UITypeEditors
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.EditRegister.m_typeConverters">
            <summary>
            Registry of TypeConvertors
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.EditRegister.m_setValueDelegates">
            <summary>
            Registry of SetValueDelegates
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.EditRegister.#ctor">
            <summary>
            Constructor hidden for singleton
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.EditRegister.GetUITypeEditor(Aveva.Core.Database.View.IColumn)">
            <summary>
            Gets a registered UITypeEditor for a specific column if one is registered
            </summary>
            <param name="column">The column definition</param>
            <returns>The type of the editor class, derived from UITypeEditor, or null if the default editor is to be used</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.EditRegister.GetTypeConverter(Aveva.Core.Database.View.IColumn)">
            <summary>
            Gets the TypeConvertor for a given column definition
            </summary>
            <param name="column">The column to get the converter for</param>
            <returns>The type of the convertor class, derived from TypeConverter, or null if the default type converter is to be used</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.EditRegister.GetSetValueDelegate(Aveva.Core.Database.View.ExpressionColumn)">
            <summary>
            Gets the SetValueDelegate for a given column definition
            </summary>
            <param name="column">The column to get the converter for</param>
            <returns>The SetValueDelegate, or null if the default behaviour is to be used</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.EditRegister.Set(Aveva.Core.Database.View.IColumn,System.Type,System.Type)">
            <summary>
            Registers a UITypeEditor and TypeConverter for a given database view Column
            Notes :-
            - Throws an exception if a null column is provided.
            - If a null type is provided then any currently registered type will be removed from the registry
            </summary>
            <param name="column">The column to register the UITypeEditor/TypeConvertor for</param>
            <param name="uiTypeEditor">UITypeEditor type</param>
            <param name="typeConverter">TypeConverter Type</param>
        </member>
        <member name="M:Aveva.Core.Database.View.EditRegister.SetUITypeEditor(Aveva.Core.Database.View.IColumn,System.Type)">
            <summary>
            Registers a UITypeEditor for a given database view Column
            Notes :-
            - Throws an exception if the column provided is null
            - If a null type is provided then any currently registered editors will be removed from the registry
            </summary>
            <param name="column">The column to register the editor for</param>
            <param name="uiTypeEditor">UITypeEditor type</param>
        </member>
        <member name="M:Aveva.Core.Database.View.EditRegister.SetTypeConverter(Aveva.Core.Database.View.IColumn,System.Type)">
            <summary>
            Registers a TypeConverter for a given database view Column
            Notes :-
            - Throws an exception if a null column is provided
            - If a null type is provided the any currently registered converters are removed from the registry
            </summary>
            <param name="column">The column to register the converter for</param>
            <param name="typeConverter">TypeConverter Type</param>
        </member>
        <member name="M:Aveva.Core.Database.View.EditRegister.RegisterSetValueDelegate(Aveva.Core.Database.View.ExpressionColumn,Aveva.Core.Database.View.SetValueDelegate)">
            <summary>
            Registers specific SetValueDelegate for expression derived columns that can't normally be edited
            Notes:-
            - Throws an exception is a null column is provided
            - removes a SetValueDelegate from the registry if a null delegate is provided
            </summary>
            <param name="column">The column to set the SetValueDelegate for</param>
            <param name="svdelegate">The set value delegate</param>
        </member>
        <member name="E:Aveva.Core.Database.View.EditRegister.SetValueDelegateChanged">
            <summary>
            Event raised after a set value delegate has been added, changed or removed for a column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.EditRegister.Instance">
            <summary>
            Access to the singleton instance that has the registered delegates, editors and type convertors
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.EditRegisterEventArgs">
            <summary>
            Event arguments class for Edit Register events
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.EditRegisterEventArgs.#ctor(Aveva.Core.Database.View.IColumn)">
            <summary>
            Constructor
            </summary>
            <param name="column">The item removed</param>
        </member>
        <member name="F:Aveva.Core.Database.View.EditRegisterEventArgs.m_column">
            <summary>
            The column the SetValueDelegate has changed for
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.EditRegisterEventArgs.Column">
            <summary>
            The column that the SetValueDelegate has changed for
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.Expression">
            <summary>
            Abstract class representing an expression that can be executed against a DbElement.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.Expression.m_expr">
            <summary>
            The expression in its raw string form
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.Expression.m_attributeType">
            <summary>
            The expected type for the result of the expression
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.#ctor">
            <summary>
            Default constructor, has an empty expression string of type STRING.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.#ctor(System.String,Aveva.Core.Database.View.ColumnResultType)">
            <summary>
            Constructor.
            </summary>
            <param name="expr"> The expression string.</param>
            <param name="dbAttributeType">  The type of value returned by the expression.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.GetError(Aveva.Core.Utilities.Messaging.PdmsMessage)">
            <summary>
            converts a PDMS Message into a message string.
            </summary>
            <param name="msg">  .</param>
            <returns>
            The error.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.CreateExpression(Aveva.Core.Database.View.Expression,Aveva.Core.Database.View.ExpressionType)">
            <summary>
            Changes the type of an expression by constructing a new one with the new type.
            </summary>
            <param name="expr"> The expression to copy.</param>
            <param name="newExpTyp">    The new syntax type.</param>
            <returns>
            The new expression instance.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.CreateExpression(System.Xml.XmlElement,System.String)">
            <summary>
            Constructs the relevant expression from a config element that has EXPTYPE and EXPRESSION
            defined as attributes Notes :-
            - throws an exception if the expression can't be parsed.
            </summary>
            <param name="config">   The XML configuration node.</param>
            <param name="objectName">Used for reporting errors when constructing the expression, this is
                                     the name to report the error for.</param>
            <returns>
            null if no valid expression is defined.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.CreateExpression(System.Xml.XmlElement,Aveva.Core.Database.View.ColumnResultType,System.String)">
            <summary>
            constructs the relevant expression from a config element that has EXPTYPE and EXPRESSION
            defined as attributes Notes :-
            - throws an exception if the expression can't be parsed.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when an Application error condition occurs.</exception>
            <param name="config">   The XML configuration node.</param>
            <param name="valueType">    The type the expression returns.</param>
            <param name="objectName">Used for reporting errors when constructing the expression, this is
                                     the name to report the error for.</param>
            <returns>
            null if no valid expression is defined.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.CreateExpression(System.String,Aveva.Core.Database.View.ExpressionType,Aveva.Core.Database.View.ColumnResultType,System.String)">
            <summary>
            constructs the relevant expression object given the required information Notes :-
            - throws an exception if the expression can't be parsed.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when an Application error condition occurs.</exception>
            <param name="expr"> .</param>
            <param name="exptype">  .</param>
            <param name="valueType">    The type the expression returns.</param>
            <param name="objectName">Used for reporting errors when constructing the expression, this is
                                     the name to report the error for.</param>
            <returns>
            null if no valid expression is defined.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.CreateExpression">
            <summary>
            Creates a new PMLExpression.
            </summary>
            <returns>
            The new expression.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.ParseUTYPE(System.String)">
            <summary>
            Parse utype.
            </summary>
            <param name="utype">    The utype.</param>
            <returns>
            A string.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.ParseUTYPE(Aveva.Core.Database.View.ColumnResultType)">
            <summary>
            Parse utype.
            </summary>
            <param name="attType">  Type of the att.</param>
            <returns>
            A string.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.ParseExpType(System.String)">
            <summary>
            parse the string of an expression type are returns an ExpressionType.
            </summary>
            <param name="expType">  .</param>
            <returns>
            PML if the type is unset or empty, throws an exception if the type isn't recognised.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.Evaluate(Aveva.Core.Database.DbElement,System.Object@,System.String@)">
            <summary>
            Applies the expression to a reference element to return a result
            
            Notes :
            - An Exception may be thrown if the expression doesn't return an object of the expected type.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateDateTime(Aveva.Core.Database.DbElement,System.DateTime@,System.String@)">
            <summary>
            Applies the expression to a reference element to return a DateTime result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateElement(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElement@,System.String@)">
            <summary>
            Applies the expression to a reference element to return an element result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateElementArray(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElement[]@,System.String@)">
            <summary>
            Applies the expression to a reference element to return an array of element results.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The array result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateBoolean(Aveva.Core.Database.DbElement,System.Boolean@,System.String@)">
            <summary>
            Applies the expression to a reference element to return an boolean result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateBooleanArray(Aveva.Core.Database.DbElement,System.Boolean[]@,System.String@)">
            <summary>
            Applies the expression to a reference element to return an boolean result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The array result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateDirection(Aveva.Core.Database.DbElement,Aveva.Core.Geometry.Direction@,System.String@)">
            <summary>
            Applies the expression to a reference element to return a Direction result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateDbDouble(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbDouble@,System.String@)">
            <summary>
            Applies the expression to a reference element to return a double result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateDbDoubleArray(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbDouble[]@,System.String@)">
            <summary>
            Applies the expression to a reference element to return a double result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The array result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateInteger(Aveva.Core.Database.DbElement,System.Int32@,System.String@)">
            <summary>
            Applies the expression to a reference element to return an integer result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateIntegerArray(Aveva.Core.Database.DbElement,System.Int32[]@,System.String@)">
            <summary>
            Applies the expression to a reference element to return an integer result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The array result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateOrientation(Aveva.Core.Database.DbElement,Aveva.Core.Geometry.Orientation@,System.String@)">
            <summary>
            Applies the expression to a reference element to return an Orientation result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluatePosition(Aveva.Core.Database.DbElement,Aveva.Core.Geometry.Position@,System.String@)">
            <summary>
            Applies the expression to a reference element to return a Position result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.EvaluateString(Aveva.Core.Database.DbElement,System.String@,System.String@)">
            <summary>
            Applies the expression to a reference element to return a string result.
            </summary>
            <param name="refElement">   The element to apply the expression to.</param>
            <param name="exprResult">   [out] The result of evaluating the expression.</param>
            <param name="error">    [out] Any associated error message.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.Clone">
            <summary>
            Creates a clone of the expression object.
            </summary>
            <returns>
            A copy of this Aveva.Core.Database.View.Expression.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.ParseTargetDbElementTypes(Aveva.Core.Database.DbElementType[])">
            <summary>
            If this expression results in a element then this method can be called to try to determine
            the range of elements types that the expression may return. Nb if the element types can't be
            determined then an empty collection will be returned.
            </summary>
            <param name="srcTypes">The possible source types of the element that the expression may be
                                   executed against.</param>
            <returns>
            The DbElementTypes that the result may be.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for the relevant property.
            </summary>
            <param name="name"> The name of the property that has changed.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.Expression.ToString">
            <summary>
            provides the expression string for the expression.
            </summary>
            <returns>
            A string that represents this Aveva.Core.Database.View.Expression.
            </returns>
        </member>
        <member name="P:Aveva.Core.Database.View.Expression.EXPRESSION">
            <summary>
            The string representation of this expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.Expression.EXPTYPE">
            <summary>
            The type of expression syntax.
            </summary>
            <value>
            The exptype.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.Expression.UTYPE">
            <summary>
            The type returned from executing the expression.
            </summary>
            <value>
            The utype.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.Expression.IsValid">
            <summary>
            Indicates this Expression is valid and ready to use.
            </summary>
            <value>
            true if this Aveva.Core.Database.View.Expression is valid, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.Expression.DbAttribute">
            <summary>
            If the expression is just an attribute then this property returns the attribute.  Nb this
            returns null for array access at this stage.
            </summary>
            <value>
            The database attribute.
            </value>
        </member>
        <member name="P:Aveva.Core.Database.View.Expression.Dimension">
            <summary>
            The Dimension if known or derivable.
            </summary>
            <value>
            The dimension.
            </value>
        </member>
        <member name="E:Aveva.Core.Database.View.Expression.PropertyChanged">
            <summary>
            Raised whenever Expression, UTYP or IsValid are Changed.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.ExpressionColumn">
            <summary>
            Expression based column definition
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionColumn.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionColumn.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionColumn.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionColumn.m_uniqueName">
            <summary>
            The unique name for this column
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionColumn.m_xmlName">
            <summary>
            The xml encoded name for this column
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionColumn.m_UDNAME">
            <summary>
            The user requested name for this column
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionColumn.m_DESC">
            <summary>
            The description of the column
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionColumn.m_EXPR">
            <summary>
            The expression to obtain the column value
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionColumn.m_READONLY">
            <summary>
            indicates whether the column value can be set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionColumn.m_exprPropertyChanged">
            <summary>
            Handler for tracking expression change events
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.#ctor(Aveva.Core.Database.View.ExpressionColumn)">
            <summary>
            Creates a copy of the given expression column, doesn't copy members.
            </summary>
            <param name="expCol"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.CreateHandlersAndDelegates">
            <summary>
            create the necessary handlers and delegates to manage this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.RaiseTypeConverterChanged">
            <summary>
            Raise Type Converter changes
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.RaiseUITypeEditorChanged">
            <summary>
            Raise type editor changes
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.SetValueDelegateChanged">
            <summary>
            Raise changes to the READONLY property
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.ExpressionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Report changes to the expression.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.SrcElementPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Report changes to the SrcElement if they affect the column properties.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.SetEXPRESSION(System.String)">
            <summary>
            Sets the EXPRESSION and sorts out related state
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.SetEXPTYPE(Aveva.Core.Database.View.ExpressionType)">
            <summary>
            Change the expression type
            </summary>
            <param name="value">The type to change the expression to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.SetUDNAME(System.String)">
            <summary>
            Sets the UDNAME of the column
            </summary>
            <param name="newValue">the value to set it to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="config">The XML configuration node for a COLEXPR element</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Creates an XML representation of this definition
            </summary>
            <param name="ownerElement">The element to add it to</param>
            <returns>The element created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.RaiseDbViewChanged">
            <summary>
            Raised the property changed event for the DbView property.
            Nb this is called by the DbView and not managed by the column
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.ColumnRelations">
            <summary>
            The column relations that refer to this column
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.SourceElement">
            <summary>
            The source element this column is defined in
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.DbView">
            <summary>
            The database view this column is defined in
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.GetValue(Aveva.Core.Database.View.DbViewElement)">
            <summary>
            Gets the value for this column given a row instance
            </summary>
            <param name="dbViewElement">The row object</param>
            <returns>DBNull if the column hasn't got a supporting element, or the value for the column</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.SetValue(Aveva.Core.Database.View.DbViewElement,System.Object)">
            <summary>
            Sets the value of the column expression
            </summary>
            <param name="dbViewElement">the row instance to set the column value for</param>
            <param name="value">The value to set the column to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.DbViewSets">
            <summary>
            The database view sets this column is part of
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionColumn.ToString">
            <summary>
            The column name property value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.Aveva#Core#Database#View#IInternalNamedItem#UniqueName">
            <summary>
            Sets the unique name for the column, Nb should only be called by DbView since no checking is performed.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.UITypeEditor">
            <summary>
            Type editor if a specific editor is required.
            This is set using the EditRegister instance
            Nb this returns null if standard editors are to be used.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.TypeConverter">
            <summary>
            Type converter if a specific converter is required.
            This is set using the EditRegister instance
            Nb this returns null if standard converters are to be used.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.UDNAME">
            <summary>
            The full name for the column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.DESC">
            <summary>
            The column description
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.EXPRESSION">
            <summary>
            The expression used to derive the column value.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.EXPTYPE">
            <summary>
            The syntax of the expression string
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.UTYPE">
            <summary>
            The type of the column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.Dimension">
            <summary>
            The dimension of the column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.ColumnType">
            <summary>
            The type of the column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.IsArray">
            <summary>
            IsArray from the column definition
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.READONLY">
            <summary>
            Indicates that a SetValueDelegate exists for this column
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.IsValid">
            <summary>
            True if this column has a valid expression and is named
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.TYPE">
            <summary>
            The type this column definition wraps
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.ColumnName">
            <summary>
            The system name for this column, this is unique within the owning DbView
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionColumn.XmlLocalName">
            <summary>
            The xml name for this column when used as an element or attribute
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.ExpressionFilter">
            <summary>
            Class used to filter elements using a PML or XPath Expression
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.IExpressionFilter">
            <summary>
            Class to help with the generic AttributeFilter component.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IExpressionFilter.EXPRESSION">
            <summary>
            The expression for the filter
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.IExpressionFilter.EXPTYPE">
            <summary>
            The operator for the filter
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionFilter.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionFilter.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionFilter.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionFilter.m_defItem">
            <summary>
            elper for common methods
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionFilter.m_expr">
            <summary>
            The Expression used to filter elements
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionFilter.m_exprPropertyChanged">
            <summary>
            Handler to track when the expression changes
            events must be passed on since properties are wrapped.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.#ctor(Aveva.Core.Database.View.ExpressionFilter,System.Boolean)">
            <summary>
            Used to clone this expression filter
            </summary>
            <param name="filter">The filter to copy</param>
            <param name="clone">true to shallow copy, false for a deep copy</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.m_expr_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises events from the EXPR item
            </summary>
            <param name="sender">m_EXPR</param>
            <param name="e">The information about the property changed</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.m_defItem_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises events from the definition item
            </summary>
            <param name="sender">m_defItem</param>
            <param name="e">Information abou the property changed</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for the relevant property
            </summary>
            <param name="name">The name of the property that has changed</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor taking an XML representation of this filter.
            This is a DbDocument node representing an EXPFILTER database element
            An exception is thrown if the element TAG or attributes are not as expected.
            </summary>
            <param name="config">The XmlElement representing the filter definition</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Represents this definition as an XmlElement and adds it to the given XmlElement
            </summary>
            <param name="ownerElement">The element to append it to</param>
            <returns>The element created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets all the db attributes to match this definition instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Aveva#Core#Database#View#IInternalDefinitionItem#GetDefinitionItem">
            <summary>
            Gets the DefinitionItem instance from the implementing class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this methods is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.CloneExpression">
            <summary>
            Provides a copy of the expression object managed by this definition item.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.ScanBelow(Aveva.Core.Database.DbElement)">
            <summary>
            Indicates whether in walking a tree the filter needs to scan member elements
            </summary>
            <param name="element">The current element being assessed</param>
            <returns>true if the filter should scan descendants of element</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Valid(Aveva.Core.Database.DbElement)">
            <summary>
            Indicates whether or not a given element returns a true result for the expression in this filter
            </summary>
            <param name="element">The current element being assessed</param>
            <returns>The result of EvaluateBoolean on the wrapped expression.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Clone">
            <summary>
            Creates a clone of this ExpressionFilter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Add(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            Adds the given item to the owned members,
            throws an InvalidOperationException if item is not permitted as a member
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Insert(System.Int32,Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            Inserts a given item at a given index
            </summary>
            <param name="index">The position to insert the item at</param>
            <param name="item">The item to insert</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Remove(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            Removes the given item from the owned members
            </summary>
            <param name="item">the item to remove from the members of this definition item</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.RemoveAt(System.Int32)">
            <summary>
            Removes the given item from the given index
            </summary>
            <param name="index">The index of the member to remove</param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.IndexOf(Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            The index of the given item in the owned members
            </summary>
            <param name="item">The item to search for in this definition items members</param>
            <returns>-1 if not found, or the index of the given item in members</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Create(System.Int32,Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the given type at the given index.
            Notes :-
            - throws an IndexOutOfBoundsException if index &gt; Count
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="index">The position to create the new item at</param>
            <param name="etype">The type of item to create</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.CreateAfter(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type after this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type">The type to create</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.CreateBefore(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type before this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type">The type of item to create</param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.CreateFirst(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type as the first member of this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type"></param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.CreateLast(Aveva.Core.Database.DbElementType)">
            <summary>
            Creates a new item of the specified type as the last member of this item
            Notes :-
            - may throw a PDMSException if the definitions are database based
            - throws an InvalidOperationException if the type is not supported as a member or DefinitionSet is read only
            </summary>
            <param name="type"></param>
            <returns>The item created</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Delete">
            <summary>
            Deletes this item, if allowed.
            throws an exception if delete is not allowed, or a database error occurs
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.ToString">
            <summary>
            Provides EXPRESSION to represent this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.Copy">
            <summary>
            Creates a deep copy of this DefinitionItem,
            See IDefinitionItem for notes on copy behaviour
            </summary>
            <returns>The copy of this definition item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.ExpressionFilter.OwnedMembersOfType(Aveva.Core.Database.DbElementType)">
            <summary>
            Returns OwnedMembers of IDefinitionItem for a certain DbElementType.
            </summary>
            <param name="elementType">The type of elements to return.</param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.NAME">
            <summary>
            The NAME attribute of the definition
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.REF">
            <summary>
            The REF of the filter in the dictionary database
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.EXPRESSION">
            <summary>
            The expression used as a filter
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.EXPTYPE">
            <summary>
            The expression syntax used by expr either PML for PML1 expressions or XPath
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.TYPE">
            <summary>
            The DbElementType this represents (EXPFILTER)
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.Owner">
            <summary>
            The SourceElement that contains this filter
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.AllMembers">
            <summary>
            All owned members, an empty list
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.OwnedMembers">
            <summary>
            All members, an empty list
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.IsValid">
            <summary>
            Indicates this filter is ok for use
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.ReadOnlyDefinition">
            <summary>
            Indicates whether the definition can be changed
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.Visible">
            <summary>
            The definition is not editable
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.OwningDefinitionSet">
            <summary>
            The definition set this is defined in
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.Count">
            <summary>
            The number of owned members, in this case 0.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.Item(System.Int32)">
            <summary>
            The owned member at the given index,
            IndexOutOfBoundsException will be thrown if index &gt;= count or index &lt; 0
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="E:Aveva.Core.Database.View.ExpressionFilter.PropertyChanged">
            <summary>
            Raised whenever a public property is Changed
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ExpressionFilter.DefinitionElement">
            <summary>
            The DbElement bound to this definition item
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.ExpressionType">
            <summary>
            Defines whether an expression uses the PML1 or XPath 1.0 syntax
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionType.PML">
            <summary>
            A PML1 expression
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.ExpressionType.XPATH">
            <summary>
            An XPath 1.0 expression
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.ExtBindingList`1">
            <summary>
            Extension of BindingList that provides an item removed event
            </summary>
            <typeparam name="T">The type the list contains</typeparam>
        </member>
        <member name="M:Aveva.Core.Database.View.ExtBindingList`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ExtBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Copies a given list into this new list
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExtBindingList`1.RaiseItemRemoved(Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            raises the ItemRemoved event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.ExtBindingList`1.RemoveItem(System.Int32)">
            <summary>
            override RemoveItem to raise the event
            </summary>
            <param name="index"></param>
        </member>
        <member name="E:Aveva.Core.Database.View.ExtBindingList`1.ItemRemoved">
            <summary>
            Event raised after an item has been removed from the list
            This provides the removed item to the subscribers
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.FilteredDbView">
            <summary>
            Class to help filter database view contents.
            Notes :-
            - The filtered result is not dynamic so the results need to be refreshed.
            - The filtered results can track additions/removals from the underlying database view but the local filters are not re-assessed
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_dbView">
            <summary>
            The database view being filtered
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_definitionSet">
            <summary>
            The definition set that owns the filtered DbView.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_sourceElement">
            <summary>
            The Source Element to use as the basis for the filtering
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_filter">
            <summary>
            The filter to apply to SourceElement
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_listFilter">
            <summary>
            List filter to apply to SourceElement.
            This is additional to m_filter for performance reasons
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_belowFilter">
            <summary>
            Below filter to apply to the view
            This is additional to m_filter for performance reasons
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_belowOrAtFilter">
            <summary>
            Filters used to cater for secondary expansion of BelowFilter
            - DEPRECATED DO NOT USE
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_trackBaseView">
            <summary>
            Indicates whether the resulting list should track underlying database view changes.
            Nb once an item is in the set the local filters are not reassessed
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_dbViewElements">
            <summary>
            The list of filtered DbViewElements, null until first access.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_dbViewChangedHandler">
            <summary>
            Tracks property changes on m_dbView
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_definitionSetChangedHandler">
            <summary>
            Tracks property changes on m_definitionSet
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_listChangedHandler">
            <summary>
            Tracks base view changes
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.FilteredDbView.m_itemRemovedHandler">
            <summary>
            Tracks base view changes
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.AddTrackHandlers">
            <summary>
            Adds handlers for tracking DbViewElement changes, only adds them if TrackDbViewContents is true
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.RemoveTrackHandlers">
            <summary>
            Remove handlers for tracking DbViewElement changes
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.RaisePropertyChanged(System.String)">
            <summary>
            Raises the given PropertyChanged event
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.m_definitionSet_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Checks the definition set is still valid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.m_dbView_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Checks if the database views definition set changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.DbViewElements_ItemRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            Checks what to do when an item is removed from the database view
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.DbViewElements_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Checks what to do when an item is added to the database view
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.AddViewElement(Aveva.Core.Database.View.DbViewElement,System.Boolean,System.Boolean)">
            <summary>
            Adds an item to the list of items managed by this filtered view.
            this applies the local filter
            </summary>
            <param name="vElement">The DbViewElement to add to the filtered set</param>
            <param name="useListFilter">set to true if the list filer is to be tested as well as Filter</param>
            <param name="useBelowFilter">set to true if the below filer is to be tested as well as Filter</param>
            <returns>true if added, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.#ctor(Aveva.Core.Database.View.DbView,Aveva.Core.Database.Filters.BaseFilter)">
            <summary>
            Constructor
            </summary>
            <param name="view">The database view to apply a filter to</param>
            <param name="filter">The additional filter to use to filter the database view contents </param>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.#ctor(Aveva.Core.Database.View.DbView,Aveva.Core.Database.Filters.BaseFilter,Aveva.Core.Database.Filters.DbElementListFilter)">
            <summary>
            Constructor
            </summary>
            <param name="view">The view to filter</param>
            <param name="filter">The base filters to apply</param>
            <param name="listFilter">The list of elements to form the basis of the view (i.e. in set queries)</param>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.#ctor(Aveva.Core.Database.View.DbView,Aveva.Core.Database.Filters.BaseFilter,Aveva.Core.Database.Filters.DbElementListFilter,Aveva.Core.Database.Filters.DbElementListFilter)">
            <summary>
            Constructor
            </summary>
            <param name="view">The view to filter</param>
            <param name="filter">The base filters to apply</param>
            <param name="listFilter">The list of elements to form the basis of the view (i.e. in set queries)</param>
            <param name="belowFilter">The list of ancestor elements used to scope the query, this expands secondary hierarchies at the top level.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.#ctor(Aveva.Core.Database.View.DbView,Aveva.Core.Database.View.SourceElement,Aveva.Core.Database.Filters.BaseFilter,Aveva.Core.Database.Filters.DbElementListFilter)">
            <summary>
            Constructor
            </summary>
            <param name="view"></param>
            <param name="srcElement"></param>
            <param name="filter"></param>
            <param name="listFilter"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.Refresh">
            <summary>
            Refreshes the DbViewElements collection property
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.FilteredDbView.RefreshUnderScope(System.Collections.Generic.HashSet{Aveva.Core.Database.DbElement},Aveva.Core.Database.DbElement,System.Boolean)">
            <summary>
            Add elements to the view that are below (and include) the scoped element.
            </summary>
            <param name="elementSet">The elements that are already included in the view - to prevent duplicates being added to the view.</param>
            <param name="scopeElement">The element to get the elements below in the hierarchy</param>
            <param name="excludeScopeElement">If true, do not included the scoped element in the view</param>
        </member>
        <member name="E:Aveva.Core.Database.View.FilteredDbView.PropertyChanged">
            <summary>
            Raised when a property of this filtered database view changes
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.FilteredDbView.DbView">
            <summary>
            The database view being filtered.
            If set then SourceElement is set to be the root element for the view
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.FilteredDbView.SourceElement">
            <summary>
            The SourceElement to apply the filters to.  
            If null then the root element of the database view is tested
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.FilteredDbView.Filter">
            <summary>
            The filter to filter the database view contents.
            This filter is applied to SourceElement to generate the list of database view elements.
            If null the database view isn't filtered, i.e. all items are returned by DbViewElements
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.FilteredDbView.DbElementListFilter">
            <summary>
            Additional DbElement list filter to filter the database view contents.
            This filter is separated so that it can be used for improved performance.
            If null the filtering is performed using only Filter.  If set then this is used prior to Filter being applied.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.FilteredDbView.BelowFilter">
            <summary>
            Additional DbElement filter to filter the database view contents based on ancestor scope.
            This filter is separated so that it can be used for improved performance.
            If null the filtering is performed using only Filter.  If set then this is used prior to Filter being applied.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.FilteredDbView.TrackDbViewContents">
            <summary>
            Indicates whether the DbViewElements managed by this filtered database view are updated when an item is added or removed from the base view.
            Nb even if this is set the local filters are not managed so the list returned from DbViewElements becomes out of date as database changes occur
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.FilteredDbView.DbViewElements">
            <summary>
            The filtered list of DbViewElements
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.ColumnNameChangedHandler">
            <summary>
            Notifies subscribers if the column name changes
            </summary>
            <param name="sender">The column raising the event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Aveva.Core.Database.View.ItemRemovedEventArgs">
            <summary>
            Event arguments class for ExtBindingList
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.ItemRemovedEventArgs.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="removedItem">The item removed</param>
        </member>
        <member name="F:Aveva.Core.Database.View.ItemRemovedEventArgs.m_removedItem">
            <summary>
            The item removed from the ExtBindingList
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.ItemRemovedEventArgs.RemovedItem">
            <summary>
            The item removed from the ExtBindingList
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.PMLExpression">
            <summary>
            A PML expression wrapper for working with Database Views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.PMLExpression.m_dbExpression">
            <summary>
            The parsed expression
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.#ctor(System.String)">
            <summary>
            Creates an expression given an expression string
            Determines the type from the passed expression.
            In the event that the expression returns an unsupported type the expression is wrapped with string( expr )
            </summary>
            <param name="expression">The expression string</param>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.#ctor(System.String,Aveva.Core.Database.View.ColumnResultType)">
            <summary>
            Constructor
            Notes :-
            - logs a warning to DbViewLogger if the expression can't be parsed
            </summary>
            <param name="expression">PML 1 expression</param>
            <param name="type">The type of the value returned by the expression</param>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.#ctor(Aveva.Core.Database.View.PMLExpression)">
            <summary>
            Clone constructor
            </summary>
            <param name="exp">The object to clone</param>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.PMLExpression_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            traps changes to base properties to set private properties
            </summary>
            <param name="sender">this</param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.ParseExpression(System.String)">
            <summary>
            Parse the ExpressionString
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.ParseType(System.String)">
            <summary>
            Determines the type of an expression
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateDateTime(Aveva.Core.Database.DbElement,System.DateTime@,System.String@)">
            <summary>
            Evaluates the expression to get a DateTime result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateElement(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElement@,System.String@)">
            <summary>
            Evaluates the expression to get a DbElement result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateElementArray(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElement[]@,System.String@)">
            <summary>
            Evaluates the expression to get a DbElement result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The list result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateBoolean(Aveva.Core.Database.DbElement,System.Boolean@,System.String@)">
            <summary>
            Evaluates the expression to get a boolean result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateBooleanArray(Aveva.Core.Database.DbElement,System.Boolean[]@,System.String@)">
            <summary>
            Evaluates the expression to get a boolean result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The array result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateDirection(Aveva.Core.Database.DbElement,Aveva.Core.Geometry.Direction@,System.String@)">
            <summary>
            Evaluates the expression to get a Direction result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateDbDouble(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbDouble@,System.String@)">
            <summary>
            Evaluates the expression to get a double result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateDbDoubleArray(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbDouble[]@,System.String@)">
            <summary>
            Evaluates the expression to get a double result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The array result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateInteger(Aveva.Core.Database.DbElement,System.Int32@,System.String@)">
            <summary>
            Evaluates the expression to get a integer result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateIntegerArray(Aveva.Core.Database.DbElement,System.Int32[]@,System.String@)">
            <summary>
            Evaluates the expression to get a integer result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The array result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateOrientation(Aveva.Core.Database.DbElement,Aveva.Core.Geometry.Orientation@,System.String@)">
            <summary>
            Evaluates the expression to get an Orientation result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluatePosition(Aveva.Core.Database.DbElement,Aveva.Core.Geometry.Position@,System.String@)">
            <summary>
            Evaluates the expression to get a Position result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.EvaluateString(Aveva.Core.Database.DbElement,System.String@,System.String@)">
            <summary>
            Evaluates the expression to get a string result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.Clone">
            <summary>
            Clones this expression object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.ParseTargetDbElementTypes(Aveva.Core.Database.DbElementType[])">
            <summary>
            Attempts to determine the potential Element types of element results for this expression
            </summary>
            <param name="srcTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpression.ParseTargetDbElementTypes(System.String,Aveva.Core.Database.DbElementType[])">
            <summary>
            TODO what other PML expression should we support?
            currently :-
            XRQELE ( TYPENAME type )
            ( ID nameorref )
            /name
            =ref
            att
            backref expressions
            </summary>
            <param name="expression">The PML expression</param>
            <param name="srcTypes">The element types of the element the expression may be run on</param>
        </member>
        <member name="P:Aveva.Core.Database.View.PMLExpression.ExpressionInstance">
            <summary>
            The Database expression object that is wrapped by the instance.
            Nb may be null if the expression isn't valid.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.PMLExpression.IsValid">
            <summary>
            Indicates this expression is fit for use
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.PMLExpression.DbAttribute">
            <summary>
            returns the attribute if the expression is just an attribute access/navigation
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.PMLExpression.Dimension">
            <summary>
            returns the dimension of the expression result if known
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.PMLExpression.EXPTYPE">
            <summary>
            Indicates the syntax of the expression string
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.PMLExpressionCache">
            <summary>
            Enhances the effectivity of the PMLExpressionCache class by using memory cache.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.PMLExpressionCache.key">
            <summary>
            Unique identifier for a CacheItem instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpressionCache.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpressionCache.#ctor(System.String)">
            <summary>
            Creates an expression given an expression string
            Determines the type from the passed expression.
            In the event that the expression returns an unsupported type the expression is wrapped with string( expr )
            </summary>
            <param name="expression">The expression string</param>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpressionCache.#ctor(System.String,Aveva.Core.Database.View.ColumnResultType)">
            <summary>
            Constructor
            Notes :-
            - logs a warning to DbViewLogger if the expression can't be parsed
            </summary>
            <param name="expression">PML 1 expression</param>
            <param name="type">The type of the value returned by the expression</param>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpressionCache.#ctor(Aveva.Core.Database.View.PMLExpression)">
            <summary>
            Clone constructor
            </summary>
            <param name="exp">The object to clone</param>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpressionCache.EvaluateElement(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElement@,System.String@)">
            <summary>
            Overrides base.EvaluateElement(DbElement refElement, out DbElement exprResult, out string error).
            </summary>
            <param name="refElement"></param>
            <param name="exprResult"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpressionCache.EvaluateElementArray(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElement[]@,System.String@)">
            <summary>
            Overrides base.EvaluateElement(DbElement refElement, out DbElement exprResult, out string error).
            </summary>
            <param name="refElement"></param>
            <param name="exprResult"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.PMLExpressionCache.CacheOn">
            <summary>
            Indicates if cache mechanism is enabled or disabled.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.PMLExpressionCache.Value">
            <summary>
            Represents single value in MemoryCacheWrp.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpressionCache.Value.#ctor(System.Boolean,System.Object,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="result">Represents result of the function.</param>
            <param name="exprResult">Represents the result of the expression.</param>
            <param name="error">Represents error messages.</param>
        </member>
        <member name="P:Aveva.Core.Database.View.PMLExpressionCache.Value.Result">
            <summary>
            Represents result of the function.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.PMLExpressionCache.Value.ExprResult">
            <summary>
            Represents the result of the expression.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.PMLExpressionCache.Value.Error">
            <summary>
            Represents error messages.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.PMLExpressionCache.MemoryCacheWrp">
            <summary>
            The MemoryCache wrapper to have code more readable.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.PMLExpressionCache.MemoryCacheWrp.key">
            <summary>
            Unique identifier for a CacheItem instance.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.PMLExpressionCache.MemoryCacheWrp.expression">
            <summary>
            First key of the value get or set.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.PMLExpressionCache.MemoryCacheWrp.instance">
            <summary>
            Second key of the value get or set.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.PMLExpressionCache.MemoryCacheWrp.type">
            <summary>
            Third key of the value get or set.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.PMLExpressionCache.MemoryCacheWrp.dictionary1">
            <summary>
            Value of given CacheItem instance.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.PMLExpressionCache.MemoryCacheWrp.dictionary2">
            <summary>
            Value under given key in this.dictionary1.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.PMLExpressionCache.MemoryCacheWrp.dictionary3">
            <summary>
            Value under given key in this.dictionary2.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpressionCache.MemoryCacheWrp.#ctor(System.String,Aveva.Core.Database.View.PMLExpressionCache,Aveva.Core.Database.DbElement,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Unique identifier for a CacheItem instance.</param>
            <param name="expression">First key of the value get or set.</param>
            <param name="instance">Second key of the value get or set.</param>
            <param name="type">Third key of the value get or set.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpressionCache.MemoryCacheWrp.TryGetValue(Aveva.Core.Database.View.PMLExpressionCache.Value@)">
            <summary>
            Try to get value from MemoryCache.
            </summary>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise null,</param>
            <returns>true if an type with the specified key exist; otherwise, false.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.PMLExpressionCache.MemoryCacheWrp.SetValue(Aveva.Core.Database.View.PMLExpressionCache.Value)">
            <summary>
            Sets value to MemoryCache.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:Aveva.Core.Database.View.Res">
            <summary>
            Class to help simplify resource access for Database Views
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.Res.GetString(System.String)">
            <summary>
            Gets a string resource from the Aveva.Core.Database.View resources
            </summary>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceID'
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Res.GetStringFromResourceSet(System.String,System.String)">
            <summary>
            Gets a string resource from a given resource set
            </summary>
            <param name="resourceSet">The name of the resource set to get the string from</param>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceID'
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Res.GetString(System.String,System.Object[])">
            <summary>
             Gets a string resource from the Aveva.Core.Database.View resources and substitutes the given
             arguments into it
            </summary>
            <param name="resourceID">The identity of the resource to return</param>
            <param name="args">The arguments to substitute into it</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceSet+resourceID' {arg[1..n]}</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Res.GetStringFromResourceSet(System.String,System.String,System.Object[])">
            <summary>
            Gets a string resource from a specified resource set and substitutes the given
             arguments into it
            </summary>
            <param name="resourceSet">The name of the resource set to get the resource from</param>
            <param name="resourceID">The identity of the resource to return</param>
            <param name="args">The arguments to substitute into it</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceSet+resourceID' {arg[1..n]}</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Res.GetIcon(System.String)">
            <summary>
            Gets an icon resource from the Aveva.Core.Database.View resources
            </summary>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The icon resource if present, otherwise null
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Res.GetIconFromResourceSet(System.String,System.String)">
            <summary>
            Gets an Icon resource from a given resource set
            </summary>
            <param name="resourceSet">The name of the resource set to get the Icon from</param>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The icon resource if present, otherwise null.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Res.GetImage(System.String)">
            <summary>
            Gets an image resource from the Aveva.Core.Database.View resources
            </summary>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The image resource if present, otherwise null
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.Res.GetImageFromResourceSet(System.String,System.String)">
            <summary>
            Gets an image resource from a given resource set
            </summary>
            <param name="resourceSet">The name of the resource set to get the image from</param>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The image resource if present, otherwise null.
            </returns>
        </member>
        <member name="P:Aveva.Core.Database.View.Res.ResourceSet">
            <summary>
            Gets the name of the resource set used by Aveva.Core.Database.View
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.SchemaDbView">
            <summary>
            Wrapper to help with lazy initialisation of database schema derived database views.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_dsxowners">
            <summary>
            State information about distributed attribute definitions, used to manage change
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_dsxmembers">
            <summary>
            State information about distributed attribute definitions, used to manage change
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_dsxMember2Owner">
            <summary>
            Mapping from member to owner to help manage deletes
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_refAtt">
            <summary>
            The ref attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_dbtyAtt">
            <summary>
            The owner attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_acttypeAtt">
            <summary>
            The ACTTYP attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_worldEtype">
            <summary>
            The world element type
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_dsxOwnType">
            <summary>
            The DSXOWN element type
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_dsxMbrType">
            <summary>
            The DSXMBR element type
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_initialised">
            <summary>
            Indicates whether the SourceElements and Columns have been created from the Database Schema
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_dbtype">
            <summary>
            The database type this schema view is defined for.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_baseType">
            <summary>
            Keeps track of the base type of the UDET when the definition was created.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SchemaDbView.m_udhlis">
            <summary>
            Keeps track of the udhlis of the UDET definition
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.#cctor">
            <summary>
             manages state information about distributed attributes.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.PopulateDSXData">
            <summary>
            populate the distributed attributes metadata required to manage the SchemaDbViews
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.DatabaseService_MDBOpened(System.Object,System.EventArgs)">
            <summary>
            Re-create the distributed attribute definition metadata
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.DatabaseService_MDBClosing(System.Object,System.EventArgs)">
            <summary>
            Clear the distributed attribute metadata
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.UDTracker_DSXCreated(Aveva.Core.Database.DbElement)">
            <summary>
            Keep track of distributed attribute definition changes
            </summary>
            <param name="definition">The definition that has changed</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.UDTracker_DSXChanged(Aveva.Core.Database.DbElement)">
            <summary>
            Keep track of distributed attribute definition changes
            </summary>
            <param name="definition">The definition that has changed</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.UDTracker_DSXPostDelete(Aveva.Core.Database.DbElement)">
            <summary>
            Keep track of distributed attribute definition changes
            </summary>
            <param name="definition">The definition that has changed</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.GetSchemaDbViewsForDSXWOWN(Aveva.Core.Database.DbElement)">
            <summary>
            Gets the schemaDbView instances for a given DSXOWN.
            This should include all current views from the element type definition set
            </summary>
            <param name="dsxown">The DSXOWN definition to get associated views for</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.#ctor(Aveva.Core.Database.DbType,Aveva.Core.Database.DbElementType,Aveva.Core.Database.View.IDefinitionItem)">
            <summary>
            Constructor
            </summary>
            <param name="dbtype"></param>
            <param name="etype"></param>
            <param name="owner"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.DbTypeString(Aveva.Core.Database.DbType)">
            <summary>
            The string portion of the names that represents the database type.
            </summary>
            <param name="dbtype">The dbtype</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.DerivedName(System.String,System.String)">
            <summary>
            The NAME property generated from the dbtype and etype information
            </summary>
            <param name="dbtypeStr">The result of calling DbTypeString</param>
            <param name="etypeName">The name property of the element type</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.DerivedUdName(System.String,System.String)">
            <summary>
            The UDNAME property generated from the dbtype and etype information
            </summary>
            <param name="dbtypeStr">The result of calling DbTypeString</param>
            <param name="etypeName">The Name property of the the element type</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.Initialise">
            <summary>
            Initialises the columns for this db schema defined view.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.AttName(Aveva.Core.Database.DbAttribute,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            gets the user presentable name for an attribute
            </summary>
            <param name="att">The attribute for the column being named</param>
            <param name="columnNames">Names of columns used, with a count of nof columns using it</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.DbViewStandardAttributes(Aveva.Core.Database.DbElementType)">
            <summary>
            The standard set of attributes to show as columns for a given element type.
            </summary>
            <param name="etype"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.DbViewBoundTypeExprs(Aveva.Core.Database.DbElementType)">
            <summary>
            The standard Source element expressions for a DbView with the given element type.
            </summary>
            <param name="etype"></param>
            <returns>A list of expressions and their corresponding element type</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.DbViewDistAttributes(Aveva.Core.Database.DbElementType,System.Int32,System.Boolean)">
            <summary>
            Returns the standard list of attributes for a distributed attributes source element.
            </summary>
            <param name="xpitem">The element type of the distributed attribute instance.</param>
            <param name="num">The instance number</param>
            <param name="moreThanOne">indicates there are more than one distributed attribute instance for the given type allowed.</param>
            <returns>a list of attribute names and their associated attributes.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.SourceElementOutOfDate(Aveva.Core.Database.View.SourceElement,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,Aveva.Core.Database.DbElementType}},System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Checks whether a SourceElement that is based on a boundattribute instance is out of date.
            </summary>
            <param name="srcElement">The element to check</param>
            <param name="srcElements">The expected source elements returned from DbViewBoundTypeExprs</param>
            <param name="checkAttributes">Set to true if you want the attributes of the source elements checked.</param>
            <param name="attNames">The attribute name count to manage duplicates, contains attribute names already used</param>
            <returns>true if out of date, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.UDHLISChanged">
            <summary>
            checks whether UDHLIS on the UDET definition was changed since the view was created
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.MembersOutOfDate(System.Boolean)">
            <summary>
            Checks whether the schema view is out of step with the UDA, USDA and distributed attribute definitions.
            </summary>
            <param name="checkAttributes">if true then attribute columns are checked otherwise just source elements are checked.</param>
            <result>true if the definition is out of date, otherwise false</result>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.HandleUDETCreate">
            <summary>
            Handle changes to UDET definitions
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.HandleUDETChange">
            <summary>
            Handle changes to UDET definitions
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.HandleUDETPreDelete(Aveva.Core.Database.DbElementType)">
            <summary>
            Handle UDET delete events by deleting the view since these are 
            all views for the element type set.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.HandleUDETPostDelete">
            <summary>
            Handle UDET delete events by deleting the view since these are 
            all views for the element type set.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.HandleUDADefinitionChange">
            <summary>
            Handle changes to UDA definitions
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.ReInitialise">
            <summary>
            Removes all members and reinitialises this view.
            Could reduce the changes by being more specific but thats more prone to error.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.DbViewElementFor(Aveva.Core.Database.DbElement)">
            <summary>
            Gets a DbViewElement instance for the given DbElement or null if the element isn't a root view element
            </summary>
            <param name="element">The DbElement to get the row object for</param>
            <returns>null if rootElement isn't a valid root, or the DbViewElement</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.ManageColumns">
            <summary>
            overridden to stop .Columns being called which would otherwise initialise this instance even when not in use
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.UnmanageColumns">
            <summary>
            overridden to stop .Columns being called which would otherwise initialise this instance even when not in use
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SchemaDbView.CheckComplexTrackingStatus">
            <summary>
            overridden to stop .Columns being called which would otherwise initialise this instance even when not in use
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SchemaDbView.DefinitionOutOfDate">
            <summary>
            Checks whether this schema view is out of step with the UDET it's derived from.
            Nb this only checks the UDET itself.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.SchemaDbView.DbType">
            <summary>
            The database type this schema defined view is defined for.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SchemaDbView.Properties">
            <summary>
            The public properties available on this object
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SchemaDbView.DbViewElements">
            <summary>
            Returns a binding list of the elements in this Database View.
            Nb the binding list is bound to the definition so as elements are created/deleted they
            are added/removed from this BindingList.
            Nb adding and removing items from this instance will affect other users of this bindinglist.
            </summary>
            <returns>A BindingList of the elements in this Database View</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.SchemaDbView.OwnedMembers">
            <summary>
            All of the owned members of this definition item
            This only includes direct members
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SchemaDbView.AllMembers">
            <summary>
            All of the owned members of this definition item
            This only includes direct members
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SchemaDbView.Count">
            <summary>
            The number of owned members
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SchemaDbView.Columns">
            <summary>
            Gets the columns defined by this SourceElement and its members
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.SessionComparisonDbElement">
            <summary>
            Wrapper to help with the display of element details in a different session
            When this wrapper is created the NAME, REF, IsNull and IsValid status are cached for later access.
            Access to any other information results in a NotImplementedException
            THIS SHOULD NOT HAVE INHERITED FROM DbElement. PLEASE REIMPLEMENT.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.SessionComparisonDbView">
            <summary>
            Class used to compare database states.
            Note this doesn't support dynamic comparison against the current session. Once the data is assessed it is fixed.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbView.m_dbview">
            <summary>
            The wrapped database view being used for comparison
            This is a clone to isolate the session comparison to view changes.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbView.m_properties">
            <summary>
            The property definitions for all row elements.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbView.m_baseTime">
            <summary>
            The first time to be used for the comparison
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbView.m_targetTime">
            <summary>
            The second time to be used for the comparison
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbView.m_baseSessions">
            <summary>
            The sessions to be used for each database
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbView.m_targetSessions">
            <summary>
            The sessions to be used for each database
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbView.m_typeOfChangeColumn">
            <summary>
            The type of change column added to the view
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbView.m_excludeDBs">
            <summary>
            Databases to exclude from comparison
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbView.m_excludeDBTypes">
            <summary>
            Database types to exclude from comparison
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.GetDefinitionSet">
            <summary>
            The definition set that is used for session comparison database views
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.BuildProperties">
            <summary>
            Builds the revised property definitions for the view.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.InitSessions">
            <summary>
            Initialises the session information for each database in the mdb
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.SwitchToState(System.Collections.Generic.KeyValuePair{Aveva.Core.Database.Db,Aveva.Core.Database.DbSession}[])">
            <summary>
            Switches the databases to the requested sessions.
            reverts them back if an error occurred.
            </summary>
            <param name="stateList"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.PopulateList(System.Collections.Generic.List{Aveva.Core.Database.View.SessionComparisonDbViewElement})">
            <summary>
            Creates the sessionComparisonviewElements for the view
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.InitDbView(Aveva.Core.Database.View.DbView)">
            <summary>
            initialises the database view given the source view
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.IndexForColumn(Aveva.Core.Database.View.IColumn)">
            <summary>
            gets the index in m_values for the given column value
            </summary>
            <param name="column">the column to get the index for</param>
            <returns>the index or -1 if not a valid column</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.DbView">
            <summary>
            The wrapped view definition
            Nb this must not be changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.SwitchToBaseState">
            <summary>
            Switches the databases to the sessions for the given base time
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.SwitchToTargetState">
            <summary>
            Switches the databases to the sessions for the given target time
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.RevertToCurrentSession">
            <summary>
            Reverts all databases to their current session
            Should only be used if Switch has been called on this view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.#ctor(Aveva.Core.Database.View.DbView,System.DateTime,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="view">The view to provide a session comparison for</param>
            <param name="baseTime">The time to roll back to for the first state</param>
            <param name="targetTime">The time to roll back to for the target state.  If set to MaxValue then the current session is used</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.#ctor(Aveva.Core.Database.View.DbView,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="view">The view to provide a session comparison for, compares with current session</param>
            <param name="baseTime">The time to roll back to for the first state</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.#ctor(Aveva.Core.Database.View.DbView,Aveva.Core.Database.Db[])">
            <summary>
            Constructor
            </summary>
            <param name="view">The view to provide a session comparison for, compares with latest session on parent extract</param>
            <param name="excludeDBs">Array of Db objects representing databases to be excluded from comparison</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.#ctor(Aveva.Core.Database.View.DbView,Aveva.Core.Database.DbType[])">
            <summary>
            Constructor
            </summary>
            <param name="view">The view to provide a session comparison for, compares with latest session on parent extract</param>
            <param name="excludeDBTypes">Array of DbType objects representing databases to be excluded from comparison</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.Finalize">
            <summary>
            Attempt to free up used resources by removing the Database View form the definition set.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbView.EmptyDataTable">
            <summary>
            Returns an empty data table with the structure of the view
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbView.Properties">
            <summary>
            The property descriptors for the view with the type of change column included
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbView.BaseTime">
            <summary>
            The base time of this comparison view
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbView.TargetTime">
            <summary>
            The target time of this comparison view
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbView.TypeOfChangeColumn">
            <summary>
            The column added to represent the change type
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbView.SessionComparisonDbViewElements">
            <summary>
            Creates a new list every time it's called to reduce memory structures
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.SessionComparisonChangeType">
            <summary>
            The type of change associated with a SessionComparisonDbViewElement
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonChangeType.NoChange">
            <summary>
            No Change
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonChangeType.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonChangeType.Modified">
            <summary>
            Modified
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonChangeType.Deleted">
            <summary>
            Deleted
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonChangeType.LogicallyDeleted">
            <summary>
            Logically deleted
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonChangeType.Unknown">
            <summary>
            Not yet determined
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.SessionComparisonDbViewElement">
            <summary>
            Row element used for session comparisons
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbViewElement.m_elementExistsAtBase">
            <summary>
            flag indicating the element is valid at the Base time stamp
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbViewElement.m_elementExistsAtTarget">
            <summary>
            flag indicating the element is valid at the target time stamp
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbViewElement.m_changeType">
            <summary>
            The type of change for the sessions, set to unknown if not analysed
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SessionComparisonDbViewElement.m_viewElement">
            <summary>
            A valid view element that is used to access data
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.SetChangeType">
            <summary>
            called once the state of this object wrt to m_baseValues and m_targetValues has been populated 
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.GetColumnValues">
            <summary>
            gets the values for the columns in the current state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.SetErrorInfo(System.String,System.String)">
            <summary>
            Sets the error information for the named column
            </summary>
            <param name="columnName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.#ctor(Aveva.Core.Database.View.SessionComparisonDbView,Aveva.Core.Database.View.DbViewElement,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="scdbview"></param>
            <param name="viewElement"></param>
            <param name="atBase"></param>
            <param name="atTarget"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.GetCurrentSessionValue(Aveva.Core.Database.View.IColumn)">
            <summary>
            Gets the value for the databases in their current state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.BaseValue(Aveva.Core.Database.View.IColumn)">
            <summary>
            Gets the value for the column at the Base time
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.TargetValue(Aveva.Core.Database.View.IColumn)">
            <summary>
            Gets the value for the column at the Target time
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.ValueEquals(System.Object,System.Object)">
            <summary>
            A way of comparing values between sessions
            </summary>
            <param name="baseValue">object 1</param>
            <param name="targetValue">object 2</param>
            <returns>true if equivalent, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.GetDbElementForProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            The element the property has been derived from.
            </summary>
            <param name="pdesc"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.GetDbElementsForAllProperties">
            <summary>
            returns an empty collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.GetPropertiesForDbElement(Aveva.Core.Database.DbElement)">
            <summary>
            returns an empty collection.
            Not safe due to multiple states of a row having to be analysed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElement.GetSessionHistory(System.Collections.Generic.List{Aveva.Core.Editors.SessionChange}@,System.Collections.Generic.Dictionary{System.String,Aveva.Core.Editors.ContextConfig})">
            <summary>
            Gets the history of the properties of this object
            Nb the TypeOfChange column is ignored by this
            </summary>
            <param name="changes">The changes</param>
            <param name="displayConfig">The configurationfor display conversions</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbViewElement.Properties">
            <summary>
            the properties for this comparison view.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbViewElement.Error">
            <summary>
            The error information for this object
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbViewElement.Item(System.String)">
            <summary>
            The error information for a named column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbViewElement.RootElement">
            <summary>
            The root element for the row instance.
            Nb this is not wrapped so may be in a deleted state.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbViewElement.Item(Aveva.Core.Database.View.IColumn)">
            <summary>
            Gets the value of the indicated column at the target session.
            If the item has been deleted by the target session then the base session information is returned
            If null is provided then the change column value is returned.
            Returns null if the column provided is not part of the view definition
            </summary>
            <param name="column">The column to get/set the value of</param>
            <returns>the column value</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbViewElement.ChangeType">
            <summary>
            The type of change this row element has had between base and target
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbViewElement.ChangedColumns">
            <summary>
            The columns that changed value between the base and target sessions
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbViewElement.LastElementAccessed">
            <summary>
            returns null
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbViewElement.IsHistorySupported">
            <summary>
            true, history is supported for this element
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElementPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the column value for a given DbViewElement
            </summary>
            <param name="obj">The DbViewElement to get the column value for</param>
            <returns>The column value</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElementPropertyDescriptor.GetSessionValue(System.Object)">
            <summary>
            Gets the value for the current session
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElementPropertyDescriptor.RootElement(System.Object)">
            <summary>
            Gets the root element for a row object given the row instance.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElementPropertyDescriptor.DbAttributeFor(System.Object)">
            <summary>
            Gets the attribute that a particular column is based on
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElementPropertyDescriptor.DbElement(System.Object)">
            <summary>
            The element that the value is from
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SessionComparisonDbViewElementPropertyDescriptor.DbElementTypeFor(System.Object)">
            <summary>
            The type of element this property is derived from if known
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.SessionComparisonDbViewElementPropertyDescriptor.IsHistorySupported">
            <summary>
            Indicates that history information is available for this property
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.SetAttribute">
            <summary>
                Object representation of the SETATTRIBUTE element for Database Views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetAttribute.m_type">
            <summary>
                type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetAttribute.m_memberTypes">
            <summary>
                cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetAttribute.m_trackingAttributes">
            <summary>
                cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetAttribute.m_ATTRIBUTE">
            <summary>
                The attribute wrapped by this column definition
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetAttribute.m_EXPR">
            <summary>
                The expression to derive the new value for the attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetAttribute.m_exprPropertyChanged">
            <summary>
                Handler for changes to the expression
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetAttribute.m_REQUIRED">
            <summary>
                Indicates the set rule must work for element creation to succeed
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetAttribute.m_UPROMPT">
            <summary>
                The prompt to display to the user for value requests
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.#ctor(Aveva.Core.Database.View.SetAttribute)">
            <summary>
                Copy constructor, doesn't copy members
            </summary>
            <param name="setAtt">the definitionItem to copy</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.CreateHandlersAndDelegates">
            <summary>
                Create the necessary handlers and delegates to manage this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.ExpressionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
                Report changes to the expression.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.SetATTRIBUTE(Aveva.Core.Database.DbAttribute)">
            <summary>
                Sets m_ATTRIBUTE and raises the necessary change events
            </summary>
            <param name="value">The attribute to set it to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.SetEXPTYPE(Aveva.Core.Database.View.ExpressionType)">
            <summary>
                Changes the expression type of the expression
            </summary>
            <param name="value">The expression type</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.#ctor(System.Xml.XmlElement)">
            <summary>
                Constructor
            </summary>
            <param name="config">the XML representation of the Database View Set to construct this instance from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
                Represents this as an XML definition
            </summary>
            <param name="ownerElement">The owner element to add the definition to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
                Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
                When a database attribute associated with this object is changed this method is called.
                The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att">Attribute that has changed</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
                Provides a deep copy of the given item.
                refLookup is populated with a mapping from the original item to the new copy
                refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
                required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.CloneExpression">
            <summary>
                Provides a copy of the expression object managed by this definition item.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.#ctor">
            <summary>
                Default constructor, item must be added to a DefinitionSet to be used
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.MemberTypes">
            <summary>
                provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.ToString">
            <summary>
                Returns NAME
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SetAttribute.CommonAttributes">
            <summary>
                Gets the list of attributes relevant to the context that ATTRIBUTE is likely to be set to.
                this doesn't include pseudos but should include all relevant system attributes and UDAs
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.SetAttribute.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
                The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetAttribute.ATTRIBUTE">
            <summary>
                The wrapped attribute, this may be null
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetAttribute.EXPRESSION">
            <summary>
                The expression used to derive the column value.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetAttribute.EXPTYPE">
            <summary>
                The syntax of the expression string
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetAttribute.UPROMPT">
            <summary>
                The prompt to show to the user if a value is required from them
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetAttribute.REQUIRED">
            <summary>
                Indicates whether the set attribute rule must succeed when the element is created.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetAttribute.TYPE">
            <summary>
                The DbElementType this definition item represents (DbElementTypeInstance.SETATTRIBUTE)
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetAttribute.DbElementType">
            <summary>
                The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetAttribute.IsValid">
            <summary>
                true if the attribute is set
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.SetParameter">
            <summary>
            Object representation of the SETPARAMETER element for Database Views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetParameter.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetParameter.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetParameter.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetParameter.m_DESC">
            <summary>
            The description for this element
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetParameter.m_UDNAME">
            <summary>
            The name of the Parameter
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetParameter.m_EXPR">
            <summary>
            The expression to derive the new value for the attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetParameter.m_UPROMPT">
            <summary>
            The prompt to display to the user for value requests
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetParameter.m_REQUIRED">
            <summary>
            Indicates the set rule must work for element creation to succeed
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetParameter.m_exprPropertyChanged">
            <summary>
            Handler for changes to the expression
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.#ctor(Aveva.Core.Database.View.SetParameter)">
            <summary>
            Copy constructor, doesn't copy members
            </summary>
            <param name="setPara">the SetPARAMETER to copy</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.CreateHandlersAndDelegates">
            <summary>
            create the necessary handlers and delegates to manage this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.ExpressionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            report changes to the expression.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.SetEXPTYPE(Aveva.Core.Database.View.ExpressionType)">
            <summary>
            changes the expression type of the expression
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="config">the Xml representation of the Database View Set to construct this instance from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Represents this as an XML definition
            </summary>
            <param name="ownerElement">The owner element to add the definition to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this method is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.CloneExpression">
            <summary>
            Provides a copy of the expression object managed by this definition item.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.#ctor">
            <summary>
            Default constructor, item must be added to a DefinitionSet to be used
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SetParameter.ToString">
            <summary>
            Returns NAME to represent this Definition Item
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.SetParameter.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetParameter.DESC">
            <summary>
            The parameter description as provided by the user
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetParameter.UDNAME">
            <summary>
            The name of the Parameter.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetParameter.EXPRESSION">
            <summary>
            The expression used to derive the column value.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetParameter.EXPTYPE">
            <summary>
            The syntax of the expression string
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetParameter.UTYPE">
            <summary>
            The type of the parameter
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetParameter.UPROMPT">
            <summary>
            The prompt to show to the user if a value is required from them
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetParameter.REQUIRED">
            <summary>
            Indicates whether the set parameter rule must succeed when the element is created.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetParameter.TYPE">
            <summary>
            SETPARAMETER
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetParameter.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetParameter.IsValid">
            <summary>
            true if the user defined name UDNAME is set.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.SetStatus">
            <summary>
            Object representation of the SETSTATUS element for Database Views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetStatus.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetStatus.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetStatus.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetStatus.m_STDEFR">
            <summary>
            The status definition reference
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetStatus.m_UPROMPT">
            <summary>
            The prompt to display to the user for value requests
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.SetStatus.m_REQUIRED">
            <summary>
            Indicates the set rule must work for element creation to succeed
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.#ctor(Aveva.Core.Database.View.SetStatus)">
            <summary>
            Copy constructor, doesn't copy members
            </summary>
            <param name="setStatus">the SetSTATUS to copy</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="config">the Xml representation of the Database View Set to construct this instance from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Represents this as an XML definition
            </summary>
            <param name="ownerElement">The owner element to add the definition to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this method is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.#ctor">
            <summary>
            Default constructor, item must be added to a DefinitionSet to be used
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.ToString">
            <summary>
            returns NAME
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.PossibleStatusDefinitions">
            <summary>
            Returns the status definitions that can be used as valid values for this SetStatus.
            Nb this may return more status definitions than appropriate if the element type of the 
            containing SourceElement cannot be correctly determined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.SetStatus.PossibleStatusDefinitions(Aveva.Core.Database.DbElementType)">
            <summary>
            Returns the status definitions that can be used as valid values for this SetStatus.
            Nb this may return more status definitions than appropriate if the element type of the 
            containing SourceElement cannot be correctly determined.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.SetStatus.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetStatus.STDEFREF">
            <summary>
            The status definition to assign to the new element, if null the user is prompted
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetStatus.UPROMPT">
            <summary>
            The prompt to show to the user if a value is required from them
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetStatus.REQUIRED">
            <summary>
            Indicates whether the set status rule must succeed when the element is created.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetStatus.TYPE">
            <summary>
            The DbElementType this definition represented (DbElementTypeInstance.SETSTATUS)
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetStatus.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.SetStatus.IsValid">
            <summary>
            true
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.SyncDbViewEditorToExplorerMessage">
            <summary>
            A message to sync DbView Explorer selected element to DbView explorer element
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.SyncDbViewEditorToExplorerMessage.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Aveva.Core.Database.View.SyncDbViewEditorToExplorerMessage"/> class.
            </summary>
            <param name="paramVal">The parameter value.</param>
        </member>
        <member name="P:Aveva.Core.Database.View.SyncDbViewEditorToExplorerMessage.ParamVal">
            <summary>
            Gets the parameter value.
            </summary>
            <value>
            The parameter value.
            </value>
        </member>
        <member name="T:Aveva.Core.Database.View.TestExpression">
            <summary>
            Object representation of the TestExpression element for database views
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TestExpression.m_type">
            <summary>
            type cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TestExpression.m_memberTypes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TestExpression.m_trackingAttributes">
            <summary>
            cached for performance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TestExpression.m_testExpression">
            <summary>
            The expression to derive the new value for the attribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TestExpression.m_exprPropertyChanged">
            <summary>
            Handler for changes to the expression
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.#ctor(Aveva.Core.Database.View.TestExpression)">
            <summary>
            Copy constructor, doesn't copy members
            </summary>
            <param name="testExpr">The definitionItem to copy</param>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.CreateHandlersAndDelegates">
            <summary>
            Create the necessary handlers and delegates to manage this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.ExpressionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            report changes to the expression.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.SetEXPTYPE(Aveva.Core.Database.View.ExpressionType)">
            <summary>
            changes the expression type of the expression
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="config">the Xml representation of the Database View Set to construct this instance from</param>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.Aveva#Core#Database#View#IInternalDefinitionItem#ToXML(System.Xml.XmlElement)">
            <summary>
            Represents this as an XML definition
            </summary>
            <param name="ownerElement">The owner element to add the definition to</param>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.Aveva#Core#Database#View#IInternalDefinitionItem#SetAllDbAttributes">
            <summary>
            Sets the database attributes on Definition element to match this object
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            When a database attribute associated with this object is changed this method is called.
            The IInternalDefinitionItem must update itself in response to this call
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.Aveva#Core#Database#View#IInternalDefinitionItem#Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            Provides a deep copy of the given item.
            refLookup is populated with a mapping from the original item to the new copy
            refITems is a list of all of the reference items that need there references resolving to the new hierarchy
            </summary>
            <param name="refLookup">A dictionary that is populated during copy old->new</param>
            <param name="refItems">The list of new items with reference attributes</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.Aveva#Core#Database#View#IInternalDefinitionItem#ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            required for copy structure, does nothing since no references maintained
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.CloneExpression">
            <summary>
            Provides a copy of the expression object managed by this definition item.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.#ctor">
            <summary>
            Default constructor
            Item must be added to a DefinitionSet to be used
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.MemberTypes">
            <summary>
            provides the members types supported by this attribute column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.TestExpression.ToString">
            <summary>
            returns NAME
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.TestExpression.Aveva#Core#Database#View#IInternalDefinitionItem#TrackingAttributes">
            <summary>
            The attributes that need to be tracked to manage database updates, excluding NAME
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TestExpression.EXPRESSION">
            <summary>
            The expression used to derive the column value.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TestExpression.EXPTYPE">
            <summary>
            The syntax of the expression string
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TestExpression.TYPE">
            <summary>
            TestExpression
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TestExpression.DbElementType">
            <summary>
            The Database Element type this represents
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TestExpression.IsValid">
            <summary>
            true
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.TypeOfChangeColumn">
            <summary>
            Represents a column in a database view representing change information for session comparisons
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TypeOfChangeColumn.m_uniqueName">
            <summary>
            The unique name for this column in its owning DbView
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TypeOfChangeColumn.m_xmlName">
            <summary>
            The Xml name for this column
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TypeOfChangeColumn.m_udname">
            <summary>
            The default name for the column
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TypeOfChangeColumn.m_desc">
            <summary>
            The description for the column
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.#ctor(Aveva.Core.Database.View.TypeOfChangeColumn)">
            <summary>
            Copy constructor.  This creates a copy that is not part of the current definition set.
            This doesn't copy members.
            References properties are to the original reference targets and must be amended by calling code
            </summary>
            <param name="attCol"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.GetValue(Aveva.Core.Database.View.DbViewElement)">
            <summary>
            Throws a not implemented exception since it should not be accessed directly
            </summary>
            <param name="dbViewElement"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.SetValue(Aveva.Core.Database.View.DbViewElement,System.Object)">
            <summary>
            Throws a not implemented exception since it should not be accessed.
            </summary>
            <param name="dbViewElement"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.DbViewSets">
            <summary>
            The Database Views Sets this column is part of
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.ColumnRelations">
            <summary>
            An empty collection since this may not be part of a relationship
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.SourceElement">
            <summary>
            The owning database view as a SourceElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.DbView">
            <summary>
            The owning Database View
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.RaiseTypeConverterChanged">
            <summary>
            Raise TypecConverter changes
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.RaiseUITypeEditorChanged">
            <summary>
            Raise type editor changes
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.ToXML(System.Xml.XmlElement)">
            <summary>
            does nothing since this isn't serializable
            </summary>
            <param name="ownerElement"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.SetAllDbAttributes">
            <summary>
            Does nothing since no database support is enabled
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.TrackingAttributeChanged(Aveva.Core.Database.DbAttribute)">
            <summary>
            does nothing
            </summary>
            <param name="att"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.Copy(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem},System.Collections.Generic.List{Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            copies the given item
            </summary>
            <param name="refLookup"></param>
            <param name="refItems"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.ResolveCopiedReferences(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.IDefinitionItem,Aveva.Core.Database.View.IDefinitionItem})">
            <summary>
            does nothing
            </summary>
            <param name="refLookup"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.TypeOfChangeColumn.#ctor">
            <summary>
            constructs a TypeOfChangeColumn
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TypeOfChangeColumn.NoChangeValue">
            <summary>
            The value to display for no change
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TypeOfChangeColumn.NewValue">
            <summary>
            The value to display for new items
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TypeOfChangeColumn.DeletedValue">
            <summary>
            The value to display for deleted items
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TypeOfChangeColumn.LogicallyDeletedValue">
            <summary>
            The value to logically display for deleted items
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.TypeOfChangeColumn.ModifiedValue">
            <summary>
            The value to display for modified items
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.ColumnName">
            <summary>
            Unique name for the column in its context
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.UDNAME">
            <summary>
            The user defined name for the column, this is fixed by the resource ID_DBVW_LBL_TypeOfChangeColumnName
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.DESC">
            <summary>
            The description for the column, this is fixed by the resource ID_DBVW_LBL_TypeOfChangeDescription
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.UTYPE">
            <summary>
            DbAttributeType.String
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.ColumnType">
            <summary>
            System.string
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.IsArray">
            <summary>
            false, All strings are array types in pdms if greater than 1 in length
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.READONLY">
            <summary>
            true, this column is readonly
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.Dimension">
            <summary>
            null, this column doesn't have a dimension
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.XmlLocalName">
            <summary>
            The name of this column if output as XML
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.IsValid">
            <summary>
            true, has no invalid states
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.TYPE">
            <summary>
            This pretends to be an attribute column to enable it to be added to the columns list
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.TrackingAttributes">
            <summary>
            empty collection since no storage supported
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.TypeOfChangeColumn.UniqueName">
            <summary>
            The unique name for this column
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.UDAChangedHandler">
            <summary>
                Called when a UDA changes, definition is the associated dictionary database definition
            </summary>
            <param name="uda">the UDA that has changed</param>
            <param name="definition">the dictionary definition item</param>
        </member>
        <member name="T:Aveva.Core.Database.View.UDETChangedHandler">
            <summary>
                Called when a UDET changes, definition is the associated dictionary database definition
            </summary>
            <param name="udet">the UDET that has changed</param>
            <param name="definition">the dictionary definition item</param>
        </member>
        <member name="T:Aveva.Core.Database.View.DsxChangedHandler">
            <summary>
                Called when a DSXOWN or DSXMBR definitions changes.
            </summary>
            <param name="definition">The dictionary definition item</param>
        </member>
        <member name="T:Aveva.Core.Database.View.UDTracker">
            <summary>
                Class to track UDA and UDET changes.  The C# interface doesn't provide information about the UDETs/UDAs created and
                deleted
                so this class determines which UDETs/UDAs have been created, deleted or changed and makes that information
                available.
                Nb UDA events are recognised when the core is updated by a compile, UDET definitions are maintained in line with
                the db.
                Nb MDB open and close related events are not reported through these events and must be separately managed
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker.m_instance">
            <summary>
                singleton instance
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker.m_worldEtype">
            <summary>
                Cached to stop repeated access.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker.m_initForDictWrite">
            <summary>
                Indicates that the handlers have been initialised for a writeable dictionary db
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.#cctor">
            <summary>
                Static constructor used to construct the singleton instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.CreatedUDAs">
            <summary>
                UDAs definitions created during the last UDA compilation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.ChangedUDAs">
            <summary>
                UDA definitions changed during the last UDA compilation
            </summary>
            <returns></returns>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker.m_udaDefs2udas">
            <summary>
                UDA definitions mapped to DbAttribute
                NB this is populated for all UDA definition elements that have a valid associate DbAttribute
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker.m_udetDefs2udets">
            <summary>
                UDET definitions mapped to DbElementType
                NB this is only populated with element entries that have valid DbElementTypes.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker.m_udaDefChanges">
            <summary>
                UDA definitions that have changed since the last compile
                NB
                - this doesn't include creates and deletes since they can be discovered during processing.
                - These are changes that will come into affect at the next compile
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker.m_udaChanges">
            <summary>
                The UDA definitions that were changed during the last compile
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker.m_udaCreates">
            <summary>
                The UDA definitions that were created during the last compile.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker.m_dsxDeletes">
            <summary>
                The DSX definitions that have been deleted since the last user changes or get work.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker.m_GetWork">
            <summary>
                indicates we are processing a GetWork event
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker.m_eventsRaised">
            <summary>
                indicates events have been raise by a HandleUserChanges or HandleRawChanges
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.#ctor">
            <summary>
                Private constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.DatabaseService_MDBClosed(System.Object,System.EventArgs)">
            <summary>
                Check whether events handlers need updating
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.DatabaseService_MDBOpened(System.Object,System.EventArgs)">
            <summary>
                Check whether events handlers need updating
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.PopulateLists(System.Boolean)">
            <summary>
                Populates the initial state of the tracker.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UDTracker._udetCreatedDelegate">
            <summary>
                The delegates that are going to be created
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.InitaliseDelegates">
            <summary>
                Initialise all of the delegates to be used by this class
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.AddHandlers">
            <summary>
                Adds the necessary handlers to keep track of UDETs and UDAs
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RemoveHandlers">
            <summary>
                Removes the necessary handlers to keep track of UDETs and UDAs
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_UDACreated(Aveva.Core.Database.DbElement)">
            <summary>
                manage UDA creation
            </summary>
            <param name="ele"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_UDAPreDelete(Aveva.Core.Database.DbElement)">
            <summary>
                manage UDA deletion
            </summary>
            <param name="ele"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.AddUda(Aveva.Core.Database.DbElement)">
            <summary>
                Adds a UDA from its definition
            </summary>
            <param name="ele">UDA definition</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.UdaRebuildHandler">
            <summary>
                Handles UDA compile events
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_UDETCreated(Aveva.Core.Database.DbElement)">
            <summary>
                manage UDET creation
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_UDETChanged(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbAttribute)">
            <summary>
                Manage when the attribute of a UDET is changed
            </summary>
            <param name="element">The element that has changed (Nb UDA/UDET/DbView def)</param>
            <param name="att">DbAttributeInstance.?</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_UDETChanged(Aveva.Core.Database.DbElement)">
            <summary>
                Manage when the attribute of a UDET is changed
            </summary>
            <param name="element">The element that has changed (Nb UDA/UDET/DbView def)</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_UDETPreDelete(Aveva.Core.Database.DbElement)">
            <summary>
                manage UDET deletion
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_UDETPostDelete(Aveva.Core.Database.DbElement)">
            <summary>
                manage UDET deletion
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_UDETPreAncestorDelete(Aveva.Core.Database.DbElement)">
            <summary>
                manage UDET deletion
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_UDETPostAncestorDelete(Aveva.Core.Database.DbElement)">
            <summary>
                manage UDET deletion
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_UDAChanged(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbAttribute)">
            <summary>
                Manage when the attribute of a UDA is changed
            </summary>
            <param name="element">The element that has changed (Nb UDA/UDET/DbView def)</param>
            <param name="att">DbAttributeInstance.?</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.AddUdet(Aveva.Core.Database.DbElement)">
            <summary>
                Adds a udet from its definition
            </summary>
            <param name="udetDef"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_DSXCreated(Aveva.Core.Database.DbElement)">
            <summary>
                manage DSXOWN and DSXMBR creation
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_DSXChanged(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbAttribute)">
            <summary>
                Manage when the attribute of a DSXOWN or DSXMBR is changed
            </summary>
            <param name="element">The element that has changed (Nb DSXOWN.DSXMBR)</param>
            <param name="att">DbAttributeInstance.?</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_DSXChanged(Aveva.Core.Database.DbElement)">
            <summary>
                Manage when the attribute of a DSXOWN or DSXMBR is changed
            </summary>
            <param name="element">The element that has changed (Nb UDA/UDET/DbView def)</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_DSXPreDelete(Aveva.Core.Database.DbElement)">
            <summary>
                manage DSXOWN and DSXMBR deletion
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_DSXPostDelete(Aveva.Core.Database.DbElement)">
            <summary>
                manage DSXOWN and DSXMBR deletion
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_DSXPreAncestorDelete(Aveva.Core.Database.DbElement)">
            <summary>
                manage UDET deletion
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Db_DSXMBRPostMove(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElement,System.Int32)">
            <summary>
                Manages DSXMBR move events
            </summary>
            <param name="ele1"></param>
            <param name="ele2"></param>
            <param name="i"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseUDACreated(Aveva.Core.Database.DbAttribute,Aveva.Core.Database.DbElement)">
            <summary>
                Raises the UDACreated event.
            </summary>
            <param name="att">The attribute to raise the change for</param>
            <param name="definition">The dictionary element that defines the uda</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseUDAChanged(Aveva.Core.Database.DbAttribute,Aveva.Core.Database.DbElement)">
            <summary>
                Raises the UDAChanged event.
            </summary>
            <param name="att">The element type to raise the change for</param>
            <param name="definition">The dictionary element defining the uda</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseUDADeleted(Aveva.Core.Database.DbAttribute,Aveva.Core.Database.DbElement)">
            <summary>
                Raises the UDA deleted event.
            </summary>
            <param name="att">The element type to raise the change for</param>
            <param name="definition">The dictionary element defining the uda</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseUDETCreated(Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbElement)">
            <summary>
                Raises the UDETCreated event.
            </summary>
            <param name="etype">The element type to raise the change for</param>
            <param name="definition">The dictionary element that defines the udet</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseUDETChanged(Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbElement)">
            <summary>
                Raises the UDETChanged event.
            </summary>
            <param name="etype">The element type to raise the change for</param>
            <param name="definition">The dictionary element defining the udet</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseUDETPreDelete(Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbElement)">
            <summary>
                Raises the UDETPreDelete event.
            </summary>
            <param name="etype">The element type to raise the change for</param>
            <param name="definition">The dictionary element defining the udet</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseUDETPostDelete(Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbElement)">
            <summary>
                Raises the UDETPostDelete event.
            </summary>
            <param name="etype">The element type to raise the change for</param>
            <param name="definition">The dictionary element defining the udet</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseDsxCreated(Aveva.Core.Database.DbElement)">
            <summary>
                Raises the DSXCreated event.
            </summary>
            <param name="definition">The dictionary element that defines the udet</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseDsxChanged(Aveva.Core.Database.DbElement)">
            <summary>
                Raises the DSXChanged event.
            </summary>
            <param name="definition">The dictionary element defining the udet</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseDsxPreDelete(Aveva.Core.Database.DbElement)">
            <summary>
                Raises the DSXPreDelete event.
            </summary>
            <param name="definition">The dictionary element defining the udet</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseDsxPostDelete(Aveva.Core.Database.DbElement)">
            <summary>
                Raises the DSXPostDelete event.
            </summary>
            <param name="definition">The dictionary element defining the udet</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseDictionaryGetWorkPreEvent">
            <summary>
                Raises the DictionaryGetWorkPreEvent.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.RaiseDictionaryGetWorkPostEvent">
            <summary>
                Raises the DictionaryGetWorkPostEvent
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.EventRaised">
            <summary>
                keeps track of important state information
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.Changes(System.Object,Aveva.Core.Database.DbChangesEventArgs)">
            <summary>
                Manage all changes to raise post delete events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.PreGetWork(System.Object,Aveva.Core.Database.DbGetWorkChangesEventArgs)">
            <summary>
                Manages the getwork flag
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.PreUndo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
                notify listeners of pre delete events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.PreRedo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
                notify listeners of pre delete events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.HandlePreRawChanges(Aveva.Core.Database.DbRawChanges)">
            <summary>
                processes a RawChanges before the change and manage the UDA and UDET changes
            </summary>
            <param name="changes"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.PostGetWork(System.Object,Aveva.Core.Database.DbGetWorkChangesEventArgs)">
            <summary>
                Manage Etype Views when a GetWork is initiated, (create/change of UDA and UDET elements).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.PostUndo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
                Manage Etype Views when an Undo is initiated, (create/change of UDA and UDET elements).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.PostRedo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
                Manage Etype Views when a Redo is initiated, (create/change of UDA and UDET elements).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.HandlePostRawChanges(Aveva.Core.Database.DbRawChanges)">
            <summary>
                processes a RawChanges after the change and manage the UDA and UDET changes
            </summary>
            <param name="changes"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.HandleUserChanges(Aveva.Core.Database.DbUserChanges)">
            <summary>
                processes a UserChanges list and manage the UDA and UDET changes
            </summary>
            <param name="changes"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.StopUpdatingOfDBViews">
            <summary>
                This method stops DBViews from handling any UDET, UDA or DSX creation, deletion or changing.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UDTracker.ResumeUpdatingOfDBViews">
            <summary>
                This method restores DBViews handling of UDET, UDA or DSX creation, deletion and change. It also checks for new
                ones.
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.UDAsCompiled">
            <summary>
                Raised when the UDAs are compiled and after a GetWork that includes Dictionary content.
                Nb. the extra event is thrown because the information about change and creates is not available when the event is
                thrown before a get work
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.UDACreated">
            <summary>
                Raised when a UDA is created
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.UDAChanged">
            <summary>
                Raised when a UDA is changed
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.UDADeleted">
            <summary>
                Raised when a UDA is deleted.
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.UDETCreated">
            <summary>
                Raised when a UDET is created and usable
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.UDETChanged">
            <summary>
                Raised when a UDET is changed
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.UDETPreDelete">
            <summary>
                Raised when a UDET is deleted.
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.UDETPostDelete">
            <summary>
                Raised after a UDET has been deleted.
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.DSXCreated">
            <summary>
                Raised when a DSXOWN or DSXMBR is created
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.DSXChanged">
            <summary>
                Raised when a DSXOWN or DSXMBR is changed
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.DSXPreDelete">
            <summary>
                Raised before a DSXOWN or DSXMBR is deleted
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.DSXPostDelete">
            <summary>
                Raised before a DSXOWN or DSXMBR is deleted
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.DictionaryGetWorkPreEvent">
            <summary>
                Event raised if undertaking a GetWork that affects dictionary content.
                this is raised before any other events on this class relating to the Get work.
            </summary>
        </member>
        <member name="E:Aveva.Core.Database.View.UDTracker.DictionaryGetWorkPostEvent">
            <summary>
                Event raised if all GetWork events have been raised.  Not raised if there were no events for the dictionary db.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.UDTracker.Instance">
            <summary>
                singleton instance
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.UDTracker.InDictionaryGetWork">
            <summary>
                Indicates this tracker is in the middle of processing dictionary events.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.XPathExpression">
            <summary>
            XPath expression for working with Database Views
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.#cctor">
            <summary>
            Static constructor to provide a static navigator instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.DatabaseService_MDBClosed(System.Object,System.EventArgs)">
            <summary>
            Remove the navigator if the databases are closed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.DatabaseService_MDBOpened(System.Object,System.EventArgs)">
            <summary>
            Create a new navigator when the MDB is opened.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.CreateNavigator">
            <summary>
            Create the XML navigator for executing expressions
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.XPathExpression.m_defaultPseudos">
            <summary>
            private storage for which pseudo attributes to support in XPath expressions.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.AddAttsToEtype(Aveva.Core.Database.DbElementType,System.Collections.Generic.List{Aveva.Core.Database.DbAttribute})">
            <summary>
            Adds an element type to the default pseudos dictionary
            </summary>
            <param name="etype"></param>
            <param name="atts"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.#ctor(System.String,Aveva.Core.Database.View.ColumnResultType)">
            <summary>
            Constructor
            </summary>
            <param name="expression">The XPath expression string</param>
            <param name="type">The type of expression (element or boolean)</param>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.XPathExpression_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Watches for changes to ExpressionString and updates the XPath expression
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.#ctor(Aveva.Core.Database.View.XPathExpression)">
            <summary>
            Clone constructor
            </summary>
            <param name="exp">The expression to clone</param>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.ParseExpression">
            <summary>
            Parses the expression string and constructs the XPath expression instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.ParseDimension">
            <summary>
            Parses the dimension for the expression
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateElement(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElement@,System.String@)">
            <summary>
            Evaluates the expression to get a DbElement result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateElementArray(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElement[]@,System.String@)">
            <summary>
            
            </summary>
            <param name="refElement"></param>
            <param name="exprResult"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateBoolean(Aveva.Core.Database.DbElement,System.Boolean@,System.String@)">
            <summary>
            Evaluates the expression to get a boolean result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateBooleanArray(Aveva.Core.Database.DbElement,System.Boolean[]@,System.String@)">
            <summary>
            Evaluates the expression to get a boolean result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateDateTime(Aveva.Core.Database.DbElement,System.DateTime@,System.String@)">
            <summary>
            Evaluates the expression to get a DateTime result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateDirection(Aveva.Core.Database.DbElement,Aveva.Core.Geometry.Direction@,System.String@)">
            <summary>
            Evaluates the expression to get a Direction result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateDbDouble(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbDouble@,System.String@)">
            <summary>
            Evaluates the expression to get a double result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateDbDoubleArray(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbDouble[]@,System.String@)">
            <summary>
            Evaluates the expression to get a double result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The array result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateInteger(Aveva.Core.Database.DbElement,System.Int32@,System.String@)">
            <summary>
            Evaluates the expression to get an integer result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateIntegerArray(Aveva.Core.Database.DbElement,System.Int32[]@,System.String@)">
            <summary>
            Evaluates the expression to get an integer result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The array result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateOrientation(Aveva.Core.Database.DbElement,Aveva.Core.Geometry.Orientation@,System.String@)">
            <summary>
            Evaluates the expression to get an Orientation result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluatePosition(Aveva.Core.Database.DbElement,Aveva.Core.Geometry.Position@,System.String@)">
            <summary>
            Evaluates the expression to get a Position result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateString(Aveva.Core.Database.DbElement,System.String@,System.String@)">
            <summary>
            Evaluates the expression to get a string result
            </summary>
            <param name="refElement">The reference element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateAsString(Aveva.Core.Database.DbElement,System.String@,System.String@)">
            <summary>
            Evaluates the expression as a string.
            this may then be used to return a string or construct another object such as an Orientation
            </summary>
            <param name="refElement"></param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.ResultToString(System.Object,System.String@)">
            <summary>
            Takes the result of EvaluateObject and attempts to convert it to a string value
            </summary>
            <param name="exprResult">the expression result from EvaluateObject</param>
            <param name="obj"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.NavigatorFor(Aveva.Core.Database.DbElement@)">
            <summary>
            Method to get a navigator pointing at the right element
            throws an ApplicationException if the navigator can't be moved to the correct location.
            </summary>
            <param name="refElement"></param>
            <returns>A valid navigator pointing as the object given</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.EvaluateObject(Aveva.Core.Database.DbElement@,System.Object@,System.String@)">
            <summary>
            Gets the object result from evaluating the expression
            throws an ApplicationException is refElement is invalid, the navigator can't be moved or there is an
            exception while evaluating the expression.
            </summary>
            <param name="refElement">The element to evaluate the expression against</param>
            <param name="exprResult">The result of the expression</param>
            <param name="error">Any error messages</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.ParseTargetDbElementTypes(Aveva.Core.Database.DbElementType[])">
            <summary>
            Attempts to determine the potential Element types of element results for this expression
            </summary>
            <param name="srcTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.ParseTargetDbElementTypes(System.String,System.Collections.Generic.IEnumerable{Aveva.Core.Database.DbElementType})">
             <summary>
            
             </summary>
             <param name="expr">The XPath expression string</param>
             <param name="srcTypes"></param>
             <returns>The list of types calculated</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.SplitExpression(System.String)">
            <summary>
            trims the first navigational token from an expression.
            Nb this simply splits the part before an axis
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XPathExpression.SplitExpressionToken(System.String,System.String@,System.String[]@)">
            <summary>
            splits a token into it axis and condition parts
            </summary>
            <param name="expr"></param>
            <param name="axis"></param>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.XPathExpression.DefaultPseudos">
            <summary>
            Temporary work around until pseudo attributes on normal elements behave.
            Some of the pseudo aren't listed in PSATTS, others are but it would be inefficient to enable pseudos for all navigation.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.XPathExpression.ExpressionInstance">
            <summary>
            The expression object being managed.
            may be null.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.XPathExpression.IsValid">
            <summary>
            Indicates this expression instance is fit for use
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.XPathExpression.EXPTYPE">
            <summary>
            Indicates the syntax of the expression string
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.XPathExpression.DbAttribute">
            <summary>
            returns the attribute if the expression is just an attribute access/navigation
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.XPathExpression.Dimension">
            <summary>
            returns the dimension of the expression result if known
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.XmlDbViewDataSet">
            <summary>
            Provides methods for accessing the contents of one or more database views using XML and
            generating schemas to match. This class can be used to convetr the data using XSL or query it
            using XPath.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.#ctor(Aveva.Core.Database.View.DbViewSet)">
            <summary>
            Constructs an XmlDbViewDataSet instance.
            </summary>
            <param name="viewSet">  The DbViewSet to base it on.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.#ctor(Aveva.Core.Database.View.DbViewSet,System.Boolean,System.Boolean,System.Collections.Generic.List{Aveva.Core.Database.DbFormat})">
            <summary>
            Constructs an XmlDbViewDataSet instance.
            </summary>
            <param name="viewSet">  The DbViewSet to base it on.</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME
                                            values.</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even
                                          when referencesAsNames is true.</param>
            <param name="unitsOfMeasureDbFormats">The format objects used to format unit qualified values.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.#ctor(Aveva.Core.Database.View.DbViewSet,System.Boolean,System.Boolean,System.Collections.Generic.List{Aveva.Core.Database.DbFormat},System.Boolean)">
            <summary>
            Constructs an XmlDbViewDataSet instance
            </summary>
            <param name="viewSet"></param>
            <param name="referencesAsNames"></param>
            <param name="resolvableNames"></param>
            <param name="unitsOfMeasureDbFormats"></param>
            <param name="outputDateTimeAsLocal"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.#ctor(Aveva.Core.Database.View.DbView)">
            <summary>
            Constructs an XmlDbViewDataSet instance.
            </summary>
            <param name="view"> The DbView to base it on.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.#ctor(Aveva.Core.Database.View.DbView,System.Boolean,System.Boolean,System.Collections.Generic.List{Aveva.Core.Database.DbFormat})">
            <summary>
            Constructs an XmlDbViewDataSet instance.
            </summary>
            <param name="view"> The DbView to base it on.</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME
                                            values.</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even
                                          when referencesAsNames is true.</param>
            <param name="unitsOfMeasureDbFormats">The format objects used to format unit qualified values.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.#ctor(Aveva.Core.Database.View.DbView,System.Boolean,System.Boolean,System.Collections.Generic.List{Aveva.Core.Database.DbFormat},System.Boolean)">
            <summary>
            Constructs an XmlDbViewDataSet instance.
            </summary>
            <param name="view"></param>
            <param name="referencesAsNames"></param>
            <param name="resolvableNames"></param>
            <param name="unitsOfMeasureDbFormats"></param>
            <param name="outputDateTimeAsLocal"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.#ctor(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.DbView})">
            <summary>
            Constructs an XmlDbViewDataSet instance.
            </summary>
            <param name="dbviews">  The DbView instances to base it on.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.#ctor(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.DbView},System.Boolean,System.Boolean,System.Collections.Generic.List{Aveva.Core.Database.DbFormat})">
            <summary>
            Constructs an XmlDbViewDataSet instance.
            </summary>
            <param name="dbviews">  The DbView instances to base it on.</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME
                                            values.</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even
                                          when referencesAsNames is true.</param>
            <param name="unitsOfMeasureDbFormats">The format objects used to format unit qualified values.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.#ctor(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.DbView},System.Boolean,System.Boolean,System.Collections.Generic.List{Aveva.Core.Database.DbFormat},System.Boolean)">
            <summary>
            Constructs an XmlDbViewDataSet instance.
            </summary>
            <param name="dbviews">  The DbView instances to base it on.</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME
                                            values.</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even
                                          when referencesAsNames is true.</param>
            <param name="unitsOfMeasureDbFormats">The format objects used to format unit qualified values.</param>
            <param name="outputDateTimeAsLocal">    Outputs date time fields using local time.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.ImportToDbs(System.String)">
            <summary>
            imports a given file into the database Errors are reported through the logManager since Xml
            errors may be raised. TODO align with XML library import structures. TODO how do we recognise
            warnings?
            </summary>
            <param name="filename"> Filename of the file.</param>
            <returns>
            -1 for error, 0 for success, >0 for warnings.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.EditableColumns">
            <summary>
            The list of writeable columns for the navigator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.GenerateXsd(System.String)">
            <summary>
            This generates a schema file with the given filename that includes the view definitions as a
            dataset to match the output of the DbViewNavigator return false if unsuccessful, errors are
            logged to the DbViewLogger instance.
            </summary>
            <param name="xsdFilename">  The full pathname of the schema file to write.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.GenerateXsd(System.String,System.Boolean)">
            <summary>
            This generates a schema file with the given filename that includes the view definitions as a
            dataset to match the output of the DbViewNavigator return false if unsuccessful, errors are
            logged to the DbViewLogger instance.
            </summary>
            <param name="xsdFilename">  The full pathname of the schema file to write.</param>
            <param name="useDateTimeType">uses stringly typed date time fields, note : these won't validate
                                          for empty values.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.GenerateSchemaSet">
            <summary>
            Generates the schema document for the views in this instance.
            </summary>
            <returns>
            The schema set.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.MatchToDbs(System.Xml.XmlDocument)">
            <summary>
            Matches the dataset rows to database view elements.
            </summary>
            <param name="doc">  The document to match.</param>
            <returns>
            A mapping from XmlNodes in the given document to DbViewElements from the matched database
            views.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.UpdateDBViews(System.Collections.Generic.Dictionary{Aveva.Core.Database.View.DbView,System.Collections.Generic.List{Aveva.Core.Database.View.IColumn}}@,System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.Xml.XmlNode,Aveva.Core.Database.View.DbViewElement}@,Aveva.Core.Database.View.DbViewImportPermissions,System.Boolean)">
            <summary>
            Method that updates the DBViews from the XML. Extracted from ImportToDbs so it can be called twice.
            </summary>
            <param name="permittedChanges">Changes code is allowed to make</param>
            <param name="doc">XML Document to use</param>
            <param name="matchedElements">DBView elements that have been matched</param>
            <param name="permissions">User permissions</param>
            <param name="ignoreRules">can I ignore the Rules</param>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.ImportToDbs(System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.Xml.XmlNode,Aveva.Core.Database.View.DbViewElement},System.Collections.Generic.Dictionary{Aveva.Core.Database.View.DbView,System.Collections.Generic.List{Aveva.Core.Database.View.IColumn}})">
            <summary>
            TODO provide permitted changes, stick to current limited implementation
            
            TODO communicate limitation to Mac et al and ensure UI doesn't support more than one sheet
            from a single view/DbElementType.
            </summary>
            <param name="doc">  .</param>
            <param name="matchedElements">  .</param>
            <param name="permittedChanges"> .</param>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.ImportToDbs(System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.Xml.XmlNode,Aveva.Core.Database.View.DbViewElement},System.Collections.Generic.Dictionary{Aveva.Core.Database.View.DbView,System.Collections.Generic.List{Aveva.Core.Database.View.IColumn}},Aveva.Core.Database.View.DbViewImportPermissions,System.Boolean)">
            <summary>
            TODO provide permitted changes, stick to current limited implementation
            
            TODO communicate limitation to Mac et al and ensure UI doesn't support more than one sheet
            from a single view/DbElementType.
            </summary>
            <param name="doc">  .</param>
            <param name="matchedElements">  .</param>
            <param name="permittedChanges"> .</param>
            <param name="permissions">User permissions</param>
            <param name="ignoreRules">TODO</param>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.ImportToDbsAsync(System.Xml.XmlDocument,Aveva.Core.Database.View.DbView,System.Collections.Generic.Dictionary{Aveva.Core.Database.View.DbView,System.Collections.Generic.List{Aveva.Core.Database.View.IColumn}},System.Collections.Generic.Dictionary{System.Xml.XmlNode,Aveva.Core.Database.View.DbViewElement},Aveva.Core.Database.Xml.ImportOptions)">
            <summary>
            Import the source file using asynchronous task-based workflow
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.CreateNavigator">
            <summary>
            Returns an XPathNavigator for use with XSL or XPath queries.
            </summary>
            <returns>
            The new navigator.
            </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.CheckElementType(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElementType[])">
            <summary>
            check the element type for the element given is one of the types in the given list
            </summary>
            <param name="element"></param>
            <param name="etypes"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.GenerateSchemaDocument(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.DbView})">
            <summary>
            Create an outline schema as an XmlDocument to contain the view dataset definitions
            </summary>
            <returns>The created schema as an XmlDocument</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XmlDbViewDataSet.GenerateSchemaDocument(System.Collections.Generic.IEnumerable{Aveva.Core.Database.View.DbView},System.Boolean)">
            <summary>
            Create an outline schema as an XmlDocument to contain the view dataset definitions
            </summary>
            <param name="useDateTimeType">output datetime attributes with the Datetime type, note : empty values will not validate</param>
            <param name="views">The views to generate the schema for</param>
            <returns>The created schema as an XmlDocument</returns>
        </member>
        <member name="T:Aveva.Core.Database.View.XmlDbViewDataSet.ImportOperation">
            <summary>
            Helper struct to hold the operations that we need to do for the import.
            Used in ImportToDbs directly bellow.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.XslExtension">
            <summary>
            Extension functions for XSL processing using the DbViewNavigator class
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.XslExtension.DefaultNamespace">
            <summary>
            The default namespace the extension object is accessed by
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.ColumnDescription(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            The description of the column referenced by the given iterator
            </summary>
            <param name="column">The Navigator referencing a database view column to get the description of</param>
            <returns>string.Empty if the navigator doesn't refer to a column</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.ColumnDimension(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            The dimension of the column referenced by the given iterator
            </summary>
            <param name="column">The Navigator referencing a database view column to get the dimension of</param>
            <returns>string.Empty if the navigator doesn't refer to a column</returns>		
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.ColumnIsArray(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Returns whether or not the type of column is array based
            </summary>
            <param name="column">The Navigator referencing a database view column to get the dimension of</param>
            <returns>false if the navigator doesn't refer to a column, or the column type isn't array based</returns>		
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.ColumnName(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            The unique name of the column
            </summary>
            <param name="column">The Navigator referencing a database view column to get the unique name from</param>
            <returns>string.Empty if the navigator doesn't refer to a column</returns>		
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.ColumnType(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            The system type of the column values or array items
            </summary>
            <param name="column">The Navigator referencing a database view column to get the type information from</param>
            <returns>string.Empty if the navigator doesn't refer to a column, otherwise the system type of the column values/array values</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.DecodeLocalName(System.String)">
            <summary>
            Returns the decoded version of a XML element/attribute name
            </summary>
            <param name="xmlname"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.EncodeLocalName(System.String)">
            <summary>
            Returns the encoded version for an XML Element/attribute name
            </summary>
            <param name="dbname"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.GetDbDoubleValue(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Gets the double value for a Unit qualified column
            </summary>
            <param name="column">The Navigator referencing a database view column to get the type information from. this doesn't work for array values</param>
            <returns>Nan if the column isn't a double column</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.GetDbDoubleUnits(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Gets the units label for a Unit qualified column
            </summary>
            <param name="column">The Navigator referencing a database view column to get the type information from. this doesn't work for array values</param>
            <returns>The units label for the colum or string.Empty</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.GetDbDoubleValue(System.Xml.XPath.XPathNodeIterator,System.Int32)">
            <summary>
            Gets the double value for an array item in a Unit qualified column
            </summary>
            <param name="column">The Navigator referencing a database view column to get the type information from.</param>
            <param name="index">The index of the array item to get the value for, Nb 1 based indexing</param>
            <returns>Nan if the column isn't a double column</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.GetDbDoubleUnits(System.Xml.XPath.XPathNodeIterator,System.Int32)">
            <summary>
            Gets the units label for an array item in a Unit qualified column
            </summary>
            <param name="column">The Navigator referencing a database view column to get the type information from.</param>
            <param name="index">The index of the array item to get the value for, Nb 1 based indexing</param>
            <returns>The units label for the colum or string.Empty</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.NAME(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Gets the name of element(s) referenced by a column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.XslExtension.REF(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Gets the REFs of element(s) referenced by a column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Database.View.UI.CreateElementDialog">
            <summary>
            Dialog to request information for element creation from the user
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.CreateElementDialog.m_infoSet">
            <summary>
            The infoSet being worked on
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.CreateElementDialog.m_displayInfoSet">
            <summary>
            The infoSet to display
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.CreateElementDialog.m_handler">
            <summary>
            change handler for refreshing the property grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.CreateElementDialog.#ctor">
            <summary>
            Default constructor, do not use
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.CreateElementDialog.#ctor(Aveva.Core.Database.View.CreateInformationSet)">
            <summary>
            Constructor that takes the infoset to work with
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.CreateElementDialog.m_infoSet_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Refresh the grid when a value changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.CreateElementDialog.m_back_Click(System.Object,System.EventArgs)">
            <summary>
            Close the dialog with Ok status
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.CreateElementDialog.m_next_Click(System.Object,System.EventArgs)">
            <summary>
            Close the dialog with Ok status
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.CreateElementDialog.m_cancel_Click(System.Object,System.EventArgs)">
            <summary>
            Close the dialog with Cancel status
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.CreateElementDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.CreateElementDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.CreateElementDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.UI.DisplayCreateInfoSet">
            <summary>
            An ICustomTypeDescriptor base class for wrapping IDefinitionItems to help with property display/edit
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoSet.#ctor">
            <summary>
            Default constructor hidden, Do not call.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoSet.#ctor(Aveva.Core.Database.View.CreateInformationSet,Aveva.Core.Database.View.CreateInformationType[])">
            <summary>
            Constructor
            </summary>
            <param name="infoSet">The create information to present</param>
            <param name="citypes">The types of create information to display as properties</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoSet.ci_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Pass change events on
            </summary>
            <param name="sender">The CreateInfo that has changed its value.</param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoSet.RaisePropertyChanged(Aveva.Core.Database.View.CreateInformation)">
            <summary>
            Raises property changed when requested
            </summary>
            <param name="ci">The createInfo to raise the change event for</param>
        </member>
        <member name="E:Aveva.Core.Database.View.UI.DisplayCreateInfoSet.PropertyChanged">
            <summary>
            INotifyPropertyChanged event
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.UI.DisplayCreateInfoSet.Properties">
            <summary>
            generates the collection of properties when first accessed from the DbAttribute definitions
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.UI.DisplayCreateInfoSet.CreateInfoSet">
            <summary>
            Gets the wrapped CreateInfoSet instance.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor">
            <summary>
            Nb these canbe shared for different CreateInfoSet instances but are only applicable to a single instance.
            i.e. you can't display several sets in a single grid.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.m_ciset">
            <summary>
            The set the information item belongs to
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.m_ci">
            <summary>
            The info being described
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.m_key">
            <summary>
            the name of this property
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.m_type">
            <summary>
            the type of the property
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.#cctor">
            <summary>
            ensure 'UNSET' isn't displayed for null values.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.#ctor(Aveva.Core.Database.View.CreateInformationSet,Aveva.Core.Database.View.CreateInformation,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="infoset">The set of information this property descriptor is relevant to</param>
            <param name="ci">The information to represent</param>
            <param name="key">The unique name for the property</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.CreateAttributes(Aveva.Core.Database.View.CreateInformationSet,Aveva.Core.Database.View.CreateInformation)">
            <summary>
            Create the attributes for the property descriptor
            </summary>
            <param name="infoset">The information set being displayed</param>
            <param name="ci">The Create information record to create it from</param>
            <returns>The set of attributes</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.GetValue(System.Object)">
            <summary>
            Gets the value for a given CreateInfoSet
            </summary>
            <param name="obj">The CreateInfoSet to get the information value for</param>
            <returns>The value for this info record</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the column value for a given DbViewElement
            Notes :-
            - throws PDMSException if the value can't be set in the database.
            </summary>
            <param name="obj">The DbViewElement to set the value of</param>
            <param name="value">The value to set it to.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.ResetValue(System.Object)">
            <summary>
            Equivalent to SetAttributeDefault for an attribute.
            </summary>
            <param name="obj">The dbViewElement to reset the column value on</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.CanResetValue(System.Object)">
            <summary>
            True if the column is not readonly
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Determines whether to indicate the value is the same as the default or different
            returns true if no default is set or if the value is different to the default.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.AllowedValues">
            <summary>
            provides the allowed values and their descriptions for the current property
            </summary>
            <returns>An IEnumerable of the allowed values - null if it can't get the allowed values</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.SuggestedValues">
            <summary>
            provides the suggested values and their descriptions for the current property
            </summary>
            <returns>An IEnumerable of the suggested values - null if it can't get the suggestted values</returns>	
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.GetDbType(System.Collections.ArrayList)">
            <summary>
                Get selected DbTypes
            </summary>
            <param name="dbTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.GetDbTypes(System.Collections.ArrayList,System.Collections.ArrayList@)">
            <summary>
                Get list of db-types which are valid for selected DbElementTypes
            </summary>
            <param name="elementTypes"></param>
            <param name="dbTypes"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.GetUdaDefinition(Aveva.Core.Database.DbAttribute)">
            <summary>
                Get DBelement list which define uda attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.GetDbElementTypes(Aveva.Core.Database.DbElementType,Aveva.Core.Database.DbAttribute,System.Collections.ArrayList@)">
            <summary>
                Get reference types
            </summary>
            <param name="dbElementType"></param>
            <param name="dbAttr"></param>
            <param name="elementTypes"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.GetDbElementTypes(Aveva.Core.Database.DbElement,Aveva.Core.Database.DbElementType,System.Collections.ArrayList@)">
            <summary>
                Get reference types
            </summary>
            <param name="attrDef"></param>
            <param name="dbElementType"></param>
            <param name="elementTypes"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.GetAllBoundTypes(Aveva.Core.Database.DbElementType,System.Collections.ArrayList@)">
            <summary>
                Get all bound types for type of element
            </summary>
            <param name="elType"></param>
            <param name="lst"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.DefaultValueAsString(System.Object)">
            <summary>
            Converts the default value to a string
            Only supports the following types: bool, double, int, DbDouble (and string)
            Does not support arrays types
            </summary>
            <param name="defaultValueObject">System object that represents the default value</param>
            <returns>Default value represented as a string</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.IsReadOnly">
            <summary>
            indicates the information is readonly
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.ComponentType">
            <summary>
            CreateInfoSet type
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.CreateInfoSet">
            <summary>
            The information set this property descriptor has been created for.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.UI.DisplayCreateInfoDescriptor.Converter">
            <summary>
            provide a type converter to enable use in a propertyGrid
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.UI.ExtPropertyGrid">
            <summary>
            Extended PropertyGrid to support standard navigation behaviour
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ExtPropertyGrid.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ExtPropertyGrid.ExtPropertyGrid_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Select the first property wehen first shown, otherwise alphabetically selected.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ExtPropertyGrid.ExtPropertyGrid_PropertyValueChanged(System.Object,System.Windows.Forms.PropertyValueChangedEventArgs)">
            <summary>
            Handle Property changed events and move to the next property
            </summary>
            <param name="s"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ExtPropertyGrid.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Processes key presses to ensure navigation is as expected
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ExtPropertyGrid.SelectFirstTabControl">
            <summary>
            Selects the first tabbable control within a control, nb doesn't support nesting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ExtPropertyGrid.SelectNextTabControl">
            <summary>
            Selects the next visible, tabbable control within a control, nb doesn't support nesting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ExtPropertyGrid.SelectPreviousTabControl">
            <summary>
            Selects the first tabbable control within a control, nb doesn't support nesting.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Database.View.UI.AllowedValuesEditor">
            <summary>
            Simple editor for allowed value lists of strings
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.AllowedValuesEditor.m_editorService">
            <summary>
            The service used for managing the drop down
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.AllowedValuesEditor.m_currentItem">
            <summary>
            The current item that is being edited.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.AllowedValuesEditor.m_itemSelected">
            <summary>
            The value is only considered to be edited if this is true.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Uses a standard ListBox control to select the property
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>The new value of the object.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesEditor.gridView_CellClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Close the drop down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>		
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesEditor.gridView_RowsAdded(System.Object,System.Windows.Forms.DataGridViewRowsAddedEventArgs)">
            <summary>
            select the current value row when first initialised.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesEditor.gridView_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle Enter and escape key presses
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesEditor.gridView_ColumnAdded(System.Object,System.Windows.Forms.DataGridViewColumnEventArgs)">
            <summary>
            Hide the description column if no descriptions
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns the drop-down style
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns>The drop-down style </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesEditor.GetCurrentItem(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Derived classes must override this to return the string value of the current item.
            This will be the initially selected item in the drop-down.
            Note that GetStringItems() is called before GetCurrentItem().
            </summary>
            <param name="context">The ITypeDescriptorContext passed to EditValue.</param>
            <returns>A string that is the current item, null or blank if there is not current item</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ArrayEditor.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ArrayEditor.CreateInstance(System.Type)">
            <summary>
            Creates a new instance for the array
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ArrayEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Call initially to set the value to edit
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ArrayEditor.SetItems(System.Object,System.Object[])">
            <summary>
            converts the display objects to the value being edited
            </summary>
            <param name="editValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ArrayEditor.GetItems(System.Object)">
            <summary>
            converts the source item to the display items
            </summary>
            <param name="editValue"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ArrayEditor.GetDisplayText(System.Object)">
            <summary>
            Gets the string representation of the item
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ArrayEditor.CheckSize(System.Int32)">
            <summary>
            Enables or Disables the Add button if the maximum size is reached.
            </summary>
            <param name="currentSize">The current size of the collection being edited</param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ArrayEditor.m_addButton_EnabledChanged(System.Object,System.EventArgs)">
            <summary>
            Nb the add button is regularly enabled after being clicked so this sets
            it back to being disabled when the editor re-enables it
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ArrayEditor.CreateCollectionForm">
            <summary>
            Get hold of the add and remove buttons in order to disable/enable the add button
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.ArrayEditor.m_removeButton_Click(System.Object,System.EventArgs)">
            <summary>
            Enable the add button if an item is removed.
            NB unfortunately no easy way to check the remove was successful.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Aveva.Core.Database.View.UI.ArrayEditor.Config">
            <summary>
            The DbForconfigmat object used to determine display for values
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.UI.ArrayEditor.AllowedValues">
            <summary>
            The list of allowed values for each array item
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.UI.ArrayEditor.MaximumArraySize">
            <summary>
            -1 means not set, unbounded
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayItem.AllowedValues">
            <summary>
            The list of values that are permitted
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.DisplayItem.ToString">
            <summary>
            returns the value as the string representation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Database.View.UI.DisplayItem.Item">
            <summary>
            The value wrapped by this display object
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.UI.AllowedValuesArrayEditor">
            <summary>
            Simple editor for allowed value lists of strings
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.AllowedValuesArrayEditor.m_editorService">
            <summary>
            The service used for managing the drop down
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.AllowedValuesArrayEditor.m_currentItem">
            <summary>
            The current item that is being edited.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.UI.AllowedValuesArrayEditor.m_itemSelected">
            <summary>
            The value is only considered to be edited if this is true.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesArrayEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Uses a standard ListBox control to select the property
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>The new value of the object.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesArrayEditor.gridView_CellClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Close the drop down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>		
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesArrayEditor.gridView_RowsAdded(System.Object,System.Windows.Forms.DataGridViewRowsAddedEventArgs)">
            <summary>
            select the current value row when first initialised.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesArrayEditor.gridView_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle Enter and escape key presses
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesArrayEditor.gridView_ColumnAdded(System.Object,System.Windows.Forms.DataGridViewColumnEventArgs)">
            <summary>
            Hide the description column if no descriptions
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesArrayEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns the drop-down style
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns>The drop-down style </returns>
        </member>
        <member name="M:Aveva.Core.Database.View.UI.AllowedValuesArrayEditor.GetCurrentItem(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Derived classes must override this to return the string value of the current item.
            This will be the initially selected item in the drop-down.
            Note that GetStringItems() is called before GetCurrentItem().
            </summary>
            <param name="context">The ITypeDescriptorContext passed to EditValue.</param>
            <returns>A string that is the current item, null or blank if there is not current item</returns>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewUpdater">
            <summary>
            Updater interface
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewUpdater.UpdateDatabaseAsync(System.Xml.XmlDocument,Aveva.Core.Database.View.DbView,System.Collections.Generic.IList{Aveva.Core.Database.View.DbViewElementNode},System.Collections.Generic.IList{Aveva.Core.Database.View.DbViewElementNode},System.Collections.Generic.Dictionary{Aveva.Core.Database.View.DbView,System.Collections.Generic.List{Aveva.Core.Database.View.IColumn}},Aveva.Core.Database.Xml.ImportOptions)">
            <summary>
            Update the database in an asynchronous way.
            <param name="doc">.</param>
            <param name="view">.</param>
            <param name="plainNodes">adasd.</param>  
            <param name="permittedChanges">.</param>
            <param name="dsxNodes">dsad.</param>
            <param name="options">dsada.</param>        
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewUpdater.ReportMessage(Aveva.Core.Database.Xml.LOGRECORDTYPE,System.String)">
            <summary>
            Report a message of the given severity 
            <param name="type">dsada.</param>
            <param name="message">dsada.</param>
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewDocument">
            <summary>
            Wrapper class to enable transformation of database elements using XSLT
            Nb schemas cannot be generated currently for files containing pseudo attributes.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewDocument.dbUpdater">
            <summary>
            The component responsible for updating the database.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewDocument.#ctor(System.Xml.XmlDocument,Aveva.Core.Database.View.DbView,System.Collections.Generic.Dictionary{Aveva.Core.Database.View.DbView,System.Collections.Generic.List{Aveva.Core.Database.View.IColumn}})">
            <summary>
            Constructs a document based DbDocument from an XML Document
            </summary>
            <param name="doc">The Xml Document to create a DbDocument from</param>
            <param name="dbView">.</param>
            <param name="permittedChanges">.</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewDocument.CreateXmlDocument(System.Xml.XmlDocument,Aveva.Core.Database.View.DbView,System.Collections.Generic.List{Aveva.Core.Database.View.IColumn})">
            <summary>
            This method is used for constructing the xml document as like element mode while import excel file in DBView mode.
            This xml document will not contain the Distributed attributes.
            TODO: If DBView contains the OWNEREXPRESTION, we need to add the OWNER to XMLElement.
            </summary>
            <param name="doc"></param>
            <param name="dbView"></param>
            <param name="changeAtts"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewDocument.CreateEmptyDocument">
            <summary>
            Creating empty xml document
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewDocument.DoDbUpdatesAsync(Aveva.Core.Database.Xml.ImportOptions)">
            <summary>
            This function collects valid candidates for updating the database. 
            The delete operation is not performed here. 
            Nodes that represent components of the Distributed Attribute framework are processed separately.
            This method can be executed asynchronously.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewDocument.Resolve(System.String)">
            <summary>
            uses the initial element references and names to resolve a given reference value
            or array of references
            </summary>
            <param name="refOrNameAtt">The reference attribute to resolve</param>
            <returns>the resolved reference attribute</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewDocument.ResolveNode(System.String)">
            <summary>
            uses the initial element references and names to resolve a given reference value to an XmlNode
            </summary>
            <param name="refOrNameAtt">The single reference to resolve</param>
            <returns>the resolved reference</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewDocument.Updater">
            <summary>
            The component responsible for updating the database.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewDocument.Document">
            <summary>
            The XML document wrapped by this DbDocument instance
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewDocument.View">
            <summary>
            The XML document wrapped by this DbDocument instance
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewDocument.PermittedChanges">
            <summary>
            The XML document wrapped by this DbDocument instance
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewDocument.NamespaceManager">
            <summary>
            The Namespace Manager for the current XmlDocument
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewElementNode">
            <summary>
            This class provides methods to correlate, update and delete database contents
            given an XmlNode from an XMLDabacon DbDocument XML document.
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementNode.#ctor(System.Xml.XmlNode,Aveva.Core.Database.View.DbViewDocument,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="node">the XmlNode to wrap</param>
            <param name="dbDocument">The DbDocument this nod is part of</param>
            <param name="useNAMEForMatching">If false then the NAME attribute and OWNER attributes are not used for matching elements, assumes data is already matched and REFs set</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewElementNode.GetXmlAttributeValue(System.String,System.String)">
            <summary>
            returns String.Empty or the value of the named attribute.
            </summary>
            <param name="attName">the name of the attribute to retrieve from the XML node.</param>
            <param name="namespaceURI">the namespace of the attribute to retrieve, or String.Empty</param>
            <returns>String.Empty or the attribute value</returns>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.XmlNode">
            <summary>
            The XmlNode that this DbElementNode wraps
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.IsDistributedElement">
            <summary>
            Returns true if the node type is a distributed element
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.NAME">
            <summary>
            Provides access to the value of the NAME attribute in the XmlNode
            Nb this is likely to be a 'load only' temporary name.
            The NAME is used for referential integrity of the source file.
            If a users wishes to be something else then it may not be possible to retain referential integrity during the load and fulfill the user requirements.
            For this reason NAME is provided as the initial referentially sound attribute while name is the users request.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.DBREF">
            <summary>
            Provides access to the value of the DBREF attribute in the XmlNode
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.OWNER">
            <summary>
            Provides access to the value of the OWNER attribute in the XmlNode
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.ACTTYPE">
            <summary>
            Provides access to the ACTTYPE from the XmlNode (string.Empty or ACTTYPE attribute)
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.IsUDET">
            <summary>
            Checks the namespace of the XmlNode to determine whether or not the element is a UDET
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.CaseQualifiers">
            <summary>
            Returns a list of Case qualifiers for the current node.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.BaseAttributes">
            <summary>
            Returns the set of attributes and values from the base item
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.ActualTypeFromXml">
            <summary>
            Returns the element type for this node derived purely from the wrapped XML object.
            This may return null if the type cannot be derived.
            The type returned is the base type for the element and not the actual type.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.DbElementTypeFromXml">
            <summary>
            Returns the element type for this node derived purely from the wrapped XML object.
            This may return null if the type cannot be derived.
            The type returned is the base type for the element and not the actual type.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.TYPE">
            <summary>
            Provides access to the TYPE from the XmlNode (LocalName or TYPE attribute)
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.DbTypes">
            <summary>
            The list of database types that this element may be stored in.
            Nb this is based on its TYPE.
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewElementNode.IsNewElement">
            <summary>
            Returns true if the element is new (not created yet). This is based on the dbref being empty.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewImportPermissions">
            <summary>
            This class hold the import permissions whether a user can create new/update existing elements using DbView import mode. 
            By default, user can create new and also update existing elements unless these permissions are set explicitly
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewImportPermissions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewImportPermissions.CanCreateNew">
            <summary>
            Gets or sets whether user can create new elements using AcceptReject dialog
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewImportPermissions.CanUpdate">
            <summary>
            Gets or sets whether user can update the attributes of the elements using AcceptReject dialog
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewIONet">
            <summary>
            PML Callable wrapper for Views IO functionality
            Shares approach, common code and resources with Aveva.Core.Database.Xml.XMLIONet
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewIONet.m_referencesAsNames">
            <summary>
            By default element references are output as ref values.
            These can be output as names instead
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewIONet.m_resolvableNames">
            <summary>
            If names are being output then unset values can either be output as refs (true),
            or they can be output as expressions e.g. SCFITTING of /segment1 (false)
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewIONet.m_outputDateTimeAsLocal">
            <summary>
            If true then Datetime fields are output in the local time zone.
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DbViewIONet.m_unitsOfMeasureDbFormats">
            <summary>
            The formats to use for each dimension
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.UnitsOfMeasureDbFormats(System.Collections.Generic.List{Aveva.Core.Database.DbFormat})">
            <summary>
            Sets the formats to use to output dimensioned attributes.  
            Nb 
            - only allows configuration per dimension and not per attribute
            - only affects export
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.UnitsOfMeasureDbFormats(System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            Sets the formats to use to output dimensioned attributes.  
            Nb 
            - only allows configuration per dimension and not per attribute
            - only affects export
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.LoadXSL(System.String)">
            <summary>
            Loads the stylesheet requested into this instance for use by the Transform methods.
            If cal isn't made to this method before doing transforms then the %AVEVA_DESIGN_EXE%/copy.xsl is used.
            </summary>
            <param name="xslFilename">the filename of the stylesheet to load</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.Assign(Aveva.Core.Database.View.DbViewIONet)">
            <summary>
            Default method
            </summary>
            <param name="that"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.RaiseResponse(System.Collections.ArrayList)">
            <summary>
            Passes information back to PML via events.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.TransformView(System.String,System.String)">
            <summary>
            Transforms the specified Database View using the loaded stylesheet and writes the output to a given file.
            </summary>
            <param name="viewName">The name of the DatabaseView to transform</param>
            <param name="outputfilename">The name of the file to create</param>
            <returns>true if the file was written successfully, false on error.</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.TransformViews(System.Collections.Hashtable,System.String)">
            <summary>
            Transforms a set of database views using the loaded stylesheet and writes the output to a given file.
            </summary>
            <param name="viewNames">A PML array with the names of the database views to transform</param>
            <param name="outputfilename">The name of the file to create</param>
            <returns>true if the file was written successfully, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.TransformViews(System.Collections.Hashtable,System.String,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            Transforms the named database views using the loaded stylesheet and writes the output to a given file.
            </summary>
            <param name="viewNames">The names of the database views to transform</param>
            <param name="outputfilename">The name of the file to create</param>
            <param name="argNames">The names of any arguments to pass to the stylesheet</param>
            <param name="argValues">The values of the arguments to pass to the stylesheet</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.CreateXSDForView(System.String,System.String)">
            <summary>
            Creates an XSD file for the named database view, matches the output using the Copy stylesheet
            </summary>
            <param name="viewName">The name of the database view to include in the schema</param>
            <param name="schemaFilename">The filename of the schema to create</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.CreateXSDForViews(System.Collections.Hashtable,System.String)">
            <summary>
            Creates an XSD file for the named views
            </summary>
            <param name="viewNames"></param>
            <param name="schemaFilename">The filename of the schema to create</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.ParseViewNames(System.Collections.Hashtable)">
            <summary>
            Gets the database views from the given database view names
            </summary>
            <param name="viewNames"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.ParseArgs(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            parses the given hashtables into an argument list
            </summary>
            <param name="argNames"></param>
            <param name="argValues"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.String)">
            <summary>
            performs the transform
            </summary>
            <param name="doc"></param>
            <param name="args"></param>
            <param name="outputfilename"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.ImportFile(System.String)">
            <summary>
            To import a xml file
            </summary>
            <param name="fileName">Xml File Name</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewIONet.LogEventToConsole(System.Object,Aveva.Core.Database.Xml.LogEventArgs)">
            <summary>
            Writes a given log event to the pml window
            </summary>
            <param name="sender">the object raising the log event</param>
            <param name="eventargs">the log event arguments</param>
        </member>
        <member name="E:Aveva.Core.Database.View.DbViewIONet.Response">
            <summary>
            Event to handle the callbacks
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewIONet.ReferencesAsNames">
            <summary>
            If set to true then Reference attributes are output as NAMEs instead of REFs
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewIONet.ResolvableNames">
            <summary>
            If set to true then Reference attributes are output as resolvable values even if unnamed.
            ie. a reference to an unnamed item will be output using the REF
            </summary>
        </member>
        <member name="P:Aveva.Core.Database.View.DbViewIONet.OutputDateTimeAsLocal">
            <summary>
            If set to true then DateTime attributes are output in the local time zone.
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DbViewSetsNet">
            <summary>
            Wrapper for providing a PML interface onto the DbViewSets instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.RaiseResponse(System.Collections.Generic.List{System.String})">
            <summary>
            Passes information back to PML via events.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.LogEventToConsole(System.Object,Aveva.Core.Database.Xml.LogEventArgs)">
            <summary>
            Writes a given log event to the pml window
            </summary>
            <param name="sender">the object raising the log event</param>
            <param name="eventargs">the log event arguments</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.Assign(Aveva.Core.Database.View.DbViewSetsNet)">
            <summary>
            Default method
            </summary>
            <param name="that"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.AddDefinitions(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns the names of all of the Database Views as values in the returned hashtable
            </summary>
            <param name="applicationName">The name of the application responsible for requesting the load.</param>
            <param name="setName">If left empty then this is loaded from the file</param>
            <param name="filename">The file containing the definitions to load</param>
            <param name="visible">Set to true to hide the loaded definitions from the user</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.RemoveDefinitions(System.String)">
            <summary>
            Removes a named Definition Set from the sets of managed database view definitions
            </summary>
            <param name="setName">The name of the definition set to remove.</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.AllDbViews">
            <summary>
            Returns the names of all of the Database Views as values in the returned hashtable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.AllDbViewSets">
            <summary>
            Returns the names of all of the Database View Sets as values in the returned hashtable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.AllDefinitionSets">
            <summary>
            Returns the names of all of the Definition Sets as values in the returned hashtable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.VisibleDbViews">
            <summary>
            Returns the names of all of the Visible Database Views as values in the returned hashtable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.VisibleDbViewSets">
            <summary>
            Returns the names of all of the visible Database View Sets as values in the returned hashtable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DbViewSetsNet.VisibleDefinitionSets">
            <summary>
            Returns the names of all of the Definition Sets as values in the returned hashtable
            </summary>
            <returns></returns>
        </member>
        <member name="E:Aveva.Core.Database.View.DbViewSetsNet.Response">
            <summary>
            Event to handle the callbacks
            </summary>
        </member>
        <member name="T:Aveva.Core.Database.View.DefinitionSetNet">
            <summary>
            Class to provide a PML interface onto the DefinitionSet class
            Notes:
            - If the definition set becomes invalid the wrapper drops its reference to the definition set to help with resource management
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSetNet.m_defSet">
            <summary>
            The wrapped definition set
            </summary>
        </member>
        <member name="F:Aveva.Core.Database.View.DefinitionSetNet.m_defSetChangedHandler">
            <summary>
            Handler to track changes to the IsValid property on the wrapped definition set
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.#ctor">
            <summary>
            Constructor.
            After construction call SetTo with the name of the definition set to wrap
            </summary>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.m_defSet_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Removes handlers and definitionset reference if a definition set becomes invalid.  
            This means the resources can be freed for the definition set
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.RaiseResponse(System.Collections.Generic.List{System.String})">
            <summary>
            Passes information back to PML via events.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.LogEventToConsole(System.Object,Aveva.Core.Database.Xml.LogEventArgs)">
            <summary>
            Writes a given log event to the pml window
            </summary>
            <param name="sender">the object raising the log event</param>
            <param name="eventargs">the log event arguments</param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.Assign(Aveva.Core.Database.View.DefinitionSetNet)">
            <summary>
            Default method
            </summary>
            <param name="that"></param>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.ApplicationName">
            <summary>
            The name of the application that is responsible for the definition set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.Changed">
            <summary>
            Indicates the definition set has changed since its contents were loaded or intialised
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.DefinitionSource">
            <summary>
            The type of source for the definitions
            </summary>
            <returns>See the DefinitionSource enumeration for values</returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.DbViews">
            <summary>
            The names of the Database Views within this definition set, indexed using "1.0", "2.0" etc
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.DbViewSets">
            <summary>
            The names of the Database View Sets within this definition set, indexed using "1.0", "2.0" etc
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.Description">
            <summary>
            The description of this definition set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.FileName">
            <summary>
            The filename of the file these definitions were loaded from.  May be an empty string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.IsValid">
            <summary>
            Indicates this definition set is currently managed and therefore usable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.Name">
            <summary>
            The name of this definition set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.ReadOnly">
            <summary>
            Indicates the definitions can/can't be changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.Save">
            <summary>
            Save this definition set (if file based)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.SaveAs(System.String)">
            <summary>
            Saves these definitions to a given file, overwrites the file if it already exists
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.SetTo(System.String)">
            <summary>
            Changes the definition set wrapped by this instance
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Database.View.DefinitionSetNet.Visible">
            <summary>
            Inidicates whether the definitions in this set are presented to the user.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Aveva.Core.Database.View.DefinitionSetNet.Response">
            <summary>
            Event to handle the callbacks
            </summary>
        </member>
    </members>
</doc>
