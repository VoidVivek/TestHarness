<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aveva.Core.Presentation.DataGrid</name>
    </assembly>
    <members>
        <member name="T:Aveva.Core.Presentation.DataGrid.AlphanumericComparer">
            <summary>
            Class to sort values in cells numerically
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.AlphanumericComparer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.AlphanumericComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer interface implementation method. Only method visible outside current class.
            </summary>
            <param name="x"> First value to compare </param>
            <param name="y"> Second value to compare </param>
            <returns> Integer indicating which value is greater than the other </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.AlphanumericComparer.Compare(System.String,System.String)">
            <summary>
            Private method to compare two values converted to strings
            </summary>
            <param name="s1"> First string value </param>
            <param name="s2"> Second string value </param>
            <returns> Integer indicating which value is greater than the other </returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ArraysComparer">
            <summary>
            Class used to perform custom sort comparisons when sorting rows by its column with Array data type.
            The values passed in the Compare method of the IComparer will be two UltraGridCell objects.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ArraysComparer.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="alphanumeric">If true then alphanumeric comparison will be applied.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ArraysComparer.Compare(System.Object,System.Object)">
            <summary>
            Implementation of Compare method.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of x and y.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ArraysComparer.Compare(Infragistics.Win.UltraWinGrid.UltraGridCell,Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Implementation of Compare method.
            </summary>
            <param name="x">The first cell to compare.</param>
            <param name="y">The second cell to compare.</param>
            <returns>
            A signed integer that indicates the relative values of x and y.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ArraysComparer.Compare(System.Array,System.Array)">
            <summary>
            Implementation of Compare method.
            </summary>
            <param name="x">The first cell to compare.</param>
            <param name="y">The second cell to compare.</param>
            <returns> A signed integer that indicates the relative values of x and y.</returns>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ArraysComparer.Alphanumeric">
            <summary>
            If true then alphanumeric comparison will be applied.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CellIdentity">
            <summary>
            This class encapsulates the elements of a cell identity as expressed
            by the Properties RowID and ColID on this object.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellIdentity.#ctor(System.Object,System.String)">
            <summary>
            Constructor for a CellIdentity.
            </summary>
            <param name="rowID">The row identity of the cell</param>
            <param name="colID">The column identity of the cell</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellIdentity.IsValid">
            <summary>
            Indicates if the RowID and ColID parameters appear to represent
            valid identities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellIdentity.Equals(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            This method implements the IEquitable interface
            </summary>
            <param name="otherCell">The Cell to compare against.</param>
            <returns>bool: true if the RowID and CellID properties of each
            CellIdentity are the same.</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellIdentity.GetHashCode">
            <summary>
            Serves as the custom hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CellIdentity.RowID">
            <summary>
            The row identity of the cell
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CellIdentity.ColID">
            <summary>
            The column identity of the cell
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CellEditCutCommand">
            <summary>
            CellEditCopyCommand.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditCutCommand.#ctor">
            <summary>
            CellEditCutCommand.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.CellEditCutCommand.Instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditCutCommand.Execute">
            <summary>
            Execute.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditCutCommand.GetState(System.String)">
            <summary>
            GetState.
            </summary>
            <param name="context">  .</param>
            <returns>
            The state.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditCutCommand.Refresh">
            <summary>
            Refresh command state.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CellEditCopyCommand">
            <summary>
            CellEditCopyCommand.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditCopyCommand.#ctor">
            <summary>
            CellEditCopyCommand.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.CellEditCopyCommand.Instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditCopyCommand.Execute">
            <summary>
            Execute.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditCopyCommand.GetState(System.String)">
            <summary>
            GetState.
            </summary>
            <param name="context">  .</param>
            <returns>
            The state.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditCopyCommand.Refresh">
            <summary>
            Refresh command state.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CellEditClearCommand">
            <summary>
            A cell edit clear command.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditClearCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.CellEditClearCommand.Instance">
            <summary>
            Class instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditClearCommand.Execute">
            <summary>
            Execute.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditClearCommand.GetState(System.String)">
            <summary>
            Get state.
            </summary>
            <param name="context">  .</param>
            <returns>
            The state.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditClearCommand.Refresh">
            <summary>
            Refresh command state.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.CellEditClearCommand.StartBatchUpdate">
            <summary>
            Start batch update
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.CellEditClearCommand.EndBatchUpdate">
            <summary>
            End batch update
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CellEditPasteCommand">
            <summary>
            CellEditPasteCommand
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditPasteCommand.#ctor">
            <summary>
            CellEditPasteCommand
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditPasteCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditPasteCommand.Refresh">
            <summary>
            Refresh command state
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditPasteCommand.GetState(System.String)">
            <summary>
            GetState
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CellEditFillUpCommand">
            <summary>
            CellEditFillUpCommand
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditFillUpCommand.#ctor">
            <summary>
            CellEditFillUpCommand
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditFillUpCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditFillUpCommand.GetState(System.String)">
            <summary>
            GetState
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.CellEditFillUpCommand.StartBatchUpdate">
            <summary>
            Start the update.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.CellEditFillUpCommand.EndBatchUpdate">
            <summary>
            End the update.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CellEditFillDownCommand">
            <summary>
            CellEditFillDownCommand
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditFillDownCommand.#ctor">
            <summary>
            CellEditFillDownCommand
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditFillDownCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellEditFillDownCommand.GetState(System.String)">
            <summary>
            GetState
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.CellEditFillDownCommand.StartBatchUpdate">
            <summary>
            Start the update.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.CellEditFillDownCommand.EndBatchUpdate">
            <summary>
            End the update.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CellSort">
            <summary>
            sort 2 grid cells on row and column index
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CellSort.Compare(System.Object,System.Object)">
            <summary>
            cellX less than cellY returns -ve integer,
            cellX = cellY returns 0
            cellX greater than cellY returns +ve integer,
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ColumnExcelFilterCommand">
            <summary>
            Summary description for ColumnExcelFilterCommand.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ColumnExcelFilterCommand.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnExcelFilterCommand.#ctor">
            <summary>
            ColumnExcelFilterCommand
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnExcelFilterCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnExcelFilterCommand.GetState(System.String)">
            <summary>
            GetState
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits">
            <summary>
            Manage column units button clicked.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UltraWinGrid.HeaderBase,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="UnitsButton"></param>
            <param name="ColumnHeader"></param>
            <param name="currentUnit"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.HandleUnitsButton(System.Collections.Generic.List{System.String})">
            <summary>
            Displays the appropriate units for the header that was clicked.
            </summary>
            <param name="units">  The list of units to display.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.GridWithUnits(System.Collections.Generic.List{System.String})">
            <summary>
            Show list with units
            </summary>
            <param name="unitsList"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.InitializeUnitGrid(Infragistics.Win.UltraWinGrid.UltraGrid)">
            <summary>
            Initialise list with units
            </summary>
            <param name="unitsGrid"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.unitsGrid_ClickCell(System.Object,Infragistics.Win.UltraWinGrid.ClickCellEventArgs)">
            <summary>
            Event when units on list is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>            
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.m_unitsButton">
            <summary>
            Unit button element
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.m_columnHeader">
            <summary>
            Column header with button units
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.m_currentUnit">
            <summary>
            Current unit for column
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.m_rowSelected">
            <summary>
            Row selected on list
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.m_unit">
            <summary>
            Selected unit
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.UnitSelected">
            <summary>
            Event when units selected.
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.Unit">
            <summary>
            Unit from list.
            </summary>
            <value>
            The unit.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.PrecisionBtnChosen">
            <summary>
            If the precision button was chosen.
            </summary>
            <value>
            true if precision button chosen, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ColumnHeaderUnits.ColumnHeader">
            <summary>
            Column header with units button.
            </summary>
            <value>
            The column header.
            </value>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ColumnSortCommand">
            <summary>
            Summary description for ColumnSortCommand.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ColumnSortCommand.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnSortCommand.#ctor">
            <summary>
            ColumnSortCommand
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnSortCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnSortCommand.GetState(System.String)">
            <summary>
            GetState
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ColumnSummariesCommand">
            <summary>
            Summary description for ColumnSummariesCommand.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnSummariesCommand.#ctor">
            <summary>
            ColumnSummariesCommand
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ColumnSummariesCommand.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnSummariesCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnSummariesCommand.GetState(System.String)">
            <summary>
            GetState
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridControl">
            <summary>
            A grid control that makes use of a tightly bound data source.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.MAX_EXCEL_COLUMN_COUNT">
            <summary>
            The limit of columns when export to excel (MaxExcelColumnCount )
            When limit is exceeded, columns will be truncated.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.defaultPrecision">
            <summary>
            The default unit of measure precision
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.m_layout">
            <summary>
            Stores the DataGridLayout associated with this DataGridControl.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.m_configuredLayoutColumns">
            <summary>
            Stores the configured layout columns which are printed/exported
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.m_events">
            <summary>
            The DataGridEvents objects associated with this DataGridControl.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.ultraGridExcelExporter">
            <summary>
            The excel exporter helper object used by this class.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.ultraPrintPreviewDialog">
            <summary>
            The print preview dialog used by this class.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.printCustomise">
            <summary>
            This class assists with black and white printing.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.ultraGridPrintDocument">
            <summary>
            The print document used by ultraPrintPreviewDialog
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.m_cellTransaction">
            <summary>
            The transaction used to manage a single cell update
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.m_multiCellTransaction">
            <summary>
            The transaction being used to manage a multi-cell update
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.CustomSummarySetting">
            <summary>
            Settings for custom summaries.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.databaseEventsHandled">
            <summary>
            If set on true then database events are handled by DataGridControl.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.mouseX">
            <summary>
            Mouse X position used for calculating cursor position when double-click between to column headers
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.mouseY">
            <summary>
            Mouse Y position used for calculating cursor position when double-click between to column headers
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.multiCellOperation">
            <summary>
            Indicate if time consuming operation
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.useAlternateRowColors">
            <summary>
            Alternate row colors for read only cells and pinned columns cells - set to true as default
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.keyPressForwardDirection">
            <summary>
            Gets the direction of cell selection after update end
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.currentUnitPerAttribute">
            <summary>
            The dictionary contains all the attributes that have a unit of measure and their respective unit of measure.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.register">
            <summary>
            The unit sets list register for this datagrid
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.#ctor">
            <summary>
            Simple Constructor.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.InitialiseLayout">
            <summary>
            This method initialises the UI layout of the DataGridControl.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.InitialiseEvents">
            <summary>
            Initialised the events object and sets up the necessary connections.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetReadOnlyColour">
            <summary>
            This method forces the grid's cell appearance readonly colour to the calue set in the
            GridLayout.ReadOnlyColour property.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SelectFirstCell(System.String)">
            <summary>
            Select first cell in grid.
            </summary>
            <param name="headerKey">    The header key.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.EndEditTransaction">
            <summary>
            To enable a transaction to be ended when setting values directly on the grid cells. This is
            required when an ObjectDisposedException is thrown by the set.  This occurs when the set
            action removes the row object from the data source.  The set operation itself is successful.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.AbortEditTransaction">
            <summary>
            To manage abort transaction outside of the grid when setting values directly on cells. If an
            exception is thrown, other than an ObjectDisposedException, then call this to abort the
            current transaction. NB this will set the MultiCellTransaction to null.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetVisibleColumns">
            <summary>
            Gets all visible columns as a list.
            </summary>
            <returns>
            The visible columns.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetSelectedVisibleRows">
            <summary>
            Gets all selected visible rows as a list.
            </summary>
            <returns>
            The selected visible rows.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ResertScrollRowIntoView">
            <summary>
            Scroll first row into view for allrow scroll regions.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.VisibleRowsInRegions">
            <summary>
            Returns list of visible rows in all scroll regions.
            </summary>
            <returns>
            A List&lt;VisibleRow&gt;
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.VisibleRowsOnScreen">
            <summary>
            Returns list of visible rows on screen.
            </summary>
            <returns>
            A List&lt;UltraGridRow&gt;
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.BeginUpdate">
            <summary>
            Begin update Grid control. To prevent on paint refresh problems with use grid beginupdate,
            there is a grid snapshot displayed instead of current grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.EndUpdate">
            <summary>
            End update Grid control. The grid control with snapshot is removed.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.UpdateData">
            <summary>
            Update Grid control data.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.OnAfterSortChange(System.Object,Infragistics.Win.UltraWinGrid.BandEventArgs)">
            <summary>
            This method is used to handle AfterSortChange events coming from the grid.
            </summary>
            <param name="sender">sender</param>
            <param name="e">eventsArgs</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.OnKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is used to handle KeyDown events coming from the grid.
            </summary>
            <param name="sender">Source of the KeyDown event being processed.</param>
            <param name="e">Args associated with the KeyDown event.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.OnDoubleClickCell(System.Object,Infragistics.Win.UltraWinGrid.DoubleClickCellEventArgs)">
            <summary>
            This method enables the user to enter into cell edit mode on a double click
            </summary>
            <param name="sender">Event source. Unused in this context.</param>
            <param name="e">Event arguments. Unused in this context.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is used to handle the mouse up events coming from the grid.
            </summary>
            <param name="sender">Source of the MouseUp event being processed.</param>
            <param name="e">Args associated with the MouseUp event.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DatabaseService_Changes(System.Object,Aveva.Core.Database.DbChangesEventArgs)">
            <summary>
            Refresh the grid when changes are reported
            </summary>
            <param name="sender">Event source. Unused in this context.</param>
            <param name="e">Event arguments. Unused in this context.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DatabaseService_PostRedo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
            Refresh the grid after redo
            </summary>
            <param name="sender">Event source. Unused in this context.</param>
            <param name="e">Event arguments. Unused in this context.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DatabaseService_PostUndo(System.Object,Aveva.Core.Database.DbUndoChangesEventArgs)">
            <summary>
            Refresh the grid after undo
            </summary>
            <param name="sender">Event source. Unused in this context.</param>
            <param name="e">Event arguments. Unused in this context.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DatabaseService_PostGetWork(System.Object,Aveva.Core.Database.DbGetWorkChangesEventArgs)">
            <summary>
            Refresh the grid after get work
            </summary>
            <param name="sender">Event source. Unused in this context.</param>
            <param name="e">Event arguments. Unused in this context.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GridRefreshAll">
            <summary>
            Performs full refresh of grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GridRefreshCases">
            <summary>
            Perform refresh of cases columns. It is used to enforce the refreshing of data if there are
            changes in the database related to case object.
            </summary>
            <returns>
            Returns true if there was anything to refresh/reevaluate.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.grid_DoubleClickHeader(System.Object,Infragistics.Win.UltraWinGrid.DoubleClickHeaderEventArgs)">
            <summary>
            Autoresize column when click between two column headers
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.grid_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Store mouse cursor position
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.grid_BeforeRowLayoutItemResized(System.Object,Infragistics.Win.UltraWinGrid.BeforeRowLayoutItemResizedEventArgs)">
            <summary>
            Occurs before resizing header
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.grid_BeforeGroupPosChanged(System.Object,Infragistics.Win.UltraWinGrid.BeforeGroupPosChangedEventArgs)">
            <summary>
            Occurs before group position is changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.grid_BeforeColPosChanged(System.Object,Infragistics.Win.UltraWinGrid.BeforeColPosChangedEventArgs)">
            <summary>
            Occurs before column position is changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.grid_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            To allow cell edit entry on first keypress.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.grid_BeforeEnterEditMode(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called before a cell enters edit mode.
            Shows long text editor for cell if it is necessary.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.grid_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse pointer is over the control and a mouse button is released
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.grid_MouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the control is clicked by the mouse
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.grid_BeforeColRegionScroll(System.Object,Infragistics.Win.UltraWinGrid.BeforeColRegionScrollEventArgs)">
            <summary>
            Event before grid column region is scrolled
            </summary>
            <param name="sender"> Ultragrid </param>
            <param name="e"> BeforeColRegionScrollEventArgs </param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ClearRowSelection">
            <summary>
            This method clears all row selection(s).
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DeactivateActiveRow">
            <summary>
            This method deactivates the active row.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SaveGridToExcel(System.String)">
            <summary>
            This method causes the grid to be saved to the specified excel filename.
            </summary>
            <param name="excelFile">    The filename into which to save the grid.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SaveGridToExcel(System.String,System.String)">
            <summary>
            This method causes the grid to be saved to the specified worksheet within the specified excel
            filename.
            </summary>
            <param name="excelFile">    The filename into which to save the grid.</param>
            <param name="worksheet">    The worksheet into which to save the grid.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SaveGridToExcel(System.String,System.String,System.String)">
            <summary>
            This method causes the grid to be saved to the specified worksheet within the specified excel
            filename. It will also write the given header string into the worksheet.
            </summary>
            <param name="excelFile">    The filename into which to save the grid.</param>
            <param name="worksheet">    The worksheet into which to save the grid.</param>
            <param name="strHeader">    The header string to write into the worksheet.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.PrintPreview">
            <summary>
            Shows the print preview dialog associated with this control.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCurrentUnit(System.String,Aveva.Core.Presentation.DataGrid.UnitOfMeasure)">
            <summary>
            Set the current unit for an attribute.
            </summary>
            <param name="key">  The key.</param>
            <param name="currentUnit">  The current unit.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetCurrentUnit(System.String)">
            <summary>
            Get the current unit for an attribute.
            </summary>
            <param name="key">  The key.</param>
            <returns>
            The current unit.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.StoreGridLayout">
            <summary>
            This method serialises the current Infragistics grid layout to an object.
            </summary>
            <returns>
            An object.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.LoadGridLayout(System.Object)">
            <summary>
            This method loads the current gridLayout object.
            </summary>
            <param name="gridLayout">   The grid object to load.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetCell(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            This method returns the cell value as a string for a given cell identity.
            </summary>
            <param name="cellID">   Identity of the desired cell.</param>
            <returns>
            object: The value of the cell at cellID.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetCellAsString(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            This method returns the cell value as a string for a given cell identity.
            </summary>
            <param name="cellID">   Identity of the desired cell.</param>
            <returns>
            string: The string value of the cell at cellID.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetSelectedCells">
            <summary>
            This method returns a list of the cell identities of the currently selected cells.
            </summary>
            <returns>
            List of CellIdentity: The identities of the selected cells.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetActiveCell">
            <summary>
            This method returns the cell identity of the current active cell.
            </summary>
            <returns>
            CellIdentity: The identity of the current active cell.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetActiveCellConfiguration">
            <summary>
            Returns the formatting configuration for the active cell. Nb will return null if no active
            cell in the grid.
            </summary>
            <returns>
            The active cell configuration.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetCellConfiguration(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            Returns the formatting configuration for the given cell.
            </summary>
            <param name="cellId"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetActiveRowConfiguration">
            <summary>
            Returns the formatting configuration for the active row.
            </summary>
            <returns>
            The active row configuration.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.Refresh">
            <summary>
            Refresh the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.RefreshSortPosition(System.Object)">
            <summary>
            If the row is not at correct sort position, this method will reposit the row in the rows
            collection based on the current sort criteria. Also if it's in the wrong group, it will put
            it under appropriate group by row.
            </summary>
            <param name="rowId">    Row identity.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCell(Aveva.Core.Presentation.DataGrid.CellIdentity,System.Object)">
            <summary>
            This method sets the cell value for a designated row tag and column tag.
            </summary>
            <param name="cellId">   Identity of the desired cell.</param>
            <param name="value">    The value to put in the desired cell.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCell(Infragistics.Win.UltraWinGrid.UltraGridCell,System.Object)">
            <summary>
            This method sets the cell value for a designated row tag and column tag.
            </summary>
            <exception cref="T:System.Exception">    Thrown when an exception error condition occurs.</exception>
            <param name="cell"> Grid cell.</param>
            <param name="value">    The value to put in the desired cell.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellFromString(Aveva.Core.Presentation.DataGrid.CellIdentity,System.String)">
            <summary>
            This method sets the cell value for a designated row tag and column tag based on string which
            represents this value.
            </summary>
            <param name="cellID">   Identity of the desired cell.</param>
            <param name="value">    The string which represents value to put in the desired cell.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellFromString(Aveva.Core.Presentation.DataGrid.CellIdentity,System.String,System.String@)">
            <summary>
            This method sets the cell value for a designated row tag and
            column tag based on string which represents this value.
            </summary>
            <param name="cellID"></param>
            <param name="value"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellFromString(Infragistics.Win.UltraWinGrid.UltraGridCell,System.String)">
            <summary>
            This method sets the cell value for a designated cell based on string which represents this
            value.
            </summary>
            <param name="cell"> Cell.</param>
            <param name="value">    The string which represents value to put in the desired cell.</param>
            <returns>
            true if successful, otherwise false.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellFromString(Infragistics.Win.UltraWinGrid.UltraGridCell,System.String,System.String@)">
            <summary>
            This method sets the cell value for a designated cell based on string which represents this value.
            </summary>
            <param name="cell">Cell</param>
            <param name="value">The string which represents value to put in the desired cell.</param>
            <param name="errorMessage"> Conversion error message</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetSelectedCells(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.CellIdentity})">
            <summary>
            This method selects all of the cells supplied in the list parameter 'cells'.
            </summary>
            <param name="cells">    The list of cells to select.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetActiveCell(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            This method sets the current active cell based on the supplied cell identity.
            </summary>
            <param name="cellID">   The identity of the cell to make active.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellImage(Aveva.Core.Presentation.DataGrid.CellIdentity,System.String)">
            <summary>
            This method sets the image on the cell specified by rowID and colID. The image is loaded from
            the filename passed in via strImageFile.
            </summary>
            <param name="cellID">   Identity of the desired cell.</param>
            <param name="strImageFile"> The path and filename to the image to be loaded.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellBackgroundImage(Aveva.Core.Presentation.DataGrid.CellIdentity,System.Drawing.Image)">
            <summary>
            This method sets the image on the cell specified by rowID and colID.
            </summary>
            <param name="cellId">   Identity of the desired cell.</param>
            <param name="image">    Image to be loaded.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellBackgroundImage(Infragistics.Win.UltraWinGrid.UltraGridCell,System.Drawing.Image)">
            <summary>
            This method sets the image on the cell.
            </summary>
            <param name="cell"> Grid cell.</param>
            <param name="image">    Image to be set.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellColour(Aveva.Core.Presentation.DataGrid.CellIdentity,System.String)">
            <summary>
            This method sets the cell BackColor on the cell specified by cellID. If the parameter
            strColour contains the string "empty" then the BackColor will be set to Color.Empty.
            </summary>
            <param name="cellID">   Identity of the desired cell.</param>
            <param name="strColour">    The new colour to be used for the BackColor.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellColour(Aveva.Core.Presentation.DataGrid.CellIdentity,System.Drawing.Color)">
            <summary>
            This method sets the cell BackColor on the cell specified by cellID.
            </summary>
            <param name="cellID">   Identity of the desired cell.</param>
            <param name="colour">   The new colour to be used for the BackColor.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetHightlightCellColor(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            Clears cell color, set it as current Hightlight color
            </summary>
            <param name="cellId">   Cell identity.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetHightlightCellColor(Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Clears cell color, set it as current Hightlight color
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ClearHightlightCellColor(Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Clears highlight cell color
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetHightlightCellsColor(System.Object,System.Object,System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.CellIdentity})">
            <summary>
             Clears cell color, set it as current Hightlight color
            </summary>
            <param name="rowDbViewElement"></param>
            <param name="row"></param>
            <param name="cellIds"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetHightlightRowCellsColor(Infragistics.Win.UltraWinGrid.UltraGridRow)">
            <summary>
             Clears color in all cells in given row, set it as current Hightlight color
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.CellFontBoldSet(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            Set font bold for given cell.
            </summary>
            <param name="cellId">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.CellFontBoldSet(Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Set font bold for given cell.
            </summary>
            <param name="cell"> .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.CellFontBoldClear(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            Clear font bold for given cell.
            </summary>
            <param name="cellId">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.CellFontBoldClear(Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Clear font bold for given cell.
            </summary>
            <param name="cell"> .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ClearAllFontBoldCells">
            <summary>
            Clear all font bold cells
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ClearAllStrikeOutFontCells">
            <summary>
            Clear all strike out font cells
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.BoldCells(System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}},System.Boolean)">
            <summary>
            Bold or clear font in cells specified by row object and column keys.
            </summary>
            <param name="rowIDsColumnKeys">List of objects that indicates underlying row object and a
                                           list of column keys.</param>
            <param name="bolded">   Set or clear font bold.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.HighlightCells(System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
            <summary>
            Highlight cells specified by row object and column keys
            </summary>
            <param name="rowIDsColumnKeys">List of objects that indicates underlying row object and a list of column keys</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.StrikeoutCells(System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}},System.Boolean)">
            <summary>
            Strikeout or clear font in cells specified by row object and column keys.
            </summary>
            <param name="rowIDsColumnKeys">List of objects that indicates underlying row object and a
                                           list of column keys.</param>
            <param name="strikeout">    Set or clear font strikeout.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellProperties(System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
            <summary>
             Highlight\Bold\Strike out cells specified by row object and column keys
            </summary>
            <param name="highlighted">List of objects to be highlighted that indicates underlying row object and a list of column keys</param>
            <param name="bolded">List of objects to be bolded that indicates underlying row object and a list of column keys</param>
            <param name="strikeOut">List of objects to be striked out that indicates underlying row object and a list of column keys</param>
            <param name="unStrikeOut">List of objects to be unstriked out that indicates underlying row object and a list of column keys</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetUpdateCellsColor(System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
            <summary>
            Set update color for cells specified by row object and column keys
            </summary>
            <param name="rowIDsColumnKeys">List of objects that indicates underlying row object and a list of column keys</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetErrorCellsColor(System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
            <summary>
            Set error color for cells specified by row object and column keys
            </summary>
            <param name="rowIDsColumnKeys">List of objects that indicates underlying row object and a list of column keys</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellsTooltip(System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}},System.String)">
            <summary>
            Set tooltip for cells specified by row object and column keys
            </summary>
            <param name="rowIDsColumnKeys">List of objects that indicates underlying row object and a list of column keys</param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetUpdateCellColor(Aveva.Core.Presentation.DataGrid.CellIdentity,System.Boolean)">
            <summary>
            Sets cell color as success or error.
            </summary>
            <param name="cellId">   Cell identity.</param>
            <param name="isUpdateSuccess">  True is edit was a success, false if it wasn't.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetUpdateCellColor(Infragistics.Win.UltraWinGrid.UltraGridCell,System.Boolean)">
            <summary>
            Sets cell color as success or error.
            </summary>
            <param name="cell"> Cell.</param>
            <param name="isUpdateSuccess">  True is edit was a success, false if it wasn't.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetHighlightRowColor(System.Object)">
            <summary>
            Sets row color to highlight.
            </summary>
            <param name="rowId">    Row identity.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ResetCellColor(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            Resets cell color.
            </summary>
            <param name="cellId">   Cell identity.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ClearCellColor(Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Resets cell color and all cell states.
            </summary>
            <param name="cell"> Cell.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ClearCellColor(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            Resets cell color and all cell states.
            </summary>
            <param name="cellId">   Cell identity.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellTextAlignment(Aveva.Core.Presentation.DataGrid.CellIdentity,Aveva.Core.Presentation.DataGrid.DataGridControl.HorizontalAlignment)">
            <summary>
            This method sets the horizontal text alignment on the specified cell.
            </summary>
            <param name="cellID">   Identity of the desired cell.</param>
            <param name="align">    The alignment to use.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellTooltip(Aveva.Core.Presentation.DataGrid.CellIdentity,System.String)">
            <summary>
            This method sets the tool tip text on the specified cell. If a zero-length string is passed
            into strToolTip, then the cell's ToolTipText is cleared by setting the value to null.
            </summary>
            <param name="cellId">   Identity of the desired cell.</param>
            <param name="strToolTip">The new ToolTipText for the cell. If this is a zero-length string,
                                     then the cell's ToolTipText is set to null.</param>
            zero-length string is passed into strToolTop, then the cell's
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetCellTooltip(Infragistics.Win.UltraWinGrid.UltraGridCell,System.String)">
            <summary>
            This method sets the tool tip text on the specified cell. If a zero-length string is passed
            into strToolTip, then the cell's ToolTipText is cleared by setting the value to null.
            </summary>
            <param name="cell"> Grid cell.</param>
            <param name="strToolTip">The new ToolTipText for the cell. If this is a zero-length string,
                                     then the cell's ToolTipText is set to null.</param>
            zero-length string is passed into strToolTop, then the cell's
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SelectAllCells">
            <summary>
            Selects all cells in the grid.  Note that this method does not work if the corresponding
            grid's DisplayLayout.Override.SelectTypeRow has been set to SelectType.Single.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SelectAllRows">
            <summary>
            Selects all rows in the grid.  Note that this method does not work if the corresponding
            grid's DisplayLayout.Override.SelectTypeRow has been set to SelectType.Single.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetNumberRows">
            <summary>
            This method returns the number of rows in the grid.
            </summary>
            <returns>
            int: The number of rows in the grid.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.IsRowVisible(System.Object)">
            <summary>
            This method indicates if the specified row is currently hidden.
            </summary>
            <param name="rowID">    The identify of the desired row.</param>
            <returns>
            bool: Whether the row is visible, or not.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetRows">
            <summary>
            This method returns the identities of all of the rows in the corresponding grid.
            </summary>
            <returns>
            The list of identities of all of the rows in the corresponding grid.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetDbViewElementsRows(System.Collections.Generic.List{System.Object})">
            <summary>
            Returns collection of corresponding UltraGridRows to DbViewElements from Grid rows.
            </summary>
            <param name="objects">  .</param>
            <returns>
            The database view elements rows.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetRowsNonGroupByRows">
            <summary>
            This method returns the identities of all of the rows non group by rows in the corresponding
            grid.
            </summary>
            <returns>
            The list of identities of all of the rows non group by rows in the corresponding grid.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetSelectedRows">
            <summary>
            This method returns a list of the row identities of the rows in which cells are currently
            selected.
            </summary>
            <returns>
            List of objects: The identities of the rows in which cells are current selected.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetActiveRow">
            <summary>
            This method returns the row identity of the row which contains the currently active cell.
            </summary>
            <returns>
            object: the identity of the row which contains the currently active cell.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetFilteredInRows">
            <summary>
            This method return a list of the row identities of the rows which are currently filtered into
            the grid.
            </summary>
            <returns>
            List of object: The list of the row identities of the rows which are currently filtered into
            the grid.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetFilteredOutRows">
            <summary>
            This method return a list of the row identities of the rows which are currently filtered out
            of the grid.
            </summary>
            <returns>
            List of object: The list of the row identities of the rows which are currently filtered out
            of the grid.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SelectCell(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            This method selects the cell specified by cellID.
            </summary>
            <param name="cellId">   The cell to select.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SelectRow(System.Object)">
            <summary>
            This method changes the current selection to the row with the identity specified.
            </summary>
            <param name="rowID">    rowID: The identity of the row to select.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SelectRows(System.Collections.Generic.List{System.Object})">
            <summary>
            This method changes the current selection to the rows specified in the rowIDs parameter.
            </summary>
            <param name="rowIDs">   rowIDs: The identities of the rows to select.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetRowDbElements(System.Object)">
            <summary>
            This method returns a list of all of the DbElements that underly the specified row of data.
            If no use underlying DbElements exist then an empty list is returned.  If rowID is not valid,
            then the return value will be null.
            </summary>
            <param name="rowID">    The identity of the row of interest.</param>
            <returns>
            List of DbElements: The DbElements that underly the specified row of data.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetRowColour(System.Object,System.String)">
            <summary>
            This method sets the cell BackColor on the row specified by rowID. If the parameter strColour
            contains the string "empty" then the BackColor will be set to Color.Empty.
            </summary>
            <param name="rowID">    The identity of the row of interest.</param>
            <param name="strColour">    The new colour to be used for the BackColor.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetRowColour(System.Object,System.Drawing.Color)">
            <summary>
            This method sets the cell BackColor on the row specified by rowID.
            </summary>
            <param name="rowID">    The identity of the row of interest.</param>
            <param name="colour">   The new colour to be used for the BackColor.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ResetRowColor(System.Object)">
            <summary>
            Reset custom color of chosen row.
            </summary>
            <param name="rowId">    Row ID.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetRowForeColourDisabled(System.Object,System.Drawing.Color)">
            <summary>
            Set row fore colour disabled.
            </summary>
            <param name="rowId">    .</param>
            <param name="colour">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetRowTooltip(System.Object,System.String)">
            <summary>
            This method sets the tool tip text on the specified row. If a zero-length string is passed
            into strToolTip, then the row's ToolTipText is cleared by setting the value to null.
            </summary>
            <param name="rowID">    The identity of the row of interest.</param>
            <param name="strToolTip">The new ToolTipText for the cell. If this is a zero-length string,
                                     then the cell's ToolTipText is set to null.</param>
            zero-length string is passed into strToolTop, then the row's
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetAllColumnIDs">
            <summary>
            This method returns a list of all of column identities in use in the grid.
            </summary>
            <returns>
            List of string: A list of all of column identities in use in the grid.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetSelectedColumns">
            <summary>
            This method returns a list of all of column identities for the currently selected cells.
            </summary>
            <returns>
            List of string: A list of all of column identities for the currently selected cells.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetActiveColumn">
            <summary>
            This method returns the column identity of the current active cell.
            </summary>
            <returns>
            string: The column identity of the current active cell.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ColumnExists(System.String)">
            <summary>
            This method indicated whether the specified column exists.
            </summary>
            <param name="colId">    The identity of the required column.</param>
            <returns>
            bool: true if exists, false otherwise.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetColumnVisible(System.String)">
            <summary>
            This method indicated whether the specified column is currently visible.
            </summary>
            <param name="colID">    The identity of the required column.</param>
            <returns>
            bool: true if visible, false otherwise.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetColumnVisible(System.String,System.Boolean)">
            <summary>
            This method sets whether the specified column is currently visible.
            </summary>
            <param name="colID">    The identity of the required column.</param>
            <param name="visible">Indicated whether the column should be visible (true) or hidden (false).</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetFilterConditions(System.String,Infragistics.Win.UltraWinGrid.FilterLogicalOperator,System.Collections.Generic.List{Infragistics.Win.UltraWinGrid.FilterCondition})">
            <summary>
            Sets filter conditions.
            </summary>
            <param name="colID"></param>
            <param name="logicalOperator"></param>
            <param name="filterConditions"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetFilterConditions(System.String)">
            <summary>
            Gets filter conditions for the specified column.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <returns>
            Filter conditions.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetColumnFiltering(System.String,System.Boolean)">
            <summary>
            This method sets whether the specified column could be filtered.
            </summary>
            <param name="colID">    The identity of the required column.</param>
            <param name="filteringEnabled">Indicated whether the column should be filtered (true) or not
                                           (false).</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ColumnVisiblePosition(System.String)">
            <summary>
            Return the visible position of a column.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the
                                                          required range.</exception>
            <param name="colId">    The identity of the required column.</param>
            <returns>
            Visible Position.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetCellDbElement(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            This method returns the DbElements that underlie the specified cell. If no underlying
            DbElement exists or if cellID is not valid, then the return value will be null.
            </summary>
            <param name="cellID">   The identity of the cell of interest.</param>
            <returns>
            DbElement: The DbElement that underlies the specified cell.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetCellDbElement(Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Return DbElement associated with cell.
            </summary>
            <param name="cell"> .</param>
            <returns>
            The cell database element.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.FindNext(Aveva.Core.Presentation.DataGrid.CellIdentity,System.Predicate{System.String},Aveva.Core.Presentation.DataGrid.DataGridControl.SearchBy,Aveva.Core.Presentation.DataGrid.DataGridControl.SearchDirection,Aveva.Core.Presentation.DataGrid.IUnsizedProgress)">
            <summary>
            This method finds the next cell, using the specified parameters and returns the identity of
            that cell.
            </summary>
            <param name="startCellId">  The cell at which to start the search.</param>
            <param name="match">    The match predicate to use.</param>
            <param name="searchBy"> Search by rows or columns.</param>
            <param name="direction">    Direction of search.</param>
            <param name="progress"> Progress interface to be updated.</param>
            <returns>
            CellIdentity: the identity of the cnext found cell, null if not found.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.FindAll(System.Predicate{System.String},Aveva.Core.Presentation.DataGrid.IUnsizedProgress)">
            <summary>
            This method retrieves the cell identifiers of the cells that match the conditions defined by
            the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the cells to search
                                for.</param>
            <param name="progress"> Progress bar.</param>
            <returns>
            The cell identities. This method does not return null. If there are not cells or searching
            has been aborted then the list will be empty.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.StandardMatch(System.String,System.Boolean)">
            <summary>
            Simple predicate for passing to FindNext.
            </summary>
            <param name="findWhat"> String being searched for.</param>
            <param name="caseSensitive">    If comparison should be case sensitive.</param>
            <returns>
            A Predicate&lt;string&gt;
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DoCellClear">
            <summary>
            Clear values of selected cells.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.CopyCells">
            <summary>
            Copy the data in the selected cells to the clipboard.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.CutCells">
            <summary>
            Cut the data from the selected cells to the clipboard.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.CutRows">
            <summary>
            Cut the data from the selected rows to the clipboard.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.IsCellEditable(Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Check if it is possible to paste into cell.
            </summary>
            <param name="cell"> .</param>
            <returns>
            true if cell editable, false if not.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.PasteCells">
            <summary>
            Paste the copied data into the selected cells.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.PasteRows">
            <summary>
            Paste the copied data into the selected rows.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DoCellEditFillDown">
            <summary>
            Paste the copied data into the selected cells (fill down)
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DoCellEditFillUp">
            <summary>
            Paste the copied data into the selected cells (fill up)
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.HideRow(System.Object,System.Boolean)">
            <summary>
            Hide/Show row.
            </summary>
            <param name="colID">    .</param>
            <param name="hide"> .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.HideAllRows(System.Boolean)">
            <summary>
            Hide/Show all rows.
            </summary>
            <param name="hide"> .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.HideAllRows(System.Boolean,System.Boolean)">
            <summary>
            Hide/Show all rows.
            </summary>
            <param name="hide"> .</param>
            <param name="applyOnSelected">  hide/show selected.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.HighlightCell(Aveva.Core.Presentation.DataGrid.CellIdentity,System.Boolean)">
            <summary>
            This method sets (or removes) the highlight colour for the specified cell.
            </summary>
            <param name="cellID">   The identity of the cell to highlight.</param>
            <param name="highlight">    bool: true to highlight; false to unhighlight.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.UnhighlightAllCells">
            <summary>
            This method removes the highlight colour for all of the cells in the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.UpdateRow(System.Object)">
            <summary>
            Method forces an Update() on the specified row.
            </summary>
            <param name="RowID">    The ID of the row to update.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.UpdateGrid">
            <summary>
            Method forces an UpdateData() on the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ScrollToRow(System.Object)">
            <summary>
            Method forces a scroll to bring the specified row into visibility in the current viewport. It
            activates given row.
            </summary>
            <param name="rowID">    The ID of the row to scroll to.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ScrollGridToRow(System.Object)">
            <summary>
            Method forces a scroll to bring the specified row into visibility in the middle of current
            viewport. It does not activate given row.
            </summary>
            <param name="rowId">    The ID of the row to scroll to.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ScrollGridToCell(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            Method forces a scroll to bring the specified cell into visibility in the current viewport.
            </summary>
            <param name="cellIdentity"> The identity of the cell to scroll to.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetActiveRow(System.Object)">
            <summary>
            Set active Row in grid.
            </summary>
            <param name="rowID">    Row id to set as active.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.UpdateFillLabels(System.Boolean)">
            <summary>
            Method updates the "Fill Up" and "Fill Down" labels so they say "Fill Right" and "Fill Left"
            instead, or vice-versa.
            </summary>
            <param name="isHorizontal">Indicates if the data is displayed in a horizontal manner or not.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ResetNumericColumnHAlign">
            <summary>
            The method resets text horizontal align.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetNumericColumnRightHAlign">
            <summary>
            The method sets text horizontal align to right for numeric columns.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DeallocateAllCells">
            <summary>
            Release memory alocatted by cells.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ResetColumnStyle(System.String)">
            <summary>
            The method resets column style to default.
            </summary>
            <param name="colId">    Column key.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ResetColumnClickAction(System.String)">
            <summary>
            The method resets column click action to default.
            </summary>
            <param name="colId">    Column key.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ResetColumnHAlign(System.String)">
            <summary>
            The method resets column horizontal align to default.
            </summary>
            <param name="colId">    Column key.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ResetColumnSummaries(System.String)">
            <summary>
            The method resets column summary to default.
            </summary>
            <param name="colId">    Column key.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.RefreshColumnSummaries(System.String)">
            <summary>
            Refreshes values of column summaries.
            </summary>
            <param name="colId">    Column key.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.RemoveAllColumnSummaries">
            <summary>
            Removes all visible column summaries.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ResetGridConfiguration">
            <summary>
            Reset grid configuration.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.AddUnboundColumn(System.String,System.String,System.Boolean)">
            <summary>
            Add unbound column, this column will not be a part of DataSource.
            </summary>
            <param name="columnKey">    Column key.</param>
            <param name="columnCaption">    Column caption.</param>
            <param name="useReadOnlyColour">    true to use read only colour.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.IsBoundColumn(System.String)">
            <summary>
            Check if column is bound to data source.
            </summary>
            <param name="columnKey">    Column id.</param>
            <returns>
            true if column is bound.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.NumberOfSelectedCells">
            <summary>
            This method returns the number of selected cells.
            </summary>
            <returns>
            Number of selected cells.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.AddNumericalSortComparersForColumnNamesList(System.Collections.Generic.List{System.String})">
            <summary>
            Adds custom numerical sort comparer for chosen columns.
            </summary>
            <param name="columnList">   List of column names.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetUnitsInColumnHeaders">
            <summary>
            Set unit text in column header caption.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetDatabaseUnits(System.String)">
            <summary>
            Gets database units.
            </summary>
            <param name="units">    Units for this column.</param>
            <returns>
            The database units.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetDatabaseUnitsLabel(System.String,System.String)">
            <summary>
            Gets database units label.
            </summary>
            <param name="label">    The label.</param>
            <param name="dimension">    The dimension.</param>
            <returns>
            The database units label.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetColumnFromPoint(System.Drawing.Point)">
            <summary>
            Get column from given point.
            </summary>
            <param name="point">    Point on grid.</param>
            <returns>
            Column key if found.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetGroupFromPoint(System.Drawing.Point)">
            <summary>
            Get group from given point.
            </summary>
            <param name="point">    Point on grid.</param>
            <returns>
            Group key if found.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetColumnHeaderToolTipText(System.String,System.String)">
            <summary>
            Set tooltip text for column.
            </summary>
            <param name="columnKey">    Column key.</param>
            <param name="toolTipText">  ToolTip text.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetSelectedHeaders">
            <summary>
            Get selected columns and groups headers.
            </summary>
            <returns>
            List of selected header keys.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DeActivateRow(System.Object,System.Boolean)">
            <summary>
            Turn on/off given row activation.
            </summary>
            <param name="rowId">    Row id to be deactivated\activated.</param>
            <param name="deActivate">true - deactivate
                                      false - activate.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.BeginDbCaching">
            <summary>
            Enables caching mechanism for database. Note: If BeginDbCaching is called more than once,
            EndDbCaching must be called an equivalent number of times. Until the last call to
            EndDbCaching the caching mechanism will not be disabled.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.EndDbCaching">
            <summary>
            Disables caching mechanism for database. Note: If BeginDbCaching is called more than once,
            EndDbCaching must be called an equivalent number of times. Until the last call to
            EndDbCaching the caching mechanism will not be disabled.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.FinishDbCaching">
            <summary>
            Disables caching mechanism for database regardless how many times the BeginDbCaching function was called.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetColumnCellHorizontalAlignment(System.String,Aveva.Core.Presentation.DataGrid.DataGridControl.HorizontalAlignment)">
            <summary>
            Set column cell horizontal alignment.
            </summary>
            <param name="columnKey">    .</param>
            <param name="align">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetColumnCellVerticalAlignment(System.String,Aveva.Core.Presentation.DataGrid.DataGridControl.VerticalAlignment)">
            <summary>
            Set column cell vertical alignment.
            </summary>
            <param name="columnKey">    .</param>
            <param name="align">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetColumnHeaderHorizontalAlignment(System.String,Aveva.Core.Presentation.DataGrid.DataGridControl.HorizontalAlignment)">
            <summary>
            Set column header horizontal alignment.
            </summary>
            <param name="columnKey">    .</param>
            <param name="align">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetColumnHeaderVerticalAlignment(System.String,Aveva.Core.Presentation.DataGrid.DataGridControl.VerticalAlignment)">
            <summary>
            Set column header vertical alignment.
            </summary>
            <param name="columnKey">    .</param>
            <param name="align">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetGroupHeaderHorizontalAlignment(System.String,Aveva.Core.Presentation.DataGrid.DataGridControl.HorizontalAlignment)">
            <summary>
            Set group header horizontal alignment.
            </summary>
            <param name="groupKey"></param>
            <param name="align"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetGroupHeaderVerticalAlignment(System.String,Aveva.Core.Presentation.DataGrid.DataGridControl.VerticalAlignment)">
            <summary>
            Set group header vertical alignment.
            </summary>
            <param name="groupKey"> .</param>
            <param name="align">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.RefreshSort">
            <summary>
            Refresh grid column sort
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetColumnCellsBackgroundImage(System.String,System.Drawing.Image)">
            <summary>
            Set column cells background image
            </summary>
            <param name="columnKey"></param>
            <param name="image"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ResetColumnCellsBackgroundImage(System.String)">
            <summary>
            Reset column cells background image
            </summary>
            <param name="columnKey"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ColumnDataType(System.String)">
            <summary>
            Get column type
            </summary>
            <param name="columnKey">Column id</param>;
            <returns>Type of the column</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SetButtonColumnStyle(System.String)">
            <summary>
            Set column display style to button
            </summary>
            <param name="columnKey"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.RowSelectorsVisible(System.Boolean)">
            <summary>
            Toggle visibility state of grid row selector
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetColumnFromIdentity(System.String)">
            <summary>
            Gets column from identity.
            </summary>
            <param name="colId">The identity of the required column.</param>
            <returns>
            The column from identity.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DisplayPrecisionDialog(Infragistics.Win.UltraWinGrid.UltraGridColumn)">
            <summary>
            Display precision dialog for given column
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DisplayPrecisionDialog(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.CellIdentity})">
            <summary>
            Display precision dialog for given cell identities list
            </summary>
            <param name="cellIds">List of cell identities to display precision dialog for</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetRowCells(Infragistics.Win.UltraWinGrid.UltraGridRow)">
            <summary>
            This method returns a list of the cell identities of the given row
            </summary>
            <param name="row">Row to get cells for</param>
            <returns>List of CellIdentity: The cell identities of the given row</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.LongTextEditorIsVisible">
            <summary>
            Returns true if Long Text Editor is available and visible for the Grid.
            </summary>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.LongTextEditorSelectAllText">
            <summary>
            Select All Text in current Long Text Editor.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.CreateUnitOfMeasure(Aveva.Core.Database.DbFormat)">
            <summary>
            Create a unit of measure based on the given format.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.UpgradeGridLayout(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Upgrade old style lists to the new data model
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetUnits(System.Collections.Generic.KeyValuePair{System.String,Aveva.Core.Database.DbFormat},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Gets or creates units of measure from formats then sets current unit
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.CurrentUnitPerAttributeCountChecker">
            <summary>
            Returns current value of currentUnitPerAttribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ClearUnits(System.String)">
            <summary>
            Clears currentUnitPerAttribute of named unit
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.saveToExcel(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method causes the grid to be saved to the specified worksheet
            with a number of options. This is the worker function that
            supports the three overloaded saveGridToExcel() methods.
            </summary>
            <param name="excelName">The filename into which to save the grid</param>
            <param name="worksheet">The worksheet into which to save the grid.</param>
            <param name="strHeader">The header string to write into the worksheet.</param>
            <param name="intStartRow">The row number to start the output of the grid.</param>
            <param name="intStartCol">The column number to start the output of the grid.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.getRowFromIdentity(Infragistics.Win.UltraWinGrid.RowsCollection,System.Object)">
            <summary>
            This method returns the UltraGridRow with the row with the designated rowID from the
            RowsCollection supplied, or null if it cannot be found. This method will also search any
            groupby rows contained in the RowsCollection supplied.
            </summary>
            <param name="rows"> The RowsCollection to be searched.</param>
            <param name="rowID">    The identity of the row to be found.</param>
            <returns>
            The row from identity.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.countGridRows(Infragistics.Win.UltraWinGrid.RowsCollection,System.Int32@)">
            <summary>
            Count grid rows.
            </summary>
            <param name="rows"> .</param>
            <param name="rowsCount">    [in,out] Number of rows.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetCellFromIdentity(Infragistics.Win.UltraWinGrid.UltraGridRow,Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            Get cell identity from given grid row and grid cell.
            </summary>
            <param name="row">  .</param>
            <param name="cellID">   .</param>
            <returns>
            The cell from identity.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetCellFromIdentity(Aveva.Core.Presentation.DataGrid.CellIdentity)">
            <summary>
            This method returns an UltraGridCell from the grid, based on the cell identity supplied.
            </summary>
            <param name="cellID">   Identity of the desired cell.</param>
            <returns>
            The cell from identity.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.getIdentityFromCell(Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Gets identity from cell.
            </summary>
            <param name="cell"> Grid cell.</param>
            <returns>
            The identity from cell.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.getGroupFromIdentity(System.String)">
            <summary>
            Gets group from identity.
            </summary>
            <param name="colID">    The identity of the required column.</param>
            <returns>
            The group from identity.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.HandleCommonMenuRequest(System.String)">
            <summary>
            Common right mouse menu code
            </summary>
            <param name="menuName">The name of the menu to be displayed</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.HandleCellEditMenuRequest">
            <summary>
            Add a cell-focused right mouse menu
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.HandleHeaderEditMenuRequest">
            <summary>
            Add a header-focused right mouse menu
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.HandleCellDataError(Infragistics.Win.UltraWinGrid.UltraGridCell,System.String)">
            <summary>
            Handle data error for cell
            </summary>
            <param name="cell"></param>
            <param name="message"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetVisibleRowsOnScreen(Infragistics.Win.UltraWinGrid.RowsCollection,System.Collections.Generic.List{Infragistics.Win.UltraWinGrid.UltraGridRow})">
            <summary>
            Get all visible rows on sreen include rows group by other rows
            </summary>
            <param name="rowsCollection"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.IsRowVisibleOnScreen(Infragistics.Win.UltraWinGrid.UltraGridRow)">
            <summary>
            Check if given row is visible on sreen 
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetSelectedElements(Infragistics.Win.UltraWinGrid.UltraGrid)">
            <summary>
            Return a list of selected elements, this is used by an externally exposed event hence
            internal static.
            </summary>
            <param name="grid"> .</param>
            <returns>
            The selected elements.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetAlternateColor(System.Drawing.Color)">
            <summary>
            Gets alternative shade of specified color.
            </summary>
            <param name="colorToAlternate"> Color to alternate.</param>
            <returns>
            Alternate color.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.DeallocateRowCells(Infragistics.Win.UltraWinGrid.UltraGridRow)">
            <summary>
            Deallocate memory for row cells
            </summary>
            <param name="row">Grid row</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetColumnNamesWithNumericalSortComparers">
            <summary>
            Gets column names with custom sort comparers.
            </summary>
            <returns>
            The column names with numerical sort comparers.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ScrollRowToMiddle(Infragistics.Win.UltraWinGrid.UltraGridRow)">
            <summary>
            Scroll row to the middle of grid area
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ChangeCaption(Infragistics.Win.UltraWinGrid.UltraGridColumn,System.String,System.Boolean)">
            <summary>
            Changes the caption for a given column to include units information.
            </summary>
            <param name="column">   Column to be changed.</param>
            <param name="units">    Units for this column.</param>
            <param name="resize">   Indicates if resize is required.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.PerformColumnAutoResize(System.String)">
            <summary>
            Resize column depending on content.
            </summary>
            <param name="columnId"> .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ColumnCanHaveUnits(Infragistics.Win.UltraWinGrid.UltraGridColumn)">
            <summary>
            Check if column can have units.
            </summary>
            <param name="column">   .</param>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetDbViewElementsRows(Infragistics.Win.UltraWinGrid.RowsCollection,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{Infragistics.Win.UltraWinGrid.UltraGridRow}@)">
            <summary>
            Used by public GetDbViewElementsRows to recursively find match rows
            </summary>
            <param name="rows"></param>
            <param name="objects"></param>
            <param name="foundRows"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetRowsFromGrid(System.Collections.Generic.HashSet{System.Object},Infragistics.Win.UltraWinGrid.RowsCollection,System.Collections.Generic.List{Infragistics.Win.UltraWinGrid.UltraGridRow}@)">
            <summary>
            Get UltraGridRow collection from DbViewElement collection found on Grid rows
            </summary>
            <param name="rowIDs"></param>
            <param name="rows"></param>
            <param name="rowsToSelect"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetRowsAndObjects(System.Collections.Generic.List{System.Object})">
            <summary>
            Returns a collection of pairs ultragrid rows and corresponding row objects
            </summary>
            <param name="rowIDs"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.getRowsAndObjects(Infragistics.Win.UltraWinGrid.RowsCollection,System.Collections.Generic.HashSet{System.Object})">
            <summary>
            Get a collection of pairs ultragrid rows and corresponding row object
            </summary>
            <param name="rows"></param>
            <param name="rowIDs"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.GetUltraGridDataSource">
            <summary>
            Get low level control data source.
            </summary>
            <returns>
            The ultra grid data source.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.SuspendDrawing(System.Windows.Forms.Control)">
            <summary>
            Suspend grid control paint
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.ResumeDrawing(System.Windows.Forms.Control)">
            <summary>
            Resume grid control paint
            </summary>
            <param name="target"></param>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.grid">
            <summary>
            ultra grid
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.Selected">
            <summary>
            Returns a reference to a Selected object containing collections of all the selected objects
            in the UltraGrid. This property is read-only.
            </summary>
            <value>
            The selected.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.ActiveGrid">
            <summary>
            This property returns the currently active DataGridControl.
            </summary>
            <value>
            The active grid.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.UnitSetsRegister">
            <summary>
            The unit sets list register associated with this datagrid.
            </summary>
            <value>
            The unit sets register.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.GridLayout">
            <summary>
            The layout object that contains the layout definition for the DataGridControl.
            </summary>
            <value>
            The grid layout.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.DataGridLayoutTools">
            <summary>
            The layout object that contains the layout definition for the DataGridControl.
            </summary>
            <value>
            The data grid layout tools.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.DataSource">
            <summary>
            The data source object to be presented in the grid.
            </summary>
            <value>
            The data source.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.KeyPressForwardDirection">
            <summary>
            Gets or sets direction in which selection should move after leaving cell edit mode.
            </summary>
            <value>
            The key press forward direction.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.MultiCellEditTransaction">
            <summary>
            To manage transactions outside of the grid when settings values for more than one cell set
            this to the transaction being used for the update.  Remember to set this to null if the
            transaction is ended or aborted.
            </summary>
            <value>
            The multi cell edit transaction.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.GridEvents">
            <summary>
            The events object for the DataGridControl.
            </summary>
            <value>
            The grid events.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.GridHeight">
            <summary>
            Gets or sets the Height of the component.
            </summary>
            <value>
            The height of the grid.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.CurrentDataSet">
            <summary>
            This method returns a DataSet based on the currently visible data in the grid.
            </summary>
            <value>
            The current data set.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.CurrentLayout">
            <summary>
            Layout details for columns.
            </summary>
            <value>
            The current layout.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.ColumnCount">
            <summary>
            This property is number of unique columns in the grid.
            </summary>
            <value>
            The number of columns.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.DisplayProgressBar">
            <summary>
            Display progress bar for time consuming operations.
            </summary>
            <value>
            true if display progress bar, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.DatabaseEventsHandled">
            <summary>
            The get returns true if database events are handled. The set makes database events handled or
            not handled.
            </summary>
            <value>
            true if database events handled, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.MousePosition">
            <summary>
            Returns mouse down position.
            </summary>
            <value>
            The mouse position.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.UseAlternateRowColors">
            <summary>
            Get return if we want to use alternate colors for read only and pinned column cells - set to
            true by default Set sets it to active/non active.
            </summary>
            <value>
            true if use alternate row colors, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.IsReadOnly">
            <summary>
            Returns whether all columns are read only.
            </summary>
            <value>
            true if this Aveva.Core.Presentation.DataGrid.DataGridControl is read only, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.ShowHeaderMenu">
            <summary>
            Display context menu on right mouse click on grid column header.
            </summary>
            <value>
            true if show header menu, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.ShowContextMenu">
            <summary>
            Display context menu on right mouse click on grid.
            </summary>
            <value>
            true if show context menu, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.CellMultiLine">
            <summary>
            Determines if the cells' data should be displayed in a multi-line format.
            </summary>
            <value>
            true if cell multi line, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.NumericalFilterComparer">
            <summary>
            Determines if numerical comparer for numeric columns should be used in filters.
            </summary>
            <value>
            true if numerical filter comparer, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.Cases">
            <summary>
            The grid cases object.
            </summary>
            <value>
            The cases.
            </value>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridControl.OnCellDoubleClick">
            <summary>
            Button cell click event handler.
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.MouseWheelZoomOption">
            <summary>
            Gets or sets a value indicating whether the mouse wheel zoom option.
            </summary>
            <value>
            true if mouse wheel zoom option, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.MultiCellOperation">
            <summary>
            Raise time consuming operation with disabling all Grid Events This is safe for use when doing
            cells feedback highlighting.
            </summary>
            <value>
            true if multi cell operation, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.MultiCellOperationDisableEvents">
            <summary>
            Raise time consuming operation with disabling all Grid Events It calls MultiCellOperation and
            returns MultiCellOperation status Do not use this when doing cells feedback highlighting.
            </summary>
            <value>
            true if multi cell operation disable events, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.MultiCellOperationCancelled">
            <summary>
            Indicate if time consuming operation is cancelled.
            </summary>
            <value>
            true if multi cell operation cancelled, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.IsCellEditPasteable">
            <summary>
            Determine if the copied data can be pasted into the selected cells.
            </summary>
            <value>
            true if this Aveva.Core.Presentation.DataGrid.DataGridControl is cell edit pasteable, false
            if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.IsCellEditFillUpable">
            <summary>
            Determine if the copied data can be pasted (fill up) into the selected cells.
            </summary>
            <value>
            true if this Aveva.Core.Presentation.DataGrid.DataGridControl is cell edit fill upable, false
            if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.IsFiltered">
            <summary>
            Get state of current filtering.
            </summary>
            <value>
            true if this Aveva.Core.Presentation.DataGrid.DataGridControl is filtered, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.RowCount">
            <summary>
            Get number of rows in grid.
            </summary>
            <value>
            The number of rows.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.FilteredRowCount">
            <summary>
            Get number of filtered rows in grid.
            </summary>
            <value>
            The number of filtered rows.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.ShowActiveBorder">
            <summary>
            Get or set if grid displays a border when it is active.
            </summary>
            <value>
            true if show active border, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.IsCellEditFillDownable">
            <summary>
            Determine if the copied data can be pasted (fill down) into the selected cells.
            </summary>
            <value>
            true if this Aveva.Core.Presentation.DataGrid.DataGridControl is cell edit fill downable,
            false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.AllowUpdate">
            <summary>
            Determines if user is allowed to update the data.
            </summary>
            <value>
            true if allow update, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.ultraGrid">
            <summary>
            Return current UltraGrid object.
            </summary>
            <value>
            The ultra grid.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.visibleColumns">
            <summary>
            Gets the visible columns.
            </summary>
            <value>
            The visible columns.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridControl.visibleRows">
            <summary>
            Gets the visible rows.
            </summary>
            <value>
            The visible rows.
            </value>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridControl.HorizontalAlignment">
            <summary>
            This enumeration encapsulates the different kinds of horizontal alignment for cell text.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.HorizontalAlignment.Left">
            <summary>
            Left Alignment
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.HorizontalAlignment.Centre">
            <summary>
            Centrally Alignment
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.HorizontalAlignment.Right">
            <summary>
            Right Alignment
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.HorizontalAlignment.Default">
            <summary>
            Default Alignment
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridControl.VerticalAlignment">
            <summary>
            This enumeration encapsulates the different kinds of vertical alignment for cell text.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.VerticalAlignment.Top">
            <summary>
            Top Alignment
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.VerticalAlignment.Middle">
            <summary>
            Middle Alignment
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.VerticalAlignment.Bottom">
            <summary>
            Bottom Alignment
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.VerticalAlignment.Default">
            <summary>
            Default Alignment
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridControl.SearchBy">
            <summary>
            This enumeration indicates the order in which to search data.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.SearchBy.Columns">
            <summary>
            Search by column first.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.SearchBy.Rows">
            <summary>
            Search by row first.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridControl.SearchDirection">
            <summary>
            This enumeration indicates the direction in which to search data.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.SearchDirection.Up">
            <summary>
            Search backwards.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.SearchDirection.Down">
            <summary>
            Search forwards.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridControl.ForwardDirection">
            <summary>
            Enumeration indicating where selection should move after press key action is performed.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.ForwardDirection.Up">
            <summary>
            An enum constant representing the up option.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.ForwardDirection.Down">
            <summary>
            An enum constant representing the down option.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.ForwardDirection.Left">
            <summary>
            An enum constant representing the left option.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.ForwardDirection.Right">
            <summary>
            An enum constant representing the right option.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridControl.ForwardDirection.Unknown">
            <summary>
            An enum constant representing the unknown option.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridControl.DoubleClickCellEventHandler">
            <summary>
            Button cell click delegate.
            </summary>
            <param name="sender">   Sender.</param>
            <param name="e">    Event Args.</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridControl.CellSort">
            <summary>
            sort 2 grid cells on row and column index.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridControl.CellSort.Compare(System.Object,System.Object)">
            <summary>
            cellX less than cellY returns -ve integer, cellX = cellY returns 0 cellX greater than cellY
            returns +ve integer,.
            </summary>
            <param name="x">    The first object to compare.</param>
            <param name="y">    The second object to compare.</param>
            <returns>
            Negative if 'x' is less than 'y', 0 if they are equal, or positive if it is greater.
            </returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents">
            <summary>
            Events object associated with the DataGridControl class.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridEvents.m_grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.#ctor(Infragistics.Win.UltraWinGrid.UltraGrid)">
            <summary>
            Empty Constructor.
            </summary>
            <param name="grid">UltraGrid object that is contained in the DataGridControl with which this
                               object is used.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.ConnectEvents">
            <summary>
            Connects the events exported from.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseCutKeyPressed(System.Object)">
            <summary>
            This method causes a CutKeyPressed event to be raised against a source object.
            </summary>
            <param name="source">   The source of the event being raised.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseCopyKeyPressed(System.Object)">
            <summary>
            This method causes a CopyKeyPressed event to be raised against a source object.
            </summary>
            <param name="source">   The source of the event being raised.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaisePasteKeyPressed(System.Object)">
            <summary>
            This method causes a PasteKeyPressed event to be raised against a source object.
            </summary>
            <param name="source">   The source of the event being raised.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseDeleteKeyPressed(System.Object,System.Boolean@)">
            <summary>
            This method causes a DeleteKeyPressed event to be raised against a source object.
            </summary>
            <param name="source">   The source of the event being raised.</param>
            <param name="handled">[in,out] Indicated whether the event has been handled correctly.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseSelectAllKeyPressed(System.Object)">
            <summary>
            This method causes a SelectAllKeyPressed event to be raised against a source object.
            </summary>
            <param name="source">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseColumnUnitChanged(System.Object,System.String)">
            <summary>
            Raised when unit in column header is changed.
            </summary>
            <param name="source">   .</param>
            <param name="columnKey">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseBeforeColumnPin(System.Object,System.String)">
            <summary>
            Raised when before column header is pinned.
            </summary>
            <param name="source">   .</param>
            <param name="headerKey">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseColumnPinned(System.Object,System.String)">
            <summary>
            Raised when header in pinned.
            </summary>
            <param name="source">   .</param>
            <param name="headerKey">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseCasesChanged(System.Object,System.EventArgs)">
            <summary>
            Raises CasesChanged event.
            </summary>
            <param name="sender"> .</param>
            <param name="e">  .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseMultiCellOperationStarted(System.Object)">
            <summary>
            This method causes a MultiCellOperationStarted event to be raised against a source object.
            </summary>
            <param name="source"> The source of the event being raised.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseMultiCellOperationEnded(System.Object)">
            <summary>
            This method causes a MultiCellOperationEnded event to be raised against a source object.
            </summary>
            <param name="source"> The source of the event being raised.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseMultiCellOperationCancelled(System.Object)">
            <summary>
            This method causes a MultiCellOperationCancelled event to be raised against a source object.
            </summary>
            <param name="source"> The source of the event being raised.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseDeallocateRowCells(System.Object,Infragistics.Win.UltraWinGrid.UltraGridRow)">
            <summary>
            This method causes a DeallocateRowCells event to be raised against a source object.
            </summary>
            <param name="source"> .</param>
            <param name="row">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseFindNext(System.Object,System.Int32,System.Int32)">
            <summary>
            This method causes a FindNext event to be raised against a source object.
            </summary>
            <param name="source"> .</param>
            <param name="rowIndex">   .</param>
            <param name="visibleRows">    The visible rows.</param>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseFindNextEnd(System.Object)">
            <summary>
            This method causes a FindNextEnd event to be raised against a source object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseCaseColumnChanged(System.Object)">
            <summary>
            This method causes a CaseColumnsChanged event to be raised against a source object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseCellError(System.Object,Infragistics.Win.UltraWinGrid.UltraGridCell,System.String)">
            <summary>
             Raise when cell error
            </summary>
            <param name="source"></param>
            <param name="cell"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridEvents.RaiseMenuRequest(System.Object,Aveva.ApplicationFramework.Presentation.ITool)">
            <summary>
            Raises MenuRequest event.
            </summary>
            <param name="sender"></param>
            <param name="menu"></param>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.BeforeCellUpdate">
            <summary>
            Occurs before a cell accepts a new value.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterCellUpdate">
            <summary>
            Occurs after a cell accepts a new value.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterSelectChange">
            <summary>
            Occurs after one or more row, cell, or column objects were selected or deselected.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.BeforeCellActivate">
            <summary>
            Occurs before a cell becomes active.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.CellChange">
            <summary>
            Occurs when a cell in edit mode has its value modified by the user.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterColPosChanged">
            <summary>
            Occurs after a column has been moved, sized or swapped.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterGroupPosChanged">
            <summary>
            Occurs after an UltraGridGroup object in the grid has been moved, sized, or swapped.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterRowFilterChanged">
            <summary>
            Occurs after a row filter has been changed.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterRowInsert">
            <summary>
            Occurs after a row has been inserted.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterRowsDeleted">
            <summary>
            Occurs after rows have been deleted.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.InitializeRow">
            <summary>
            Occurs after rows have been initialised.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.CutKeyPressed">
            <summary>
            Called when the Cut key combination is pressed on the grid.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.CopyKeyPressed">
            <summary>
            Called when the Copy key combination is pressed on the grid.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.PasteKeyPressed">
            <summary>
            Called when the paste key combination is pressed on the grid.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.DeleteKeyPressed">
            <summary>
            Called when the Delete key combination is pressed on the grid.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.SelectAllKeyPressed">
            <summary>
            Called when the Selected All key combination is pressed on the grid.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.CellDataError">
            <summary>
            Called when update data error occurs.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.GridError">
            <summary>
            Called on grid error.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.BeforeColPosChanged">
            <summary>
            Called when column position is changed.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.BeforeGroupPosChanged">
            <summary>
            Called when group position is changed.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterRowRegionScroll">
            <summary>
            Called when scroll region is scrolled.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.ColumnUnitChanged">
            <summary>
            Called when unit in column is changed.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.HeaderPinned">
            <summary>
            Called when header was pinned.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.CasesChanged">
            <summary>
            Called when number of columns with cases is changed.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.MultiCellOperationStarted">
            <summary>
            Called when time consuming operation is started.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.MultiCellOperationEnded">
            <summary>
            Called when time consuming operation is finished.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.MultiCellOperationCancelled">
            <summary>
            Called when time consuming operation is cancelled.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterRowActivate">
            <summary>
            Occurs after row is activated.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterCardsScroll">
            <summary>
            Occurs after card is scrolled.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterRowExpanded">
            <summary>
            Occurs when row is expanded.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.AfterSortChange">
            <summary>
            Occurs when sorting is changed.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.DeallocateRowCells">
            <summary>
            Occurs when cell rows were deallocated.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.FindNext">
            <summary>
            Occurs when searching next cell in find next method.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.FindNextEnd">
            <summary>
            Occurs when searching next cell in find next method has ended.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.InitializeLayout">
            <summary>
            Occurs after layout have been initialised.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.MouseClick">
            <summary>
            Occurs when mouse clicked.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.BeforeHeaderPinned">
            <summary>
            Called before header is pinned.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.RowFilterChange">
            <summary>
            Called when row filter is changed.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.BeforeRowFilterDropDownPopulate">
            <summary>
            Called before row filter dropdown populate.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.CaseColumnsChanged">
            <summary>
            Occurs when case columns are changes
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.CellError">
            <summary>
            Occurs when cell error
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridEvents.MenuRequest">
            <summary>
            Called when Menu request is called
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.KeyPressedHandler">
            <summary>
            This delegate is used by a number of the key press events.
            </summary>
            <param name="source">   The source of the event.</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.ColumnUnitChangedEventHandler">
            <summary>
            Delegate used by ColumnUnitChanged event.
            </summary>
            <param name="sender">   .</param>
            <param name="columnKey">    .</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.HeaderPinnedEventHandler">
            <summary>
            Delegate used by HeaderPinned.
            </summary>
            <param name="sender">   .</param>
            <param name="headerKey">    .</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.MultiCellOperationStartedHandler">
            <summary>
            Delegate used by MultiCellOperationStarted.
            </summary>
            <param name="sender"> .</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.MultiCellOperationEndedHandler">
            <summary>
            Delegate used by MultiCellOperationEnded.
            </summary>
            <param name="sender"> .</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.MultiCellOperationCancelledHandler">
            <summary>
            Delegate used by MultiCellOperationCancelled.
            </summary>
            <param name="sender"> .</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.DeallocateRowCellsHandler">
            <summary>
            Delegate used by DeallocateRowCells event.
            </summary>
            <param name="sender"> .</param>
            <param name="row">    .</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.FindNextHandler">
            <summary>
            Delegate used by FindNext event.
            </summary>
            <param name="sender"> .</param>
            <param name="rowIndex">   .</param>
            <param name="visibleRows">    The visible rows.</param>
            <returns>
            A bool.
            </returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.FindNextEndHandler">
            <summary>
            Delegate used by FindNextEnd event.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.BeforeHeaderPinnedEventHandler">
            <summary>
            Delegate used by BeforeHeaderPinned.
            </summary>
            <param name="sender"> .</param>
            <param name="headerKey">  .</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.CaseChanged">
            <summary>
            Delegate used by CaseColumnsChanged
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.CellErrorHandler">
            <summary>
            Delegate used by CellError
            </summary>
            <param name="sender"></param>
            <param name="cell"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridEvents.MenuRequestHandler">
            <summary>
            Delegate used by menu request event
            </summary>
            <param name="sender"></param>
            <param name="menuTool"></param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridLayout">
            <summary>
            DataGridLayout contains the definition of the layout to be used by a DataGridControl object.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.ScrollRegionsDisabled">
            <summary>
            Value that indicates that scroll regions should be disabled.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.ScrollRegionsEnabled">
            <summary>
            Value that indicates that scroll regions should be enabled.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.zoomDownLimit">
            <summary>
            Down limit for zoom
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.zoomUpLimit">
            <summary>
            Up limit for zoom
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.zoomDefaultFactor">
            <summary>
            Default factor for zoom
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.zoomInterval">
            <summary>
            Interval durin zoom operation
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.PIN_MARGIN">
            <summary>
            Margin at the end of grid to pin column\group
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.m_grid">
            <summary>
            The UltraWinGrid that this layout object pertains to.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.m_fixedAppearanceBackColour">
            <summary>
            The back colour used by the FixedHeaders() and FixedRows() methods when the cells are fixed.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.m_unfixedAppearanceBackColour">
            <summary>
            The back colour used by the FixedHeaders() and FixedRows() methods when the cells are not fixed.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.headerHighlight">
            <summary>
            The back color used by Find Column Heading
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.headerHighlightBorder">
            <summary>
            The border color used by Find Column Heading
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.m_bMultiSelectFilter">
            <summary>
            Stores the value of the MultiSelectFilter property of this class.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.m_gridConfig">
            <summary>
            The configuration of what to show in the grid
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.m_columnConfig">
            <summary>
            Column specific configuration such as the format for DbDoubles
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.m_cellConfig">
            <summary>
            Cell specific configuration such as the format for DbDoubles
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.m_hideDefaultValue">
            <summary>
            Attributes to hide the default values in the default grid layout.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.firstUnpinnedOriginX">
            <summary>
            Origin X for first unpinned column
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.regionsSplitterPosition">
            <summary>
            Regions splitter position
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.allowDragAndDrop">
            <summary>
            Indicate if drag and drop column/group is available while trying to do this for pinned/unpinned columns/groups
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.highlightedHeaders">
            <summary>
            List of highighted headers
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.ZoomGridProperty">
            <summary>
            Zoom grid object.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.zoomFactor">
            <summary>
            Zoom factor
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLayout.autoSizeEdit">
            <summary>
            Determines if auto-expanding pop-up edit windows is available.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.#ctor(Infragistics.Win.UltraWinGrid.UltraGrid,Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor.
            </summary>
            <param name="grid"> The grid associated with this layout.</param>
            <param name="control">  .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.#ctor">
            <summary>
            protected zero-parameter constructor to prevent use.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.InitLayoutDefaults">
            <summary>
            Initialise state required for the grid layout
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetDefaultColours">
            <summary>
            This method resets all of the colours stored in the DataGridLayout object to the default
            values.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.IsFixedHeader(System.String)">
            <summary>
            This method recovers the FixedHeader setting of the specified column.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <returns>
            bool: true if fixed, false otherwise.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetFixedHeader(System.String,System.Boolean)">
            <summary>
            This method sets the FixedHeader setting of the specified column.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <param name="fixedHeader">  bool: true if the column is to be fixed, false otherwise.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnPosition(System.String)">
            <summary>
            This method returns the visible position of the specified column. This relates directly the
            the VisiblePosition property in the column's Header in the corresponding grid.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <returns>
            int: the col.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnPosition(System.String,System.Int32)">
            <summary>
            This method sets the visible positon of the specified column. This relates directly the the
            VisiblePosition property in the column's Header in the corresponding grid.
            </summary>
            <param name="colID">    .</param>
            <param name="pos">  .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnDisplayData(System.String,System.Collections.Generic.Dictionary{System.Object,System.String},System.Collections.Generic.Dictionary{System.Object,System.Drawing.Image})">
            <summary>
            This method sets a display text and image for the column values.
            </summary>
            <param name="colID">    .</param>
            <param name="displayText">  pairs of column value and display text.</param>
            <param name="imageList">    pairs of column value and image.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnDisplayFormat(System.String,System.String)">
            <summary>
            Set the format for the display of data in the column.
            </summary>
            <param name="colID">    .</param>
            <param name="format">   the format string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnLayoutSort(System.Boolean,System.String,System.Int32)">
            <summary>
            Set or remove sort button width for specified column.
            </summary>
            <param name="add"></param>
            <param name="columnKey"></param>
            <param name="sortButtonWidth"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnLayoutSort(System.String)">
            <summary>
            Get sort button width for specified column.
            </summary>
            <param name="columnKey"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnLayoutColumnSortOrder(System.Boolean,System.String,System.Int32)">
            <summary>
            Sets ColumnSortOrder element width for specified column.
            </summary>
            <param name="add">  .</param>
            <param name="columnKey">    .</param>
            <param name="width">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnLayoutColumnSortOrder(System.String)">
            <summary>
            Gets ColumnSortOrder element width for specified column.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The column layout column sort order.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnLayoutSummaries(System.Boolean,System.String,System.Int32)">
            <summary>
            Set or remove summary button width for specified column.
            </summary>
            <param name="add">  .</param>
            <param name="columnKey">    .</param>
            <param name="summaryButtonWidth">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnLayoutSummaries(System.String)">
            <summary>
            Get summary button width for specified column.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The column layout summaries.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnLayoutPins(System.Boolean,System.String,System.Int32)">
            <summary>
            Set or remove pin button width for specified column.
            </summary>
            <param name="add">  .</param>
            <param name="columnKey">    .</param>
            <param name="pinButtonWidth">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnLayoutPins(System.String)">
            <summary>
            Get pin button width for specified column.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The column layout pins.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnLayoutUnits(System.Boolean,System.String,System.Int32)">
            <summary>
            Set or remove units button width for specified column.
            </summary>
            <param name="add">  .</param>
            <param name="columnKey">    .</param>
            <param name="unitsButtonWidth"> .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnLayoutUnits(System.String)">
            <summary>
            Get units button width for specified column.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The column layout units.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnLayoutPrecision(System.Boolean,System.String,System.Int32)">
            <summary>
            Set or remove precision button width for specified column.
            </summary>
            <param name="add">  .</param>
            <param name="columnKey">    .</param>
            <param name="precisionButtonWidth"> .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnLayoutPrecision(System.String)">
            <summary>
            Get precision button width for specified column.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The column layout precision.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnLayoutCase(System.Boolean,System.String,System.Int32)">
            <summary>
            Set or remove case button width for specified column.
            </summary>
            <param name="add">  .</param>
            <param name="columnKey">    .</param>
            <param name="caseButtonWidth">  .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnLayoutCase(System.String)">
            <summary>
            Get case button width for specified column.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The column layout case.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetFixedColIDs">
            <summary>
            Returns list of fixed headers.
            </summary>
            <returns>
            The fixed col i ds.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetFixedColIDs(System.Collections.Generic.List{System.String})">
            <summary>
            Sets list of fixed headers.
            </summary>
            <param name="newList">  .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.Zoom(System.Int32)">
            <summary>
            Zoom grid with given zoom factor.
            </summary>
            <param name="zoomFactor">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetZoom">
            <summary>
            Resets zooms. Set grid to origin size.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.RemoveDatabaseErrorColor">
            <summary>
            Sets UltraGrids DataErrorCellApperance backcolor as Color.Empty.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnCanBePinned(System.String)">
            <summary>
            Check if column\group can be pinned. Displays a message if not.
            </summary>
            <param name="columnKey">    Column key to be pinned.</param>
            <returns>
            true - can be pinned - there is enough space to use horizontal scroll bar false - can not be
            pinned.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetActiveColScrollRegion(System.Int32)">
            <summary>
            Set given column scroll region active.
            </summary>
            <param name="colScrollRegion">  Column scroll region index.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.PropertyDescriptor(System.String)">
            <summary>
            Gets column property descriptor.
            </summary>
            <param name="colId">    .</param>
            <returns>
            A PropertyDescriptor.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResizeAllColumns">
            <summary>
            This method changes the AutoFitStyle in the DisplayLayout of the grid to
            AutoFitStyle.ResizeAllColumns.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.CalculateAutoResizeWidth(Infragistics.Win.UltraWinGrid.UltraGridColumn)">
            <summary>
            Calculate column auto resize width taking into account width of additional buttons.
            </summary>
            <param name="column">   .</param>
            <returns>
            The calculated automatic resize width.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.AutoFitColumns">
            <summary>
            This method calls PerformAutoResize(VisibleRows) on all the columns in Band[0] of the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.CardViewResetMaxCardAreaRows">
            <summary>
            Resets MaxCardAreaRows to its default value (0)
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.CardViewResetShowCaption">
            <summary>
            Reset ShowCaption in card view mode to default (true)
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.DisableSortIndicator">
            <summary>
            Disable sort indicator for all grid columns.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.setAlternateRowColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method sets the colour values stores in the Override. RowAlternateAppearance.BackColor
            property of the DisplayLayout on the corresponding grid using the RGB colour values passed
            into this method as parameters.
            </summary>
            <param name="red">  Red value of the colour to be used.</param>
            <param name="green">    Green value of the colour to be used.</param>
            <param name="blue"> Blue value of the colour to be used.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetColumnProperties">
            <summary>
            This method removes all fixed columns, sorts and filters on the corresponding grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetColumnFilters">
            <summary>
            This method clears all of the filters on the corresponding grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDefaultValueString(System.String)">
            <summary>
            Sets the string to display for any attributes that are set to their default value (this
            includes attributes that return unset)
            </summary>
            <param name="dflt">The string to display for defaulted attributes, set to null to see the
                               default value.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDefaultValueString(System.String,System.Boolean)">
            <summary>
            Sets the string to display for any attributes that are set to their default value (this
            includes attributes that return unset)
            </summary>
            <param name="dflt">The string to display for defaulted attributes, set to null to see the
                               default value.</param>
            <param name="excludeBooleans">Indicates whether bool values should be updated with this default
                                          value.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDefaultValueString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Sets the string to display for any attributes that are set to their default value for a given
            set of columns.
            </summary>
            <param name="colIds">   The columns to use the unset string.</param>
            <param name="dflt">The string to display for defaulted attributes.  If null the attributes
                               default value will be displayed.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetDefaultValueString">
            <summary>
            Gets the string that is to be displayed for each column. Nb a null value will result in the
            default value for the attribute being displayed.
            </summary>
            <returns>
            The default value string.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetNulrefString(System.String)">
            <summary>
            Sets the string to display for reference attributes that haven't been set.
            </summary>
            <param name="nulref">   The string to display.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetNulrefString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Sets the string to display for reference attributes that haven't been set for a specific set
            of columns.
            </summary>
            <param name="colIds">   The columns to display the nulref string in.</param>
            <param name="nulref">   The string to display for null elements.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetNulrefString">
            <summary>
            Gets the strings that are to be displayed for Null elements for each column.
            </summary>
            <returns>
            The nulref string.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetInvalidRefString(System.String)">
            <summary>
            Sets the string to display for invalid elements for all columns.
            </summary>
            <param name="iref"> the display string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetInvalidRefString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Sets the string to display for invalid elements in specific columns.
            </summary>
            <param name="colIds">   The name of the property in the column.</param>
            <param name="iref"> The display string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetInvalidRefString">
            <summary>
            Gets the strings that are displayed for invalid references in each column.
            </summary>
            <returns>
            The invalid reference string.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetNullValueString(System.String)">
            <summary>
            Sets the strings that are displayed for null value for all columns.
            </summary>
            <param name="nval"> The display string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetNullValueString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Sets the strings that are displayed for null value in specific columns.
            </summary>
            <param name="colIds">   The name of the property in the column.</param>
            <param name="nval"> The display string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetNullValueString">
            <summary>
            Gets the strings that are displayed for null value in each column.
            </summary>
            <returns>
            The null value string.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetShowLeadingSlash(System.Boolean)">
            <summary>
            Indicates whether leading slashes should be displayed for names.
            </summary>
            <param name="show"> true to include leading slashes in name display.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetShowLeadingSlash(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Indicates whether leading slashes should be shown for name attributes of specific columns.
            </summary>
            <param name="colIds">   the names of the column properties.</param>
            <param name="show"> tur eto show slashes otherwise false.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetShowLeadingSlash">
            <summary>
            gets the flag for each columns indicating whether leading slashes are to be shown.
            </summary>
            <returns>
            The show leading slash.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetShowUnitsWithValues(System.Boolean)">
            <summary>
            Indicates whether units of measure are to be displayed with dimensioned values.
            </summary>
            <param name="show"> true to include the units.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetShowUnitsWithValues(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Indicates whether leading slashes should be shown for name attributes of specific columns.
            </summary>
            <param name="colIds">   the names of the column properties.</param>
            <param name="show"> tur eto show slashes otherwise false.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ShowUnitsWithValues">
            <summary>
            gets the flag for each columns indicating whether leading slashes are to be shown.
            </summary>
            <returns>
            A Dictionary&lt;string,bool&gt;
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDateTimeFormatString(System.String)">
            <summary>
            Sets a string used to control the formatting of displayed date time for all columns. Because
            of input mask limitations only MM, dd, yy, hh, HH, mm, ss, tt tokens are acceptable.
            </summary>
            <param name="format">   The format string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDateTimeFormatString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Sets a string used to control the formatting of displayed date time in specific columns.
            Because of input mask limitations only MM, dd, yy, hh, HH, mm, ss, tt tokens are acceptable.
            </summary>
            <param name="colIds">   The name of the property in the column.</param>
            <param name="format">   The format string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetDateTimeFormatString">
            <summary>
            Gets a string used to control the formatting of displayed date time in each column.
            </summary>
            <returns>
            The date time format string.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetLogicalDeleteFormat(Aveva.Core.Editors.DbLogicalDeleteFormat)">
            <summary>
            Indicates how logically deleted elements are displayed for reference attributes.
            </summary>
            <param name="format">Format.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetLogicalDeleteFormat(System.Collections.Generic.List{System.String},Aveva.Core.Editors.DbLogicalDeleteFormat)">
            <summary>
            Indicates how logically deleted elements are displayed for reference attributes of specific columns.
            </summary>
            <param name="colIds">The names of the column properties.</param>
            <param name="format">Format.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetLogicalDeleteFormat">
            <summary>
            Gets a format used to control the formatting of logically deleted elements.
            </summary>
            <returns>
            The format.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetToolTipText(Aveva.Core.Presentation.DataGrid.CellIdentity,System.String)">
            <summary>
            This method sets the tooltip for the cell specified to the text provided in TooltipText.
            </summary>
            <param name="cellID">   The identity of the cell whose tooltip text is to be changed.</param>
            <param name="tooltipText">  The new tooltip text to be used.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ClearAllToolTipText">
            <summary>
            This method clears all of the tooltips in the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDbFormat(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.CellIdentity},Aveva.Core.Database.DbFormat)">
            <summary>
            Sets the Dbformat object for all given cells. Nb the format object is cloned for each cell.
            </summary>
            <param name="cellIds">The identifiers of the cells to set the format on.</param>
            <param name="format">The format object to use to display DbDoubles in the given cell.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDbFormatPrecision(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.CellIdentity},System.Int32)">
            <summary>
            Sets the Dbformat precision property for all given cells. Nb the format object is cloned for each cell.
            </summary>
            <param name="cellIds"></param>
            <param name="precision"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDbFormatTrailZeros(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.CellIdentity},System.Boolean)">
            <summary>
            Sets the Dbformat TrailZeros property for all given cells. Nb the format object is cloned for each cell.
            </summary>
            <param name="cellIds"></param>
            <param name="trailZeros"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDbFormat(System.Collections.Generic.Dictionary{Aveva.Core.Presentation.DataGrid.CellIdentity,Aveva.Core.Database.DbFormat})">
            <summary>
            Sets provided DbFormats for provided cells ids collection. Nb the format object is cloned for each cell.
            </summary>
            <param name="dbFormatsCell">Collection containing cells ids and their DbFormats to set.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetCellUnitsToDefault">
            <summary>
            Reset cells units to the default ones.
            Note that for cell default one is from column of cell.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDbFormat(System.Collections.Generic.List{System.String},Aveva.Core.Database.DbFormat)">
            <summary>
            Sets the Dbformat object for all given columns.  Nb the format object is cloned for each
            column.
            </summary>
            <param name="colIds">   the identities of the columns to set the format on.</param>
            <param name="format">The format object to use to display DbDoubles in the given columns.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDbFormat(System.Collections.Generic.Dictionary{System.String,Aveva.Core.Database.DbFormat})">
            <summary>
            Sets provided DbFormats for provided columns name collection.
            </summary>
            <param name="dbFormatsCol">Collection containing column names and their DbFormats to set.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetColumnUnitsToDefault">
            <summary>
            Reset column units to the default ones.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetDbFormats">
            <summary>
            Gets the format objects for all of the columns.
            </summary>
            <returns>
            The database formats.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.Width(System.String)">
            <summary>
            Gets the format objects for all of the columns.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <returns>
            An int.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.DbFormat(System.String)">
            <summary>
            Returns the DbFormat object for a given column.
            </summary>
            <param name="colId">    The identity of the column.</param>
            <returns>
            A DbFormat.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnCaption(System.String)">
            <summary>
            This method returns the caption for the column requested.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <returns>
            The column caption.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnDataType(System.String)">
            <summary>
            Returns the data type for column.
            </summary>
            <param name="colID">    .</param>
            <returns>
            The column data type.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnTitle(System.String,System.String)">
            <summary>
            Sets the caption on the specified column to the string supplied.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <param name="caption">  The new caption for the column.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnSortOrder(System.String)">
            <summary>
            Returns the SortOrder of the requested column.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <returns>
            The column sort order.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnSortOrder(System.String,Infragistics.Win.UltraWinGrid.SortIndicator)">
            <summary>
            This method sets the SortOrder of the specified column.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <param name="order">    The SortOrder to set on the column.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetColumnSorting">
            <summary>
            This method clears the SortOrder on all columns.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.EnableColumnSorting">
            <summary>
            This method enables column sorting for the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.DisableColumnSorting">
            <summary>
            This method disables column sorting for the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnSortComparer(System.String,System.Collections.IComparer)">
            <summary>
            This method sets the custom sorter of the specified column.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <param name="comparer"> The custom sort comparer to set on the column.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetColumnSettings">
            <summary>
            Thsi method resets the default column settings.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetDefaultStyle">
            <summary>
            Reset some grid layout options to defaults, used when opening old lists in Tags.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnHeaderGroupCreate(System.String)">
            <summary>
            Create a group column header (multi-level headings)
            </summary>
            <param name="GroupName">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnHeaderGroupCreate(System.String,System.String)">
            <summary>
            Create a group column header with a caption (multi-level headings)
            </summary>
            <param name="GroupName">    .</param>
            <param name="Caption">  .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnHeaderGroupDelete(System.String)">
            <summary>
            Delete a group column header (multi-level headings)
            </summary>
            <param name="GroupName">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnHeaderGroupVisible(System.String,System.Boolean)">
            <summary>
            Make chosen group visible or hidden.
            </summary>
            <param name="groupName">    Name of group.</param>
            <param name="visible">  true if visible, false if not.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.IsColumnHeaderGroupVisible(System.String)">
            <summary>
            Check if given group is visible.
            </summary>
            <param name="groupName">    Name of group.</param>
            <returns>
            true - visible. false - hidden.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnHeaderGroupAddColumn(System.String,System.String)">
            <summary>
            Add a column to a group column (multi-level headings)
            </summary>
            <param name="GroupName">    .</param>
            <param name="ColumnName">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnHeaderGroupAddToParent(System.String,System.String)">
            <summary>
            Add a group column to another group column (multi-level headings)
            </summary>
            <param name="ParentGroupName">  .</param>
            <param name="GroupName">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnHeaderGroupResetParent(System.String)">
            <summary>
            Reset the column group (multi-level headings)
            </summary>
            <param name="GroupName">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnHeaderGroupResetColumnGroup(System.String)">
            <summary>
            Reset the column (multi-level headings)
            </summary>
            <param name="ColumnName">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnHeaderGroupReset">
            <summary>
            Reset all column groups (multi-level headings)
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetGroupTitle(System.String)">
            <summary>
            Get the caption for a group column.
            </summary>
            <param name="groupKey"> Column tag.</param>
            <returns>
            Group caption.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.getRowGroups">
            <summary>
            Get a list of all the groups.
            </summary>
            <returns>
            The row groups.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.getHeaderGroups">
            <summary>
            Get a list of all the groups.
            </summary>
            <returns>
            The header groups.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.getParentGroupForGroup(System.String)">
            <summary>
            Returns parent's group name for a given group.
            </summary>
            <param name="GroupName">    .</param>
            <returns>
            The parent group for group.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.getParentGroupForColumn(System.String)">
            <summary>
            Returns parent's group name for a given column.
            </summary>
            <param name="colName">  .</param>
            <returns>
            The parent group for column.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetGroupOrigin(System.String,System.Drawing.Point)">
            <summary>
            Set the origin for the group header GroupName.
            </summary>
            <param name="GroupName">    .</param>
            <param name="value">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetGroupOrigin(System.String)">
            <summary>
            Get the origin for the group header GroupName.
            </summary>
            <param name="GroupName">    .</param>
            <returns>
            The group origin.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetGroupSpan(System.String,System.Drawing.Point)">
            <summary>
            Set the span for the group header GroupName.
            </summary>
            <param name="GroupName">    .</param>
            <param name="value">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetGroupSpan(System.String)">
            <summary>
            Get the span for the group header GroupName.
            </summary>
            <param name="GroupName">    .</param>
            <returns>
            The group span.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetGroupLabelSpan(System.String,System.Int32)">
            <summary>
            Set the label span for the group header GroupName.
            </summary>
            <param name="GroupName">    .</param>
            <param name="value">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnOrigin(System.String,System.Drawing.Point)">
            <summary>
            Set the origin for the column colID.
            </summary>
            <param name="colID">    .</param>
            <param name="value">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnOrigin(System.String)">
            <summary>
            Get the origin for the column colID.
            </summary>
            <param name="colID">    .</param>
            <returns>
            The column origin.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnSpan(System.String,System.Drawing.Point)">
            <summary>
            Set the span for the column colID.
            </summary>
            <param name="colID">    .</param>
            <param name="value">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnSpan(System.String)">
            <summary>
            Get the span for the column colID.
            </summary>
            <param name="colID">    .</param>
            <returns>
            The column span.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnSpanResolved(System.String)">
            <summary>
            Get the span for the column colID.
            </summary>
            <param name="colID">    .</param>
            <returns>
            The column span resolved.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.AlignColumnHeaderVertically(System.String,Aveva.Core.Presentation.DataGrid.DataGridControl.VerticalAlignment)">
            <summary>
            Vertically align the text in the column ColumnName.
            </summary>
            <param name="ColumnName">   Column name.</param>
            <param name="Align">    The alignment to use.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.AlignGroupHeaderVertically(System.String,Aveva.Core.Presentation.DataGrid.DataGridControl.VerticalAlignment)">
            <summary>
            Vertically align the text in the group column header GroupName.
            </summary>
            <param name="GroupName">    Column name.</param>
            <param name="Align">    The alignment to use.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnSortPrecedence">
            <summary>
            This method returns a hashtable that indicates the precedence of column sorting.  The lower
            the number in the hashtable, the higher the sort precedence.
            </summary>
            <returns>
            Hastable: containing {precedence,colID} pairs.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetColumnUnit(Aveva.Core.Editors.DbPropertyDescriptor,System.Collections.Generic.Dictionary{System.String,Aveva.Core.Database.DbFormat})">
            <summary>
            Reset a column unit to default.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnConfig(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Gets the configuration for the columns requested.
            If there isn't one it won't get returned unless create is set to true.
            </summary>
            <param name="colIds">the names of the columns to get the config for</param>
            <param name="create">creates a config if one doesn't already exist</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetCellConfig(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.CellIdentity},System.Boolean)">
            <summary>
            Gets the configuration for the cells requested.
            If there isn't one it won't get returned unless create is set to true.
            </summary>
            <param name="cellIds">the identity of the cells to get the config for</param>
            <param name="create">creates a config if one doesn't already exist</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ClearGridConfiguration">
            <summary>
            Clears the display configuration for the current grid. should be called before the grid is
            bindings are changed.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDefaultGridConfiguration">
            <summary>
            Sets the default configuration for the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.CopyContextConfig(Infragistics.Win.UltraWinGrid.UltraGridColumn,Infragistics.Win.UltraWinGrid.UltraGridColumn)">
            <summary>
            Copies the context configuration.
            </summary>
            <param name="sourceColumn"> Source column.</param>
            <param name="destinationColumn">    Destination column.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.UpdateMultiSelectFilter">
            <summary>
            This method updates the UI based on the current value of the MultiSelectFilter property
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetDbDoubleColumnSummaries(System.Boolean)">
            <summary>
            This method turns column summaries on or off for DbDouble columns
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.DbFormat(Infragistics.Win.UltraWinGrid.UltraGridColumn)">
            <summary>
            Returns the DbFormat object for a given column.
            </summary>
            <param name="column">   The column.</param>
            <returns>
            DbFormat: The DbFormat object for the column requested.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.AddFixedColumn(System.String)">
            <summary>
            Adds a column to the set of fixed columns.
            </summary>
            <param name="colID">    The ID of the column to add.</param>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.RemoveFixedColumn(System.String)">
            <summary>
            Removes a column from the set of fixed columns.
            </summary>
            <param name="colID">    The ID of the column to remove.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.IsFixedColumn(System.String)">
            <summary>
            This method indicates if a column is fixed or not.
            </summary>
            <param name="colID">    The ID of the column to be checked.</param>
            <returns>
            bool: true if fixed, false otherwise.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.CleanFixedColumns">
            <summary>
            Removes fixed columns if they no longer appear in our table.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.BeforeRowLayoutItemResized(System.Object,Infragistics.Win.UltraWinGrid.BeforeRowLayoutItemResizedEventArgs)">
            <summary>
            Avoid resize pinned columns.
            </summary>
            <param name="sender">   .</param>
            <param name="e">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.BeforeGroupPosChanged(System.Object,Infragistics.Win.UltraWinGrid.BeforeGroupPosChangedEventArgs)">
            <summary>
            Avoid pinned group to change position.
            </summary>
            <param name="sender">   .</param>
            <param name="e">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.BeforeColPosChanged(System.Object,Infragistics.Win.UltraWinGrid.BeforeColPosChangedEventArgs)">
            <summary>
            Avoid pinned column to change position.
            </summary>
            <param name="sender">   .</param>
            <param name="e">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetElementFromPoint(System.Int32,System.Int32)">
            <summary>
            Gets element from point.
            </summary>
            <param name="x">    The x coordinate.</param>
            <param name="y">    The y coordinate.</param>
            <returns>
            The element from point.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse move.
            </summary>
            <param name="sender">   .</param>
            <param name="e">    Mouse event information.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnBackColour(System.String,System.Drawing.Color)">
            <summary>
            Set back colour for column cells.
            </summary>
            <param name="columnKey">    .</param>
            <param name="colour">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnForeColour(System.String,System.Drawing.Color)">
            <summary>
            Set fore colour for column cells.
            </summary>
            <param name="columnKey">    .</param>
            <param name="colour">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnAlternateBackColour(System.String,System.Drawing.Color)">
            <summary>
            Set alternate back colour for column cells.
            </summary>
            <param name="columnKey">    .</param>
            <param name="colour">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnBackColour(System.String)">
            <summary>
            Get back colour for column cells.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The column back colour.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnForeColour(System.String)">
            <summary>
            Get fore colour for column cells.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The column foreground colour.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnAlternateBackColour(System.String)">
            <summary>
            Get alternate back colour for column cells.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The column alternate back colour.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnHeaderBackColour(System.String,System.Drawing.Color)">
            <summary>
            Set back colour for column header.
            </summary>
            <param name="columnKey">    .</param>
            <param name="colour">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetColumnHeaderForeColour(System.String,System.Drawing.Color)">
            <summary>
            Set fore colour for column header.
            </summary>
            <param name="columnKey">    .</param>
            <param name="colour">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnHeaderBackColour(System.String)">
            <summary>
            Get back colour for column header.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The column header back colour.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetColumnHeaderForeColour(System.String)">
            <summary>
            Get fore colour for column header.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The column header foreground colour.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetGroupHeaderBackColour(System.String,System.Drawing.Color)">
            <summary>
            Set back colour for group header.
            </summary>
            <param name="groupKey"> .</param>
            <param name="colour">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetGroupHeaderForeColour(System.String,System.Drawing.Color)">
            <summary>
            Set fore colour for group header.
            </summary>
            <param name="groupKey"> .</param>
            <param name="colour">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetGroupHeaderBackColour(System.String)">
            <summary>
            Get back colour for group header.
            </summary>
            <param name="groupKey"> .</param>
            <returns>
            The group header back colour.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetGroupHeaderForeColour(System.String)">
            <summary>
            Get fore colour for group header.
            </summary>
            <param name="groupKey"> .</param>
            <returns>
            The group header foreground colour.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetColumnBackColour(System.String)">
            <summary>
            Reset back color for column, used when column is unpinned.
            </summary>
            <param name="columnKey">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetHeaderBackColour(System.String)">
            <summary>
            Set column header as highlighted.
            </summary>
            <param name="columnKey">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetHighlightHeaderColour">
            <summary>
            Reset highlighted columns header.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetHeaderBackColour(System.String)">
            <summary>
            Reset highlighted column header.
            </summary>
            <param name="columnKey">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ResetHeadersBackColour">
            <summary>
            Reset all headers back color.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ScrollViewToColumn(System.String)">
            <summary>
            Scroll grid to the column. If there are fixed headers, non pinned area is scrolled.
            </summary>
            <param name="columnKey">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ScrollViewToGroup(System.String)">
            <summary>
            Scroll grid to the group. If there are fixed headers, non pinned area is scrolled.
            </summary>
            <param name="groupKey"> .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetAllGroupDescendants(System.String)">
            <summary>
            Returns all descendants (columns) for given group key.
            </summary>
            <param name="groupKey"> .</param>
            <returns>
            all group descendants.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetTopLevelGroup(System.String)">
            <summary>
            Returns Top Level group key for given column key.
            </summary>
            <param name="columnKey">    .</param>
            <returns>
            The top level group.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetTopLevelGroup(Infragistics.Win.UltraWinGrid.UltraGridColumn)">
            <summary>
            Returns top-level group key for given column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.FindTopLevelGroup(Infragistics.Win.UltraWinGrid.UltraGridGroup)">
            <summary>
            Find top-level group for given group
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.UpdateSplitterPosition">
            <summary>
            Update splitter position used in scroll regions.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetCustomSummaries">
            <summary>
            Get custom summaries from columns in grid.
            </summary>
            <returns>
            Object with custom summaries, where key is Column key and value is list with custom summaries.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.SetCustomSummaries(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}})">
            <summary>
            Set custom summaries on columns grid.
            </summary>
            <param name="columnsCustomSummaries">   Object with columns custom summaries.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.UpdateColumnLayout">
            <summary>
            Update column layout with splitter, groups, pins etc...
            </summary>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetAllColumns">
            <summary>
            Gets all columns.
            </summary>
            <returns>
            all columns.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.TotalFixedWidth">
            <summary>
            Total fixed width.
            </summary>
            <returns>
            The total number of fixed width.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.GetFirstUnfixedColumn">
            <summary>
            Gets the first unfixed column.
            </summary>
            <returns>
            The first unfixed column.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.ScrollFirstUnfixedInView">
            <summary>
            Scroll first unfixed in view.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.RemoveAllSwapButtons(System.Object,System.EventArgs)">
            <summary>
            Removes all swap buttons.
            </summary>
            <param name="sender">   .</param>
            <param name="e">    Event information.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.UpdateToLatestVersion">
            <summary>
            Updates to latest version.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.MoveGridOrigins(System.Int32,Infragistics.Win.UltraWinGrid.UltraGridGroup,Infragistics.Win.UltraWinGrid.UltraGridBand,System.Int32)">
            <summary>
            Move columns form given originX by given points number.
            </summary>
            <param name="startOriginX"> Start originX to move from.</param>
            <param name="parentGroup">  Origin X parent group.</param>
            <param name="groupBand">    Column band.</param>
            <param name="moveOn">   (Optional) Move by origin points.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayout.FindLastColumnInOriginX(System.Int32,Infragistics.Win.UltraWinGrid.UltraGridGroup,Infragistics.Win.UltraWinGrid.UltraGridBand)">
            <summary>
            Searches for the last column in origin x coordinate.
            </summary>
            <param name="originX">  The origin x coordinate.</param>
            <param name="group">    .</param>
            <param name="groupBand">    Column band.</param>
            <returns>
            The found column in origin x coordinate.
            </returns>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColScrollRegionsWidth">
            <summary>
            Returns column scroll regions width
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.VerticalScrollBarWidth">
            <summary>
            Returns vertical scrollbar width
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.FixedAppearanceBackColour">
            <summary>
            The back colour used by the FixedHeaders() and FixedRows() methods when the cells are fixed.
            </summary>
            <value>
            The colour of the fixed appearance back.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.UnfixedAppearanceBackColour">
            <summary>
            The back colour used by the FixedHeaders() and FixedRows() methods when the cells are not
            fixed.
            </summary>
            <value>
            The colour of the unfixed appearance back.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.AlternateUnfixedBackColor">
            <summary>
            The alternate back colour to be used to give the grid a striped effect. Set this property to
            null to turn off stripes.
            </summary>
            <value>
            The color of the alternate unfixed back.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.EditSuccessColour">
            <summary>
            The back colour used for cell edit success.
            </summary>
            <value>
            The colour of the edit success.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.EditFailColour">
            <summary>
            The back colour used for cell edit failure.
            </summary>
            <value>
            The colour of the edit fail.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.HighlightColour">
            <summary>
            The back colour used for cell highlight.
            </summary>
            <value>
            The colour of the highlight.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ReadOnlyColour">
            <summary>
            The back colour used for cell highlight.
            </summary>
            <value>
            The colour of the read only.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.HeaderHighlight">
            <summary>
            The back color used for highligh column headers.
            </summary>
            <value>
            The header highlight.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.HeaderHighlightBorder">
            <summary>
            The border color used for highligh column headers.
            </summary>
            <value>
            The header highlight border.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.HighlightedHeader">
            <summary>
            Last highlighted haders.
            </summary>
            <value>
            The highlighted header.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.HighlightedHeaderIndex">
            <summary>
            Last header index of highlighted haders.
            </summary>
            <value>
            The highlighted header index.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ContextMenu">
            <summary>
            The name of the context menu to be used in the grid. If is set to null, then the default menu
            name will be returned. It is set to null by default. This property will never return a null
            value.
            </summary>
            <value>
            The context menu.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.HeaderMenu">
            <summary>
            The name of the header menu to be used in the grid. If is set to null, then the default menu
            name will be returned. It is set to null by default. This property will never return a null
            value.
            </summary>
            <value>
            The header menu.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.GridWidth">
            <summary>
            Retunrs Grid control width. Used when splitting grid for pinned columns/groups.
            </summary>
            <value>
            The width of the grid.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ZoomFactor">
            <summary>
            Get zoom factor.
            </summary>
            <value>
            The zoom factor.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ZoomDownLimit">
            <summary>
            Get down limit for zoom.
            </summary>
            <value>
            The zoom down limit.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ZoomUpLimit">
            <summary>
            Get up limit for zoom.
            </summary>
            <value>
            The zoom up limit.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ZoomDefaultFactor">
            <summary>
            Get default zoom factor.
            </summary>
            <value>
            The zoom default factor.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ZoomInterval">
            <summary>
            Get zoom interval.
            </summary>
            <value>
            The zoom interval.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.AutoSizeEdit">
            <summary>
            Determines if auto-expanding pop-up edit windows is available.
            </summary>
            <value>
            true if automatic size edit, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ShowDatabaseErrors">
            <summary>
            Value indicating whether to show database errors in expression columns in grid or not.
            </summary>
            <value>
            true if show database errors, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.IsModified">
            <summary>
            True if grid layout was modified, false if wasn't.
            </summary>
            <value>
            true if this Aveva.Core.Presentation.DataGrid.DataGridLayout is modified, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnSelectionTransparent">
            <summary>
            Transparent selection, when column is selected.
            </summary>
            <value>
            true if column selection transparent, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.WrapHeaderText">
            <summary>
            Bool indicating if text in column headers should we wrapped or not.
            </summary>
            <value>
            true if wrap header text, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ActiveColScrollRegionPosition">
            <summary>
            Active column scroll region position
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ShowCaseIcons">
            <summary>
            Show case icons in column headers
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.AllFixedHeaders">
            <summary>
            The propery allows access to a list of the IDs of all of the fixed columns.
            </summary>
            <value>
            all fixed headers.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ShowUnitsInHeaders">
            <summary>
            This method sets the column headers to display the current units, if there are any to display,
            or turns them off if desired.
            </summary>
            <value>
            true if show units in headers, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.PinOn">
            <summary>
            This property indicates whether pins should be shown on column headers.
            </summary>
            <value>
            true if pin on, false if not.
            </value>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridLayout.AfterGridZoom">
            <summary>
            After grid zoom event.
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.FixedHeaders">
            <summary>
            Gets true if there are pinned columns/groups in Grid.
            </summary>
            <value>
            true if fixed headers, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.FixedRows">
            <summary>
            This property provides fixed row functionality that is similar to the FixedHeaders
            functionality also provided in this class.
            </summary>
            <value>
            true if fixed rows, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.SplitGrid">
            <summary>
            This method sets the MaxColScrollRegions and the MaxRowScrollRegions values on the
            DisplayLayout in the corresponding grid to enable or disable spilt grids, as desired.
            </summary>
            <value>
            true if split grid, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.HideGroupByBox">
            <summary>
            This method sets the GroupByBox.Hidden property on the DisplayLayout in the correspodning
            grid in oder to show or hide the 'group by' box, as desired.
            </summary>
            <value>
            true if hide group by box, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ErrorIcon">
            <summary>
            This propery relates directly to the SupportDataErrorInfo property of the
            DisplayLayout.Override in the corresponding grid. When enabled, it sets the value to
            RowsAndCells and when disabled, sets it to None.
            </summary>
            <value>
            true if error icon, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.CardView">
            <summary>
            This property relates directly to the CardView property in DisplayLayout.Bands[0] of the
            corresponding grid.  When this property is enabled, CardSettings.Autofit will alwaus be true
            and the CardSettings.Style will be StandardLabels.
            </summary>
            <value>
            true if card view, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.CardViewMaxCardAreaRows">
            <summary>
            Maximum number of cards displayed in the vertical dimension within the card area
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.CardViewShowCaption">
            <summary>
            Show the caption for each row or not in card view mode
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.OutlookGroupStyle">
            <summary>
            This property relates directly to ViewStyleBand on the DisplayLayout of the corresponding
            gird.
            </summary>
            <value>
            true if outlook group style, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ExtendLastColumn">
            <summary>
            This properly relates directly to the AutoFitStyle on the DisplayLayout of the corresponding
            grid.
            </summary>
            <value>
            true if extend last column, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.MultiSelectFilter">
            <summary>
            This property is used in conjunction with the ColumnExcelFilter property to ensure that the
            UI is set up correctly for MultiSelectFilter or non-MultiSelectFilter modes.
            </summary>
            <value>
            true if multi select filter, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnExcelFilter">
            <summary>
            This property relates directly to the AllowRowFiltering property on the
            DisplayLayout.Override of the corresponding Grid.  It also interacts with the current value
            of the MultiSelectFilter property to ensure that the UI is set up correctly.
            </summary>
            <value>
            true if column excel filter, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnSummaries">
            <summary>
            Turn on the ability to create column summaries for a numeric column.
            </summary>
            <value>
            true if column summaries, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnSort">
            <summary>
            Turn on/off the ability to sort all columns in the grid.
            </summary>
            <value>
            true if column sort, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnSelect">
            <summary>
            Turn on/off the ability to select all columns in the grid. It will disable possibility to
            sort columns.
            </summary>
            <value>
            true if column select, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.SingleRowSelection">
            <summary>
            This property relates directly to the SelectTypeRow property on the DisplayLayout.Override of
            the corresponding Grid.
            </summary>
            <value>
            true if single row selection, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.WholeRowSelection">
            <summary>
            Gets or sets a value indicating whether the whole row selection.
            </summary>
            <value>
            true if whole row selection, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ShowMultilineText">
            <summary>
            Set to show all lines of text in the cells.
            </summary>
            <value>
            true if show multiline text, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.GridCaption">
            <summary>
            This property sets a grid caption. If it is set to a null string, or string.Empty, then the
            grid caption is removed.
            </summary>
            <value>
            The grid caption.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.GroupMoving">
            <summary>
            Enables/disables the moving of multiple level group columns.
            </summary>
            <value>
            The group moving.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.ColumnMoving">
            <summary>
            Enables/disables the moving of columns.
            </summary>
            <value>
            The column moving.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.FixedOnImage">
            <summary>
            Gets the fixed on image.
            </summary>
            <value>
            The fixed on image.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayout.FixedOffImage">
            <summary>
            Gets the fixed off image.
            </summary>
            <value>
            The fixed off image.
            </value>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridLayout.GridZoomDelegate">
            <summary>
            Delegate for aftre grid zoom event.
            </summary>
            <param name="sender">   .</param>
            <param name="zoomFactor">   .</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridLogger">
            <summary>
            DataGridLogger class for logging DataGrid related events
            This class raises log events that can be utilised by the calling application
            Events are registered with the Aveva.Core.Database.Xml.LogManager which outputs all events to file.
            The log file is located in %AVEVA_DESIGN_WORK% in the schematics folder.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridLogger.m_instance">
            <summary>
            singleton instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogMessage(System.String)">
            <summary>
            Raises a log event for an information message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogMessage(System.String,System.Object[])">
            <summary>
            Raises a log event for an information message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogMessage(System.String,System.String)">
            <summary>
            Raises a log event for an information message
            </summary>
            <param name="resourceKey">The identity of the message within the given resource set</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogMessage(System.String,System.String,System.Object[])">
            <summary>
            Raises a log event for an information message
            </summary>
            <param name="resourceKey">The identity of the message within the given resource set</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogWarning(System.String)">
            <summary>
            Raises a log event for a warning message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogWarning(System.String,System.Object[])">
            <summary>
            Raises a log event for a warning message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogWarning(System.String,System.String)">
            <summary>
            Raises a log event for a warning message
            </summary>
            <param name="resourceKey">The identity of the message within the given resource set</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogWarning(System.String,System.String,System.Object[])">
            <summary>
            Raises a log event for a warning message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogError(System.String)">
            <summary>
            Raises a log event for an error message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogError(System.String,System.Object[])">
            <summary>
            Raises a log event for an error message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogError(System.String,System.String)">
            <summary>
            Raises a log event for an error message
            </summary>
            <param name="resourceKey">The identity of the message within the given resource set</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogError(System.String,System.String,System.Object[])">
            <summary>
            Raises a log event for an error message
            </summary>
            <param name="resourceKey">The identity of the message within the given resource set</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.#ctor">
            <summary>
            Default constructor, called to create the singleton instance.
            Registers the instance with the log manager from Aveva.Core.Database.Xml.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogResourceString(Aveva.Core.Database.Xml.LOGRECORDTYPE,System.String,System.String,System.Object[])">
            <summary>
            Logs any type of message to the open destination
            </summary>
            <param name="type">The message type</param>
            <param name="resourceSet">The name of the resource set that contains the message</param>
            <param name="resourceKey">The identity of the resource used for the message</param>
            <param name="args">Any message arguments required by the resource</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogResourceString(Aveva.Core.Database.Xml.LOGRECORDTYPE,System.String,System.String)">
            <summary>
            Logs any type of message to the open destination
            </summary>
            <param name="type">the message type</param>
            <param name="resourceSet">The name of the resource set that contains the message</param>
            <param name="resourceKey">The identity of the resource used for the message</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLogger.RaiseEvent(Aveva.Core.Database.Xml.LOGRECORDTYPE,System.String,System.String,System.String,System.Object[])">
            <summary>
            Writes a message of a given type to the open destination.
            This outputs information frmo the call stack and therefore expects 2 DbVwLogger methods in the call
            stack prior to the call to this method.
            </summary>
            <param name="type">The type of the message being output</param>
            <param name="message">The fully formatted message</param>
            <param name="resourceKey">The resource identity of the message</param>
            <param name="resourceSet">The resource file the message is defined in </param>
            <param name="args">The arguments used in formatting the message</param>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLogger.Instance">
            <summary>
            Access to the singleton instance.
            This provides access to the logEvent event only
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogEvent">
            <summary>
            Raised for every event logged
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogErrorEvent">
            <summary>
            A low level alert to be brought to the users attention
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.DataGridLogger.LogErrorOrWarningEvent">
            <summary>
            A low level alert to be brought to the users attention
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLogger.LastError">
            <summary>
            The last error reported by the logger
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLogger.LastErrorOrWarning">
            <summary>
            The last error or warning reported by the logger
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridCache">
            <summary>
            Represents the type that implements an in-memory cache used directly or indirectly by DataGrid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridCache.BeginDbCaching(System.TimeSpan)">
            <summary>
            Enables caching mechanism for database.
            </summary>
            <param name="slidingExpiration">
            A span of time within which a cache entry must be accessed before the cache entry is evicted from the cache.
            </param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridCache.BeginDbCaching">
            <summary>
            Enables caching mechanism for database.
            Note: If BeginDbCaching is called more than once, EndDbCaching must be called an equivalent number of times.
            Until the last call to EndDbCaching the caching mechanism will not be disabled.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridCache.EndDbCaching">
            <summary>
            Disables caching mechanism for database.
            Note: If BeginDbCaching is called more than once, EndDbCaching must be called an equivalent number of times.
            Until the last call to EndDbCaching the caching mechanism will not be disabled.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridCache.FinishDbCaching">
            <summary>
            Disables caching mechanism for database regardless how many times the BeginDbCaching function was called.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridCache.CacheDbSlidingExpirationItem_OnChangedCallback(System.Object)">
            <summary>
            Invoked when a MemoryCacheDbSlidingExpiration cache item  was changed.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DrawFilter">
            <summary>
            The DrawFilterClass which will handle background color for read-only columns.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DrawFilter.#ctor(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor.
            </summary>
            <param name="dataGridControl">    The data grid control.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DrawFilter.GetPhasesToFilter(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Method is passed a UIElementDrawParams structure and returns a bit flag enumeration called
            DrawPhase The DrawPhase enumeration allows to filter the drawing before or after each drawing
            operation of an element (e.g. theme, backcolor, image background, borders, foreground, image
            and/or child elements)
            </summary>
            <param name="drawParams"> .</param>
            <returns>
            The phases to filter.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DrawFilter.DrawElement(Infragistics.Win.DrawPhase,Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Method is passed UIElementDrawParams structure and a bit flag indicating which single draw
            phase is being performed.
            </summary>
            <param name="drawPhase">  .</param>
            <param name="drawParams"> .</param>
            <returns>
            False is returned then the default drawing for that phase will be performed True is returned
            for a 'Before' phase then the default drawing for that phase will be skipped.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DrawFilter.SetAlfaForReadOnlyCell(System.Drawing.Color)">
            <summary>
            Set afla chanel to make row highlight visible
            </summary>
            <param name="colorToModify"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DrawFilter.CheckIfErrorSet(Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Check if error is set in cell
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CustomTotalSummary">
            <summary>
            A class that calculates the totals for column
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomTotalSummary.#ctor(Infragistics.Win.UltraWinGrid.UltraGridColumn,Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor
            </summary>
            <param name="column"></param>
            <param name="grid"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomTotalSummary.AggregateCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.UltraGridRow)">
            <summary>
            Aggregates a custom summary for the SummarySettings
            </summary>
            <param name="summarySettings"></param>
            <param name="row"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomTotalSummary.BeginCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.RowsCollection)">
            <summary>
            Begins a custom summary for the SummarySettings
            </summary>
            <param name="summarySettings"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomTotalSummary.EndCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.RowsCollection)">
            <summary>
            Ends previously begun summary and returns the calculated summary value
            </summary>
            <param name="summarySettings"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CustomCountSummary">
            <summary>
            A class that calculates the count for column
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomCountSummary.#ctor(Infragistics.Win.UltraWinGrid.UltraGridColumn,Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor
            </summary>
            <param name="column"></param>
            <param name="grid"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomCountSummary.AggregateCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.UltraGridRow)">
            <summary>
            Aggregates a custom summary for the SummarySettings
            </summary>
            <param name="summarySettings"></param>
            <param name="row"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomCountSummary.BeginCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.RowsCollection)">
            <summary>
            Begins a custom summary for the SummarySettings
            </summary>
            <param name="summarySettings"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomCountSummary.EndCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.RowsCollection)">
            <summary>
            Ends previously begun summary and returns the calculated summary value
            </summary>
            <param name="summarySettings"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CustomMinimumSummary">
            <summary>
            A class that calculates the minimum for column
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomMinimumSummary.#ctor(Infragistics.Win.UltraWinGrid.UltraGridColumn,Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor
            </summary>
            <param name="column"></param>
            <param name="grid"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomMinimumSummary.AggregateCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.UltraGridRow)">
            <summary>
            Aggregates a custom summary for the SummarySettings
            </summary>
            <param name="summarySettings"></param>
            <param name="row"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomMinimumSummary.BeginCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.RowsCollection)">
            <summary>
            Begins a custom summary for the SummarySettings
            </summary>
            <param name="summarySettings"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomMinimumSummary.EndCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.RowsCollection)">
            <summary>
            Ends previously begun summary and returns the calculated summary value
            </summary>
            <param name="summarySettings"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CustomMaximumSummary">
            <summary>
            A class that calculates the maximum for column
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomMaximumSummary.#ctor(Infragistics.Win.UltraWinGrid.UltraGridColumn,Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor
            </summary>
            <param name="column"></param>
            <param name="grid"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomMaximumSummary.AggregateCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.UltraGridRow)">
            <summary>
            Aggregates a custom summary for the SummarySettings
            </summary>
            <param name="summarySettings"></param>
            <param name="row"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomMaximumSummary.BeginCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.RowsCollection)">
            <summary>
            Begins a custom summary for the SummarySettings
            </summary>
            <param name="summarySettings"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomMaximumSummary.EndCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.RowsCollection)">
            <summary>
            Ends previously begun summary and returns the calculated summary value
            </summary>
            <param name="summarySettings"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CustomAverageSummary">
            <summary>
            A class that calculates the average for column
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomAverageSummary.#ctor(Infragistics.Win.UltraWinGrid.UltraGridColumn,Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor
            </summary>
            <param name="column"></param>
            <param name="grid"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomAverageSummary.AggregateCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.UltraGridRow)">
            <summary>
            Aggregates a custom summary for the SummarySettings
            </summary>
            <param name="summarySettings"></param>
            <param name="row"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomAverageSummary.BeginCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.RowsCollection)">
            <summary>
            Begins a custom summary for the SummarySettings
            </summary>
            <param name="summarySettings"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomAverageSummary.EndCustomSummary(Infragistics.Win.UltraWinGrid.SummarySettings,Infragistics.Win.UltraWinGrid.RowsCollection)">
            <summary>
            Ends previously begun summary and returns the calculated summary value
            </summary>
            <param name="summarySettings"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ExportToExcelCommand">
            <summary>
            Summary description for ExportToExcelCommand.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ExportToExcelCommand.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExportToExcelCommand.#ctor">
            <summary>
            ExportToExcelCommand
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExportToExcelCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExportToExcelCommand.Execute(System.String)">
            <summary>
            Execute
            </summary>
            <param name="workSheetName">Default worksheet name</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExportToExcelCommand.GetState(System.String)">
            <summary>
            Get state
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExportToExcelCommand.Refresh">
            <summary>
            Refresh command state
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilter.#ctor(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            The grid control this is bound to
            </summary>
            <param name="gridControl"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilter.BeforeCreateChildElements(Infragistics.Win.UIElement)">
            <summary>
            before create child elements
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilter.AfterCreateChildElements(Infragistics.Win.UIElement)">
            <summary>
            After create child elements
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilter.UnitsHdrButton_ElementClick(System.Object,Infragistics.Win.UIElementEventArgs)">
            <summary>
            Handle header button click events to open the drop down list of units
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilter.columnHeader_UnitSelected(System.Object,System.EventArgs)">
            <summary>
            Units changed in column header
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilter.columnHeader_CasesSelected(System.Object,System.EventArgs)">
            <summary>
            Cases changed in column header
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilter.SetCellProperties(Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Set cell appearance based on properties of GridCellState class inside Cell.Row.CellApperance.Tag
            </summary>
            <param name="cell"> Current cell </param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilter.HasValidDimension(Aveva.Core.Editors.DbPropertyDescriptor)">
            <summary>
            Resolves if given DbPropertyDescriptor instance has valid dimension.
            </summary>
            <param name="propertyDescriptor">Instance to check.</param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache">
            <summary>
            Enhances the effectivity of the DbDataFilter class by using memory cache.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache.key">
            <summary>
            Unique identifier for a CacheItem instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache.#ctor(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor.
            </summary>
            <param name="gridControl"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache.HasValidDimension(Aveva.Core.Editors.DbPropertyDescriptor)">
            <summary>
            Enhances the effectivity of the base.HasValidDimension function by using memory cache.
            </summary>
            <param name="propertyDescriptor"></param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache.CacheOn">
            <summary>
            Indicates if cache mechanism is enabled or disabled.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache.MemoryCacheWrp">
            <summary>
            The MemoryCache wrapper to have code more readable.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache.MemoryCacheWrp.key">
            <summary>
            Unique identifier for a CacheItem instance.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache.MemoryCacheWrp.propertyDescriptor">
            <summary>
            Key of the value get or set.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache.MemoryCacheWrp.dictionary1">
            <summary>
            Value of given CacheItem instance.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache.MemoryCacheWrp.#ctor(System.String,Aveva.Core.Editors.DbPropertyDescriptor)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Unique identifier for a CacheItem instance.</param>
            <param name="propertyDescriptor">Key of the value get or set.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache.MemoryCacheWrp.TryGetValue(System.Boolean@)">
            <summary>
            Try to get value from MemoryCache.
            </summary>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise null,</param>
            <returns>true if an element with the specified key exist; otherwise, false.</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtendedCreationFilterCache.MemoryCacheWrp.SetValue(System.Boolean)">
            <summary>
            Sets value to MemoryCache.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog">
            <summary>
            Custom summary dialog form
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.#ctor">
            <summary>
            Custom summary dialog constructor
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.Average">
            <summary>
            Average summary check state
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.Sum">
            <summary>
            Sum summary check state
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.Minimum">
            <summary>
            Minimum summary check state
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.Maximum">
            <summary>
            Maximum summary check state
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.Count">
            <summary>
            Count summary check state
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.SummaryAverage">
            <summary>
            Custom average summary name
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.SummarySum">
            <summary>
            Custom sum summary name
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.SummaryMinimum">
            <summary>
            Custom minimum summary name
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.SummaryMaximum">
            <summary>
            Custom maximum summary name
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.CustomSummaryDialog.SummaryCount">
            <summary>
            Custom count summary name
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.FindAndReplace">
            <summary>
            A find and replace.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.IUnsizedProgress">
            <summary>
            Interface for unsized progress.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.IUnsizedProgress.ProgressReset">
            <summary>
            Progress reset.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.IUnsizedProgress.ProgressTick">
            <summary>
            Determines if we can progress tick.
            </summary>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.IUnsizedProgress.ProgressStop">
            <summary>
            Gets or sets a value indicating whether the progress stop.
            </summary>
            <value>
            true if progress stop, false if not.
            </value>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.UpdateSearchCallBack(System.Action{System.Collections.ArrayList})">
            <summary>
            Update the call back delegate for Find,Replace and ReplaceAll.
            </summary>
            <param name="searchCallBack">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.Show(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Show the standard find and replace dialog.
            </summary>
            <param name="gridControl">  Grid to use.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.Show(Aveva.Core.Presentation.DataGrid.DataGridControl,Aveva.Core.Presentation.DataGrid.FindAndReplace.FindAndReplaceTabs,System.String)">
            <summary>
            Show the standard find and replace dialog.
            </summary>
            <param name="gridControl">  .</param>
            <param name="activeTab">    .</param>
            <param name="findWhat"> .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.Show(Aveva.Core.Presentation.DataGrid.DataGridControl,Aveva.Core.Presentation.DataGrid.FindAndReplace.FindAndReplaceTabs,System.String,System.Boolean,System.Boolean)">
            <summary>
            Show the standard find and replace dialog.
            </summary>
            <param name="gridControl">  .</param>
            <param name="activeTab">    .</param>
            <param name="findWhat"> .</param>
            <param name="findEnabled">  .</param>
            <param name="replaceEnabled">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.Show(Aveva.Core.Presentation.DataGrid.FindAndReplace.FindAndReplaceTabs,System.String)">
            <summary>
            Show the standard find and replace dialog.
            </summary>
            <param name="activeTab">    .</param>
            <param name="findWhat"> .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.Show(Aveva.Core.Presentation.DataGrid.FindAndReplace.FindAndReplaceTabs)">
            <summary>
            Show the standard find and replace dialog.
            </summary>
            <param name="activeTab">    .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.ReplaceValue(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns method that defines replacement.
            </summary>
            <param name="findWhat"></param>
            <param name="replaceWith"></param>
            <param name="matchCase"></param>
            <param name="entireCell"></param>
            <param name="matchPrefix"></param>
            <param name="matchSuffix"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.ReplaceValue(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Returns method that defines replacement.
            </summary>
            <param name="regex">Regular expression.</param>
            <param name="replaceWith">Replacment string.</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.btnReplaceAll_Click(System.Object,System.EventArgs)">
            <summary>
            Do Replace All.
            </summary>
            <param name="sender">
            Sender.
            </param>
            <param name="e">
            Event arguments.
            </param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.FindMatch(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns method that defines a set of criteria.
            </summary>
            <param name="findWhat"></param>
            <param name="caseSensitive"></param>
            <param name="matchEntire"></param>
            <param name="matchPrefix"></param>
            <param name="matchSufix"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.FindMatch(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns method that defines a set of criteria.
            </summary>
            <param name="regex">Represents regular expression.</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.ProgressTick">
            <summary>
            Implementing the IUnsizedProgress interface.
            </summary>
            <returns>
            true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.ProgressReset">
            <summary>
            Progress reset.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.FindAndReplace.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplace.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.FindAndReplace.IsVisible">
            <summary>
            Return true if dialog was shown and it is already visible.
            </summary>
            <value>
            true if this Aveva.Core.Presentation.DataGrid.FindAndReplace is visible, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.FindAndReplace.ActiveTab">
            <summary>
            Gets or sets the active tab.
            </summary>
            <value>
            The active tab.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.FindAndReplace.FindWhat">
            <summary>
            Gets or sets the find what.
            </summary>
            <value>
            The find what.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.FindAndReplace.ReplaceWith">
            <summary>
            Gets or sets the replace with.
            </summary>
            <value>
            The replace with.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.FindAndReplace.DataGrid">
            <summary>
            Gets or sets the data grid.
            </summary>
            <value>
            The data grid.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.FindAndReplace.ProgressStop">
            <summary>
            Gets or sets a value indicating whether the progress stop.
            </summary>
            <value>
            true if progress stop, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.FindAndReplace.Grid">
            <summary>
            Grid associated with this control.
            </summary>
            <value>
            The grid.
            </value>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.FindAndReplace.FindAndReplaceTabs">
            <summary>
            Values that represent find and replace tabs.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.FindAndReplace.FindAndReplaceTabs.Find">
            <summary>
            An enum constant representing the find option.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.FindAndReplace.FindAndReplaceTabs.Replace">
            <summary>
            An enum constant representing the replace option.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.FindAndReplace.SearchCommands">
            <summary>
            Find,Replace and ReplaceAll Commands.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.FindAndReplace.SearchCommands.Find">
            <summary>
            An enum constant representing the find option.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.FindAndReplace.SearchCommands.Replace">
            <summary>
            An enum constant representing the replace option.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.FindAndReplace.SearchCommands.ReplaceAll">
            <summary>
            An enum constant representing the replace all option.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.Precision">
            <summary>
            Implementation of the Precision form for DataGridControls.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Precision.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.Precision.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Precision.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Precision.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.Precision.numericUpDown1">
            <summary>
            Numeric spin control.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.Precision.okButton">
            <summary>
            The OK button control.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.Precision.cancelButton">
            <summary>
            The Canncel button control
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.Precision.PrecisionValue">
            <summary>
            This property accesses the precision value currently selected on the form.
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.Precision.RemoveTrailZeros">
            <summary>
            Remove Trail zeros checkbox state 
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor">
             <summary>
             Long text editor.
            
             Notes:
             1. Class is inspired by Infragistics Knowledge Base Article KB02361 with title “HOWTO:Use Custom Edit Controls in UltraWinGrid2”.
             2. I do not use Infragistics.Win.UltraWinEditors.UltraTextEditor because I got performance issue when UltraTextEditor was resized.
                Similar problem is described on the Infragistics Support page.
             </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.isResizing">
            <summary>
            true if control is resizing.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.oldPoint">
            <summary>
            Cursor’s position when left button was clicked.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.oldSize">
            <summary>
            Size of control when left button was clicked.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.preferredSize">
            <summary>
            Size of control prefered by user.
            Static field because size has be remembered in one session.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.dataGridControl">
            <summary>
            DataGridControl for which long text editor is used.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.ultraGridCell">
            <summary>
            UltraGridCell for which long text editor is used.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.borderWidth">
            <summary>
            Border width.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.#ctor(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor.
            </summary>
            <param name="dataGridControl">DataGridControl for which long text editor is used.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.Show(Infragistics.Win.UltraWinGrid.UltraGridCell)">
            <summary>
            Shows long text editor for cell.
            </summary>
            <param name="ultraGridCell">Cell.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.Show(Infragistics.Win.UltraWinGrid.UltraGridCell,System.String)">
            <summary>
            Shows long text editor for cell.
            </summary>
            <param name="ultraGridCell">Cell.</param>
            <param name="text">If different than null then used to initialize long text editor.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.SelectAllText">
            <summary>
            Select All Text in text edit control
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.IsVisible">
            <summary>
            Returns true if Long Text Editor is visible
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.IsTextFullyVisible(Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase,System.String)">
            <summary>
            Evaluates whether text will be fully visible in editor.
            </summary>
            <param name="editor"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.IsTextFullyVisible(Infragistics.Win.EditorWithText,System.String)">
            <summary>
            Evaluates whether text will be fully visible in text editor.
            Note:
            Do not call this function inside UltraGrid.BeforeEnterEditMode event handler
            because size of the EmbeddableTextBox (see the TextBox property below) is not refreshed
            (It seems that size is tha same as for previous active cell).
            </summary>
            <param name="editor"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.IsTextFullyVisible(Infragistics.Win.FormattedLinkLabel.FormattedLinkEditor,System.String)">
            <summary>
            Evaluates whether text will be fully visible in editor.
            </summary>
            <param name="editor"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.GetCursor(System.Drawing.Point)">
            <summary>
            Returns cursor according to point position.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.longTextEditor_LostFocus(System.Object,System.EventArgs)">
            <summary>
            Called when text editor lost focus.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.textBox_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is pressed.
            It just invalidate changes and disable control when a Esc key is pressed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.textBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the Text property value changes.
            Changes size of control to fit presented text.
            
            Note. Do not use the Graphics.MeasureString(string s,Font font) function to measure string. It dosen't return right pixels.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.longTextEditor_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the Visible property value changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.mouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseMove event. Sets Capture property of this control.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseDown event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseMove event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseUp event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.OnSizeChanged(System.EventArgs)">
            <summary>
            Handles size changed event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.UI.LongTextEditor.SizeGrip">
            <summary>
            Size grip.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.FindAndReplaceShowCommand">
            <summary>
            Command for Find/Replace and Show
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplaceShowCommand.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplaceShowCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplaceShowCommand.Refresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindAndReplaceShowCommand.Refresh(System.String,System.String,System.String)">
            <summary>
            Refresh.
            </summary>
            <param name="whatChanged"></param>
            <param name="howChanged"></param>
            <param name="id"></param>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.FindAndReplaceShowCommand.StartBatchUpdate">
            <summary>
            Start batch update
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.FindAndReplaceShowCommand.EndBatchUpdate">
            <summary>
            End batch update
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.FindShowCommand">
            <summary>
            Command for Find only
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindShowCommand.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindShowCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.FindShowCommand.Refresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderPinButton.StyleOfButton">
            <summary>
            Set Button style
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderPinButton.ButtonStyle">
            <summary>
            Override Button style
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderPinButton.PinImage">
            <summary>
            The image used for the button
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.HeaderPrecisionButton">
            <summary>
            Button for precision in column header
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderPrecisionButton.StyleOfButton">
            <summary>
            Set Button style
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderPrecisionButton.ButtonStyle">
            <summary>
            Override Button style
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderPrecisionButton.PrecisionImage">
            <summary>
            The image used for the button
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.HeaderUnitsButton">
            <summary>
            Button for units in column header
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderUnitsButton.StyleOfButton">
            <summary>
            Set Button style
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderUnitsButton.ButtonStyle">
            <summary>
            Override Button style
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderUnitsButton.UnitsImage">
            <summary>
            The image used for the button
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.MultiSelectFilterCommand">
            <summary>
            Summary description for MultiSelectFilterCommand.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.MultiSelectFilterCommand.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.MultiSelectFilterCommand.#ctor">
            <summary>
            MultiSelectFilterCommand
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.MultiSelectFilterCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.MultiSelectFilterCommand.GetState(System.String)">
            <summary>
            GetState
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.NumericTextComparer">
            <summary>
            A numeric text comparer.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.OutlookGroupStyleCommand">
            <summary>
            Summary description for OutlookGroupStyleCommand.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.OutlookGroupStyleCommand.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.OutlookGroupStyleCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.OutlookGroupStyleCommand.GetState(System.String)">
            <summary>
            GetState
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.PMLDataGridControl">
            <summary>
            PML-callable wrapper for DataGridControl.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.#ctor">
            <summary>
            Default constructor which wraps a new, blank grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.Assign(Aveva.Core.Presentation.DataGrid.PMLDataGridControl)">
            <summary>
            Required for PMLNet compatibility. Makes the current object wrap that same base as the source
            object.
            </summary>
            <param name="source">   Target to be copied from.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.BindToDataSource(Aveva.Core.Presentation.NetDataSource)">
            <summary>
            This method connects a NetDataSource object to the underlying grid's DataSource.
            </summary>
            <param name="source">   .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ClearGrid">
            <summary>
            This methods sets the DataSource property to null.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.SetReadOnlyColour">
            <summary>
            This method forces the grid's cell appearance readonly colour to the calue set in the
            GridLayout.ReadOnlyColour property.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.EndEditTransaction">
            <summary>
            To enable a transaction to be ended when setting values directly on the grid cells. This is
            required when an ObjectDisposedException is thrown by the set.  This occurs when the set
            action removes the row object from the data source.  The set operation itself is successful.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.AbortEditTransaction">
            <summary>
            To manage abort transaction outside of the grid when setting values directly on cells. If an
            exception is thrown, other than an ObjectDisposedException, then call this to abort the
            current transaction. Nb this will set the MultiCellTransaction to null.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ClearRowSelection">
            <summary>
            This method clears all row selection(s).
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.HasSelectedRows">
            <summary>
            Query if this Aveva.Core.Presentation.DataGrid.PMLDataGridControl has selected rows.
            </summary>
            <returns>
            true if selected rows, false if not.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.SaveGridToExcel(System.String)">
            <summary>
            This method causes the grid to be saved to the specified excel filename.
            </summary>
            <param name="excelFile">    The filename into which to save the grid.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.SaveGridToExcel(System.String,System.String)">
            <summary>
            This method causes the grid to be saved to the specified worksheet within the specified excel
            filename.
            </summary>
            <param name="excelFile">    The filename into which to save the grid.</param>
            <param name="worksheet">    The worksheet into which to save the grid.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.SaveGridToExcel(System.String,System.String,System.String)">
            <summary>
            This method causes the grid to be saved to the specified worksheet within the specified excel
            filename. It will also write the given header string into the worksheet.
            </summary>
            <param name="excelFile">    The filename into which to save the grid.</param>
            <param name="worksheet">    The worksheet into which to save the grid.</param>
            <param name="strHeader">    The header string to write into the worksheet.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.PrintPreview">
            <summary>
            Shows the print preview dialog associated with this control.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.Refresh">
            <summary>
            Refresh the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.SelectAllCells">
            <summary>
            Selects all cells in the grid.  Note that this method does not work if the corresponding
            grid's DisplayLayout.Override.SelectTypeRow has been set to SelectType.Single.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.SelectAllRows">
            <summary>
            Selects all rows in the grid.  Note that this method does not work if the corresponding
            grid's DisplayLayout.Override.SelectTypeRow has been set to SelectType.Single.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.GetNumberRows">
            <summary>
            This method returns the number of rows in the grid.
            </summary>
            <returns>
            int: The number of rows in the grid.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.GetAllColumnIDs">
            <summary>
            This method returns a list of all of column identities in use in the grid.
            </summary>
            <returns>
            List of string: A list of all of column identities in use in the grid.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.GetSelectedColumns">
            <summary>
            This method returns a list of all of column identities for the currently selected cells.
            </summary>
            <returns>
            List of string: A list of all of column identities for the currently selected cells.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.GetActiveColumn">
            <summary>
            This method returns the column identity of the current active cell.
            </summary>
            <returns>
            string: The column identity of the current active cell.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ColumnExists(System.String)">
            <summary>
            This method indicated whether the specified column exists.
            </summary>
            <param name="colId">    The identity of the required column.</param>
            <returns>
            bool: true if exists, false otherwise.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.GetColumnVisible(System.String)">
            <summary>
            This method indicated whether the specified column is currently visible.
            </summary>
            <param name="colID">    The identity of the required column.</param>
            <returns>
            bool: true if visible, false otherwise.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.SetColumnVisible(System.String,System.Boolean)">
            <summary>
            This method sets whether the specified column is currently visible.
            </summary>
            <param name="colID">    The identity of the required column.</param>
            <param name="visible">Indicated whether the column should be visible (true) or hidden (false).</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.DoCellCut">
            <summary>
            Cut the selected cells into the paste buffer.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.DoCellCopy">
            <summary>
            Copy the data in the selected cells to the clipboard.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.DoCellPaste">
            <summary>
            Paste the copied data into the selected cells.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.DoCellEditFillDown">
            <summary>
            Paste the copied data into the selected cells (fill down)
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.DoCellEditFillUp">
            <summary>
            Paste the copied data into the selected cells (fill up)
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.HideAllRows(System.Boolean)">
            <summary>
            Hide/Show all rows.
            </summary>
            <param name="hide"> .</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.UnhighlightAllCells">
            <summary>
            This method removes the highlight colour for all of the cells in the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.UpdateGrid">
            <summary>
            Method forces an UpdateData() on the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.UpdateFillLabels(System.Boolean)">
            <summary>
            Method updates the "Fill Up" and "Fill Down" labels so they say "Fill Right" and "Fill Left"
            instead, or vice-versa.
            </summary>
            <param name="isHorizontal">Indicates if the data is displayed in a horizontal manner or not.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.BeginUpdate">
            <summary>
            Begin update Grid control.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.EndUpdate">
            <summary>
            End update Grid control.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.UpdateData">
            <summary>
            Update Grid control data.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.getRowsX">
            <summary>   GetRowsX.</summary>
            <summary>Fix for TFS-76474: 12.1.SP3#11A- An error message is displayed on clicking Save
                     Report link for bending machine in the Fabrication Machine Manager window. Note:
                     The base class DataGridControl has a public method getRows() which returns
                     another type so this one has a different name. [ON].</summary>
            <returns>
            Hashtable.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.getSelectedRows">
            <summary>
            getSelectedRows.
            </summary>
            <returns>
            The selected rows.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.getRowsData(System.Collections.IList,System.Int32,System.Collections.Hashtable)">
            <summary>
            This method will return ALL row data, including the hidden AVEVA-DATASOURCE-ID column data.
            </summary>
            <param name="RowsColl"></param>
            <param name="numCols"></param>
            <param name="result"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.selectRow(System.Double)">
            <summary>
            Select row.
            </summary>
            <param name="pmlIndex"> Zero-based index of the pml.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.setCellValue(System.Double,System.String,System.String)">
            <summary>
            Sets cell value.
            </summary>
            <param name="rowNum">   The row number.</param>
            <param name="column">   The column.</param>
            <param name="value">    The value.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ToHashtable(System.Collections.Generic.List{System.String})">
            <summary>
            Converts a list to a hashtable.
            </summary>
            <param name="list"> The list.</param>
            <returns>
            list as a Hashtable.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ToHashtable(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts a list to a hashtable.
            </summary>
            <param name="list"> The list.</param>
            <returns>
            list as a Hashtable.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ToHashtable(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Converts a list to a hashtable.
            </summary>
            <param name="list"> The list.</param>
            <returns>
            list as a Hashtable.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ToHashtable(System.Collections.ArrayList)">
            <summary>
            Converts a list to a hashtable.
            </summary>
            <param name="list"> The list.</param>
            <returns>
            list as a Hashtable.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ToListString(System.Collections.Hashtable)">
            <summary>
            Converts a h to a list string.
            </summary>
            <param name="h">    The Hashtable to process.</param>
            <returns>
            h as a List&lt;string&gt;
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ToVerticalAlignment(System.String)">
            <summary>
            Converts a va to a vertical alignment.
            </summary>
            <param name="va">   The variable arguments.</param>
            <returns>
            va as a VerticalAlignment.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ToString(Aveva.Core.Presentation.DataGrid.DataGridControl.VerticalAlignment)">
            <summary>
            Convert this Aveva.Core.Presentation.DataGrid.PMLDataGridControl into a string
            representation.
            </summary>
            <param name="va">   The variable arguments.</param>
            <returns>
            A string that represents this Aveva.Core.Presentation.DataGrid.PMLDataGridControl.
            </returns>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ActiveGrid">
            <summary>
            This property returns the currently active DataGridControl.
            </summary>
            <value>
            The active grid.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.GridLayout">
            <summary>
            The layout object that contains the layout definition for the DataGridControl.
            </summary>
            <value>
            The grid layout.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.GridEvents">
            <summary>
            The events object for the DataGridControl.
            </summary>
            <value>
            The grid events.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ActualNetDataSource">
            <summary>
            This property is used by the DataSource property when a NetDataSource is being used as the
            data in a grid.
            </summary>
            <value>
            The actual net data source.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.GridHeight">
            <summary>
            Gets or sets the Height of the component.
            </summary>
            <value>
            The height of the grid.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ColumnCount">
            <summary>
            This property is number of unique columns in the grid.
            </summary>
            <value>
            The number of columns.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.IsCellEditFillUpable">
            <summary>
            Determine if the copied data can be pasted (fill up) into the selected cells.
            </summary>
            <value>
            true if this Aveva.Core.Presentation.DataGrid.PMLDataGridControl is cell edit fill upable,
            false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.IsFiltered">
            <summary>
            Get state of current filtering.
            </summary>
            <value>
            true if this Aveva.Core.Presentation.DataGrid.PMLDataGridControl is filtered, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.RowCount">
            <summary>
            Get number of rows in grid.
            </summary>
            <value>
            The number of rows.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.FilteredRowCount">
            <summary>
            Get number of filtered rows in grid.
            </summary>
            <value>
            The number of filtered rows.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.ShowActiveBorder">
            <summary>
            Get or set if grid displays a border when it is active.
            </summary>
            <value>
            true if show active border, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridControl.IsCellEditFillDownable">
            <summary>
            Determine if the copied data can be pasted (fill down) into the selected cells.
            </summary>
            <value>
            true if this Aveva.Core.Presentation.DataGrid.PMLDataGridControl is cell edit fill downable,
            false if not.
            </value>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.PMLDataGridEvents">
            <summary>
            PML-callable wrapper for DataGridLayout.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.PMLDataGridEvents.innerEvents">
            <summary>
            Instance of the DataGridLayout that is wrapped by this object.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridEvents.#ctor">
            <summary>
            Default constructor which wraps nothing.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridEvents.#ctor(Aveva.Core.Presentation.DataGrid.DataGridEvents)">
            <summary>
            Used for internal construction.
            </summary>
            <param name="events">   The events.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridEvents.Assign(Aveva.Core.Presentation.DataGrid.PMLDataGridEvents)">
            <summary>
            Required for PMLNet compatibility. Makes the current object wrap that same innerLayout as the
            source object.
            </summary>
            <param name="source">   Target to be copied from.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridEvents.ConnectPMLEvents">
            <summary>
            Connects the pml events.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridEvents.CallPopup(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Call popup.
            </summary>
            <param name="sender">   Source of the event.</param>
            <param name="e">    Mouse event information.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridEvents.CallAfterSelectChange(System.Object,Infragistics.Win.UltraWinGrid.AfterSelectChangeEventArgs)">
            <summary>
            Call after select change.
            </summary>
            <param name="sender">   Source of the event.</param>
            <param name="e">    After select change event information.</param>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.PMLDataGridEvents.OnPopup">
            <summary>
            Event queue for all listeners interested in OnPopup events.
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.PMLDataGridEvents.AfterSelectChange">
            <summary>
            Event queue for all listeners interested in AfterSelectChange events.
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridEvents.IsElementBasedDataSource">
            <summary>
            Gets a value indicating whether this Aveva.Core.Presentation.DataGrid.PMLDataGridEvents is
            element based data source.
            </summary>
            <value>
            true if this Aveva.Core.Presentation.DataGrid.PMLDataGridEvents is element based data source,
            false if not.
            </value>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout">
            <summary>
            PML-callable wrapper for DataGridLayout.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.innerLayout">
            <summary>
            Instance of the DataGridLayout that is wrapped by this object.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.#ctor">
            <summary>
            Default constructor which wraps nothing.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.#ctor(Aveva.Core.Presentation.DataGrid.DataGridLayout)">
            <summary>
            Used for internal construction.
            </summary>
            <param name="layout">   The layout.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.Assign(Aveva.Core.Presentation.DataGrid.PMLDataGridLayout)">
            <summary>
            Required for PMLNet compatibility. Makes the current object wrap that same innerLayout as the
            source object.
            </summary>
            <param name="source">   Target to be copied from.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ResetDefaultColours">
            <summary>
            This method resets all of the colours stored in the DataGridLayout object to the default
            values.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.IsFixedHeader(System.String)">
            <summary>
            This method recovers the FixedHeader setting of the specified column.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <returns>
            bool: true if fixed, false otherwise.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetFixedHeader(System.String,System.Boolean)">
            <summary>
            This method sets the FixedHeader setting of the specified column.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <param name="fixedHeader">  bool: true if the column is to be fixed, false otherwise.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetColumnPosition(System.String)">
            <summary>
            This method returns the visible position of the specified column. This relates directly the
            the VisiblePosition property in the column's Header in the corresponding grid.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <returns>
            double: the col - this is 1 indexed and corrected from the value stored in the innerLayout.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetColumnPosition(System.String,System.Double)">
            <summary>
            This method sets the visible position of the specified column. This relates directly the the
            VisiblePosition property in the column's Header in the corresponding grid.
            </summary>
            <param name="colID">    .</param>
            <param name="pos">double: the col - this is 1 indexed and corrected before being stored in the
                              innerLayout.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ResizeAllColumns">
            <summary>
            This method changes the AutoFitStyle in the DisplayLayout of the grid to
            AutoFitStyle.ResizeAllColumns.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.AutoFitColumns">
            <summary>
            This method calls PerformAutoResize(VisibleRows) on all the columns in Band[0] of the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.setAlternateRowColor(System.String)">
            <summary>
            This method sets the colour values stores in the Override. RowAlternateAppearance.BackColor
            property of the DisplayLayout on the corresponding grid using the RGB colour values passed
            into this method as parameters.
            </summary>
            <param name="colour">   The name of the colour to be used.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.setAlternateRowColor(System.Double,System.Double,System.Double)">
            <summary>
            This method sets the colour values stores in the Override. RowAlternateAppearance.BackColor
            property of the DisplayLayout on the corresponding grid using the RGB colour values passed
            into this method as parameters.
            </summary>
            <param name="red">  Red value of the colour to be used.</param>
            <param name="green">    Green value of the colour to be used.</param>
            <param name="blue"> Blue value of the colour to be used.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ResetColumnProperties">
            <summary>
            This method removes all fixed columns, sorts and filters on the corresponding grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ResetColumnFilters">
            <summary>
            This method clears all of the filters on the corresponding grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetDefaultValueString(System.String)">
            <summary>
            Sets the string to display for any attributes that are set to their default value (this
            includes attributes that return unset)
            </summary>
            <param name="dflt">The string to display for defaulted attributes, set to null to see the
                               default value.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetDefaultValueString(System.String,System.Boolean)">
            <summary>
            Sets the string to display for any attributes that are set to their default value (this
            includes attributes that return unset)
            </summary>
            <param name="dflt">The string to display for defaulted attributes, set to null to see the
                               default value.</param>
            <param name="excludeBooleans">Indicates whether bool values should be updated with this default
                                          value.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetDefaultValueString(System.Collections.Hashtable,System.String)">
            <summary>
            Sets the string to display for any attributes that are set to their default value for a given
            set of columns.
            </summary>
            <param name="colIds">   The columns to use the unset string.</param>
            <param name="dflt">The string to display for defaulted attributes.  If null the attributes
                               default value will be displayed.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetDefaultValueString">
            <summary>
            Gets the string that is to be displayed for each column. Nb a null value will result in the
            default value for the attribute being displayed.
            </summary>
            <returns>
            The default value string.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetNulrefString(System.String)">
            <summary>
            Sets the string to display for reference attributes that haven't been set.
            </summary>
            <param name="nulref">   The string to display.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetNulrefString(System.Collections.Hashtable,System.String)">
            <summary>
            Sets the string to display for reference attributes that haven't been set for a specific set
            of columns.
            </summary>
            <param name="colIds">   The columns to display the nulref string in.</param>
            <param name="nulref">   The string to display for null elements.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetNulrefString">
            <summary>
            Gets the strings that are to be displayed for Null elements for each column.
            </summary>
            <returns>
            The nulref string.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetInvalidRefString(System.String)">
            <summary>
            Sets the string to display for invalid elements for all columns.
            </summary>
            <param name="iref"> the display string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetInvalidRefString(System.Collections.Hashtable,System.String)">
            <summary>
            Sets the string to display for invalid elements in specific columns.
            </summary>
            <param name="colIds">   The name of the property in the column.</param>
            <param name="iref"> The display string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetInvalidRefString">
            <summary>
            Gets the strings that are displayed for invalid references in each column.
            </summary>
            <returns>
            The invalid reference string.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetNullValueString(System.String)">
            <summary>
            Sets the strings that are displayed for null value for all columns.
            </summary>
            <param name="nval"> The display string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetNullValueString(System.Collections.Hashtable,System.String)">
            <summary>
            Sets the strings that are displayed for null value in specific columns.
            </summary>
            <param name="colIds">   The name of the property in the column.</param>
            <param name="nval"> The display string.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetNullValueString">
            <summary>
            Gets the strings that are displayed for null value in each column.
            </summary>
            <returns>
            The null value string.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetShowLeadingSlash(System.Boolean)">
            <summary>
            Indicates whether leading slashes should be displayed for names.
            </summary>
            <param name="show"> true to include leading slashes in name display.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetShowLeadingSlash(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Indicates whether leading slashes should be shown for name attributes of specific columns.
            </summary>
            <param name="colIds">   the names of the column properties.</param>
            <param name="show"> tur eto show slashes otherwise false.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetShowLeadingSlash">
            <summary>
            gets the flag for each columns indicating whether leading slashes are to be shown.
            </summary>
            <returns>
            The show leading slash.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetShowUnitsWithValues(System.Boolean)">
            <summary>
            Indicates whether units of measure are to be displayed with dimensioned values.
            </summary>
            <param name="show"> true to include the units.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetShowUnitsWithValues(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Indicates whether leading slashes should be shown for name attributes of specific columns.
            </summary>
            <param name="colIds">   the names of the column properties.</param>
            <param name="show"> tur eto show slashes otherwise false.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ShowUnitsWithValues">
            <summary>
            gets the flag for each columns indicating whether leading slashes are to be shown.
            </summary>
            <returns>
            A Hashtable.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ClearAllToolTipText">
            <summary>
            This method clears all of the tooltips in the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetDbFormat(System.Collections.Hashtable,Aveva.Core.Database.DbFormat)">
            <summary>
            Sets the Dbformat object for all given columns.  Nb the format object is cloned for each
            column.
            </summary>
            <param name="colIds">   the identities of the columns to set the format on.</param>
            <param name="format">The format object to use to display DbDoubles in the given columns.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.Width(System.String)">
            <summary>
            Gets the format objects for all of the columns.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <returns>
            A double.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetColumnCaption(System.String)">
            <summary>
            This method returns the caption for the column requested.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <returns>
            The column caption.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetColumnTitle(System.String,System.String)">
            <summary>
            Sets the caption on the specified column to the string supplied.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <param name="caption">  The new caption for the column.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetColumnSortOrder(System.String)">
            <summary>
            Returns the SortOrder of the requested column.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <returns>
            The column sort order.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetColumnSortOrder(System.String,System.String)">
            <summary>
            This method sets the SortOrder of the specified column.
            </summary>
            <param name="colID">    The identity of the column.</param>
            <param name="order">The SortOrder to set on the column. This should be "Ascending",
                                "Descending", "Disabled" or "None". Any string other than these will be
                                assumed to be "None".</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ResetColumnSorting">
            <summary>
            This method clears the SortOrder on all columns.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.EnableColumnSorting">
            <summary>
            This method enables column sorting for the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.DisableColumnSorting">
            <summary>
            This method disables column sorting for the grid.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ResetColumnSettings">
            <summary>
            Thsi method resets the default column settings.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnHeaderGroupCreate(System.String)">
            <summary>
            Create a group column header (multi-level headings)
            </summary>
            <param name="groupName">    The name fo the group being created.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnHeaderGroupCreate(System.String,System.String)">
            <summary>
            Create a group column header with a caption (multi-level headings)
            </summary>
            <param name="groupName">    The name fo the group being created.</param>
            <param name="caption">  The caption for the new group.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnHeaderGroupDelete(System.String)">
            <summary>
            Delete a group column header (multi-level headings)
            </summary>
            <param name="groupName">    The group to be deleted.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnHeaderGroupAddColumn(System.String,System.String)">
            <summary>
            Add a column to a group column (multi-level headings)
            </summary>
            <param name="groupName">    The group to which the column is being added.</param>
            <param name="columnName">   The column being added tot eh group.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnHeaderGroupAddToParent(System.String,System.String)">
            <summary>
            Add a group column to another group column (multi-level headings)
            </summary>
            <param name="parentGroupName">  The name of the parent group.</param>
            <param name="groupName">    The name of the current group.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnHeaderGroupResetParent(System.String)">
            <summary>
            Reset the column group (multi-level headings)
            </summary>
            <param name="groupName">    The name of the group being reset.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnHeaderGroupResetColumnGroup(System.String)">
            <summary>
            Reset the column (multi-level headings)
            </summary>
            <param name="columnName">   The name of the column being reset.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnHeaderGroupReset">
            <summary>
            Reset all column groups (multi-level headings)
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetGroupTitle(System.String)">
            <summary>
            Get the caption for a group column.
            </summary>
            <param name="groupKey"> Column tag.</param>
            <returns>
            Group caption.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.getRowGroups">
            <summary>
            Get a list of all the groups.
            </summary>
            <returns>
            The row groups.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.getHeaderGroups">
            <summary>
            Get a list of all the groups.
            </summary>
            <returns>
            The header groups.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.getParentGroupForGroup(System.String)">
            <summary>
            Returns parent's group name for a given group.
            </summary>
            <param name="groupName">    The group whose parent is sought.</param>
            <returns>
            The parent group for group.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.getParentGroupForColumn(System.String)">
            <summary>
            Returns parent's group name for a given column.
            </summary>
            <param name="colName">  The column whose parent is sought.</param>
            <returns>
            The parent group for column.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetGroupOrigin(System.String,System.Double,System.Double)">
            <summary>
            Set the origin for the group header GroupName.
            </summary>
            <param name="groupName">    The group whose origin is being set.</param>
            <param name="x">    The new x co-ordinate of the origin.</param>
            <param name="y">    The new y co-ordinate of the origin.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetGroupOriginX(System.String)">
            <summary>
            Get the origin for the group header GroupName.
            </summary>
            <param name="groupName">    The name of the group whose origin is being sought.</param>
            <returns>
            The x co-ordinate of the origin of the group.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetGroupOriginY(System.String)">
            <summary>
            Get the origin for the group header GroupName.
            </summary>
            <param name="groupName">    The name of the group whose origin is being sought.</param>
            <returns>
            The y co-ordinate of the origin of the group.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetGroupSpan(System.String,System.Double,System.Double)">
            <summary>
            Set the span for the group header GroupName.
            </summary>
            <param name="groupName">    The name of the group whose span is being set.</param>
            <param name="x">    The new x span value for the group.</param>
            <param name="y">    The new y span value for the group.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetGroupSpanX(System.String)">
            <summary>
            Get the span for the group header GroupName.
            </summary>
            <param name="groupName">    The name of the group whose span is being sought.</param>
            <returns>
            The x span value for the group.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetGroupSpanY(System.String)">
            <summary>
            Get the span for the group header GroupName.
            </summary>
            <param name="groupName">    The name of the group whose span is being sought.</param>
            <returns>
            The y span value for the group.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetColumnOrigin(System.String,System.Double,System.Double)">
            <summary>
            Set the origin for the column colID.
            </summary>
            <param name="colID">    The ID of the column whose origin is being set.</param>
            <param name="x">    The x co-ordinate of the column's new origin.</param>
            <param name="y">    The y co-ordinate of the column's new origin.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetColumnOriginX(System.String)">
            <summary>
            Get the origin for the column colID.
            </summary>
            <param name="colID">    The ID of the column whose origin is being sought.</param>
            <returns>
            The x co-ordinate of the column's origin.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetColumnOriginY(System.String)">
            <summary>
            Get the origin for the column colID.
            </summary>
            <param name="colID">    The ID of the column whose origin is being sought.</param>
            <returns>
            The y co-ordinate of the column's origin.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SetColumnSpan(System.String,System.Double,System.Double)">
            <summary>
            Set the span for the column colID.
            </summary>
            <param name="colID">    The ID of the column whose span is being set.</param>
            <param name="x">    The new x span value of the column.</param>
            <param name="y">    The new y span value of the column.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetColumnSpanX(System.String)">
            <summary>
            Get the span for the column colID.
            </summary>
            <param name="colID">    The ID of the column whose span is being sought.</param>
            <returns>
            The x span value of the column.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GetColumnSpanY(System.String)">
            <summary>
            Get the span for the column colID.
            </summary>
            <param name="colID">    The ID of the column whose span is being sought.</param>
            <returns>
            The y span value of the column.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.AlignColumnHeaderVertically(System.String,System.String)">
            <summary>
            Vertically align the text in the column ColumnName.
            </summary>
            <param name="columnName">   Column name.</param>
            <param name="align">    The alignment to use.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.AlignGroupHeaderVertically(System.String,System.String)">
            <summary>
            Vertically align the text in the group column header groupName.
            </summary>
            <param name="groupName">    Column name.</param>
            <param name="align">    The alignment to use.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnSortPrecedence">
            <summary>
            This method returns a hashtable that indicates the precedence of column sorting.  The lower
            the number in the hashtable, the higher the sort precedence.
            </summary>
            <returns>
            Hastable: containing {precedence,colID} pairs.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.AddFixedColumn(System.String)">
            <summary>
            Adds a column to the set of fixed columns.
            </summary>
            <param name="colID">    The ID of the column to add.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.RemoveFixedColumn(System.String)">
            <summary>
            Removes a column from the set of fixed columns.
            </summary>
            <param name="colID">    The ID of the column to remove.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.IsFixedColumn(System.String)">
            <summary>
            This method indicates if a column is fixed or not.
            </summary>
            <param name="colID">    The ID of the column to be checked.</param>
            <returns>
            bool: true if fixed, false otherwise.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.setEditableColumn(System.String,System.Boolean)">
            <summary>
            This method sets whether a column is editable or not, regardless of what is in the
            datasource. Note that this won't allow you to write to a read-only datasource and is only
            recommended to be used for locking down  data that would otherwise be editable, as read only.
            </summary>
            <param name="colID">    The ID of the column to change.</param>
            <param name="editable"> The editable status of the column.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.setNumericTextComparer(System.String)">
            <summary>
            Sets numeric text comparer.
            </summary>
            <param name="colID">    The identity of the column.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ToString(Infragistics.Win.UltraWinGrid.SortIndicator)">
            <summary>
            Method converts a SortIndicator value to a string.  The strings are stored in the
            Aveva.Core.Presentation.DataGrid.resx resource.
            </summary>
            <param name="si">   The SortIndicator to convert.</param>
            <returns>
            A string representing the value of si.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ToSortIndicator(System.String)">
            <summary>
            Method converts a string to a SortIndicator value. The strings are stored in the
            Aveva.Core.Presentation.DataGrid.resx resource. If the string doesn't match one of these,
            then SortIndicator.None is returned.
            </summary>
            <param name="si">   The string to covert.</param>
            <returns>
            The SortIndicator that corresponds to the string, si.
            </returns>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.FixedAppearanceBackColour">
            <summary>
            The back colour used by the FixedHeaders() and FixedRows() methods when the cells are fixed.
            </summary>
            <value>
            The colour of the fixed appearance back.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.UnfixedAppearanceBackColour">
            <summary>
            The back colour used by the FixedHeaders() and FixedRows() methods when the cells are not
            fixed.
            </summary>
            <value>
            The colour of the unfixed appearance back.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.AlternateUnfixedBackColor">
            <summary>
            The alternate back colour to be used to give the grid a striped effect. Set this property to
            null to turn off stripes.
            </summary>
            <value>
            The color of the alternate unfixed back.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.EditSuccessColour">
            <summary>
            The back colour used for cell edit success.
            </summary>
            <value>
            The colour of the edit success.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.EditFailColour">
            <summary>
            The back colour used for cell edit failure.
            </summary>
            <value>
            The colour of the edit fail.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.HighlightColour">
            <summary>
            The back colour used for cell highlight.
            </summary>
            <value>
            The colour of the highlight.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ReadOnlyColour">
            <summary>
            The back colour used for cell highlight.
            </summary>
            <value>
            The colour of the read only.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ContextMenu">
            <summary>
            The name of the context menu to be used in the grid. If is set to null, then the default menu
            name will be returned. It is set to null by default. This property will never return a null
            value.
            </summary>
            <value>
            The context menu.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.HeaderMenu">
            <summary>
            The name of the header menu to be used in the grid. If is set to null, then the default menu
            name will be returned. It is set to null by default. This property will never return a null
            value.
            </summary>
            <value>
            The header menu.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.AllFixedHeaders">
            <summary>
            The propery allows access to a list of the IDs of all of the fixed columns.
            </summary>
            <value>
            all fixed headers.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ShowUnitsInHeaders">
            <summary>
            This method sets the column headers to display the current units, if there are any to display,
            or turns them off if desired.
            </summary>
            <value>
            true if show units in headers, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.PinOn">
            <summary>
            This property indicates whether pins should be shown on column headers.
            </summary>
            <value>
            true if pin on, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.FixedHeaders">
            <summary>
            This property relates directly to the UseFixedHeaders property of the DisplayLayout in the
            corresponding grid. It will also set the back colour appropriately, when changed.
            </summary>
            <value>
            true if fixed headers, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.FixedRows">
            <summary>
            This property provides fixed row functionality that is similar to the FixedHeaders
            functionality also provided in this class.
            </summary>
            <value>
            true if fixed rows, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SplitGrid">
            <summary>
            This method sets the MaxColScrollRegions and the MaxRowScrollRegions values on the
            DisplayLayout in the corresponding grid to enable or disable spilt grids, as desired.
            </summary>
            <value>
            true if split grid, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.HideGroupByBox">
            <summary>
            This method sets the GroupByBox.Hidden property on the DisplayLayout in the correspodning
            grid in order to show or hide the 'group by' box, as desired.
            </summary>
            <value>
            true if hide group by box, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ErrorIcon">
            <summary>
            This property relates directly to the SupportDataErrorInfo property of the
            DisplayLayout.Override in the corresponding grid. When enabled, it sets the value to
            RowsAndCells and when disabled, sets it to None.
            </summary>
            <value>
            true if error icon, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.CardView">
            <summary>
            This property relates directly to the CardView property in DisplayLayout.Bands[0] of the
            corresponding grid.  When this property is enabled, CardSettings.Autofit will always be true
            and the CardSettings.Style will be StandardLabels.
            </summary>
            <value>
            true if card view, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.OutlookGroupStyle">
            <summary>
            This property relates directly to ViewStyleBand on the DisplayLayout of the corresponding
            gird.
            </summary>
            <value>
            true if outlook group style, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ExtendLastColumn">
            <summary>
            This properly relates directly to the AutoFitStyle on the DisplayLayout of the corresponding
            grid.
            </summary>
            <value>
            true if extend last column, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.MultiSelectFilter">
            <summary>
            This property is used in conjunction with the ColumnExcelFilter property to ensure that the
            UI is set up correctly for MultiSelectFilter or non-MultiSelectFilter modes.
            </summary>
            <value>
            true if multi select filter, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnExcelFilter">
            <summary>
            This property relates directly to the AllowRowFiltering property on the
            DisplayLayout.Override of the corresponding Grid.  It also interacts with the current value
            of the MultiSelectFilter property to ensure that the UI is set up correctly.
            </summary>
            <value>
            true if column excel filter, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnSummaries">
            <summary>
            Turn on the ability to create column summaries for a numeric column.
            </summary>
            <value>
            true if column summaries, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnSort">
            <summary>
            Turn on/off the ability to sort all columns in the grid.
            </summary>
            <value>
            true if column sort, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.SingleRowSelection">
            <summary>
            This property relates directly to the SelectTypeRow property on the DisplayLayout.Override of
            the corresponding Grid.
            </summary>
            <value>
            true if single row selection, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.WholeRowSelection">
            <summary>
            Gets or sets a value indicating whether the whole row selection.
            </summary>
            <value>
            true if whole row selection, false if not.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GridCaption">
            <summary>
            This property sets a grid caption. If it is set to a null string, or string.Empty, then the
            grid caption is removed.
            </summary>
            <value>
            The grid caption.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.GroupMoving">
            <summary>
            This property enables/disables the moving of multiple level group columns.
            </summary>
            <value>
            The group moving.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.PMLDataGridLayout.ColumnMoving">
            <summary>
            This property enables/disables the moving of columns.
            </summary>
            <value>
            The column moving.
            </value>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.PrintCustomise">
            <summary>
            PrintCustomise
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.PrintCustomise.MonochromeMode">
            <summary>
            This value is used to indicate that the customisation is in monochrome mode.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.PrintCustomise.ColourMode">
            <summary>
            This value is used to indicate that the customisation is in colour mode.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.PrintCustomise.PrintStyleColour">
            <summary>
            This constant is used for representing colour mdoe when a string is required.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.PrintCustomise.PrintStyleMonochrome">
            <summary>
            This constant is used for representing monochrome mdoe when a string is required.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.PrintCustomise.ultraGridPrintDocument">
            <summary>
            This member stores the print document passed in on construction of this class.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.PrintCustomise.ultraPrintPreviewDialog">
            <summary>
            This members stores the print preview dialog passed in on construction of this class.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PrintCustomise.#ctor(Infragistics.Win.UltraWinGrid.UltraGridPrintDocument,Infragistics.Win.Printing.UltraPrintPreviewDialog)">
            <summary>
            Constructor class takes in the classes to be used and initiates the menu customisation.
            </summary>
            <param name="printDocument">The print document to be used by this class.</param>
            <param name="printPreviewDialog">The print preview dialog to be used by this class.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PrintCustomise.CustomizePrintPreviewDialog">
            <summary>
            Add 'Print Style' option to ultraPrintPreviewDialog
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PrintCustomise.SetPrintStyle(System.UInt32)">
            <summary>
            Set print style. Use the public constants MonochromeMode or ColourMode defined in this class when populating the mode parameter.
            </summary>
            <param name="mode">
            0 - Monochrome without cell formatting,
            1 - Color,
            </param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PrintCustomise.statePrintStyle_ToolClick(System.Object,Infragistics.Win.UltraWinToolbars.ToolClickEventArgs)">
            <summary>
            Handle event when state button in 'Print Style' is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.PrintPreviewCommand">
            <summary>
            Summary description for PrintPreviewCommand.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.PrintPreviewCommand.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PrintPreviewCommand.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PrintPreviewCommand.GetState(System.String)">
            <summary>
            Get state
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.PrintPreviewCommand.Refresh">
            <summary>
            Refresh command state
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.Res">
            <summary>
            Class to help simplify resource access for Aveva.Core.Presentation.DataGrid
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Res.GetString(System.String)">
            <summary>
            Gets a string resource from the Aveva.Core.Presentation.DataGrid resources
            </summary>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceID'
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Res.GetStringFromResourceSet(System.String,System.String)">
            <summary>
            Gets a string resource from a given resource set
            </summary>
            <param name="resourceSet">The name of the resource set to get the string from</param>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceID'
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Res.GetString(System.String,System.Object[])">
            <summary>
             Gets a string resource from the Aveva.Core.Presentation.DataGrid resources and substitutes the given
             arguments into it
            </summary>
            <param name="resourceID">The identity of the resource to return</param>
            <param name="args">The arguments to substitute into it</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceSet+resourceID' {arg[1..n]}</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Res.GetStringFromResourceSet(System.String,System.String,System.Object[])">
            <summary>
            Gets a string resource from a specified resource set and substitutes the given
             arguments into it
            </summary>
            <param name="resourceSet">The name of the resource set to get the resource from</param>
            <param name="resourceID">The identity of the resource to return</param>
            <param name="args">The arguments to substitute into it</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceSet+resourceID' {arg[1..n]}</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Res.GetIcon(System.String)">
            <summary>
            Gets an icon resource from the Aveva.Core.Presentation.DataGrid resources
            </summary>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The icon resource if present, otherwise null
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Res.GetIconFromResourceSet(System.String,System.String)">
            <summary>
            Gets an Icon resource from a given resource set
            </summary>
            <param name="resourceSet">The name of the resource set to get the Icon from</param>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The icon resource if present, otherwise null.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Res.GetImage(System.String)">
            <summary>
            Gets an image resource from the Aveva.Core.Presentation.DataGrid resources
            </summary>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The image resource if present, otherwise null
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Res.GetImageFromResourceSet(System.String,System.String)">
            <summary>
            Gets an image resource from a given resource set
            </summary>
            <param name="resourceSet">The name of the resource set to get the image from</param>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The image resource if present, otherwise null.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Res.GetObject(System.String)">
            <summary>
            Gets an object resource from the Aveva.Core.Presentation.DataGrid resources
            </summary>
            <param name="resourceID"></param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.Res.ResourceSet">
            <summary>
            Gets the name of the resource set used by Aveva.Core.Presentation.DataGrid
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.IDataGridProgressBar">
            <summary>
            Interface to progress bar used in DataGridControl
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.IDataGridProgressBar.ShowProgress(System.String,System.String,System.Boolean,System.Windows.Forms.ProgressBarStyle)">
            <summary>
            Display progress bar dialog
            </summary>
            <param name="Title"></param>
            <param name="Text"></param>
            <param name="buttonCancelEnabled"></param>
            <param name="progressBarStyle"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.IDataGridProgressBar.ReportProgress(System.Int32)">
            <summary>
            Update progress
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.IDataGridProgressBar.Title">
            <summary>
            Progress dialog box title
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.IDataGridProgressBar.Label">
            <summary>
            Message text label with progress status
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.IDataGridProgressBar.DoWork">
            <summary>
            Action executed on progress bar dialog shown event
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.IDataGridProgressBar.Canceled">
            <summary>
            Operation canceled
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.IDataGridProgressBar.ProgressStyle">
            <summary>
            Style of progress bar
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ScaledTextUIElement">
            <summary>
            Class which creates custom text uielement in which font size can be set
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ScaledTextUIElement.#ctor(Infragistics.Win.UIElement,System.String,System.Single)">
            <summary>
            Construcotr
            </summary>
            <param name="parent"></param>
            <param name="text"></param>
            <param name="fontSize"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ScaledTextUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            InitAppearance
            </summary>
            <param name="appearance"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ScaledTextUIElement.SetText(System.String)">
            <summary>
            Set text
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ZoomGridProperty">
            <summary>
            Class to manage zoom in grid
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ZoomGridProperty.#ctor(Infragistics.Win.UltraWinGrid.UltraGrid)">
            <summary>
            Generic constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ZoomGridProperty.Reset">
            <summary>
            Gets origin grid properties
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ZoomGridProperty.ZoomGrid(System.Int32,Infragistics.Win.UltraWinGrid.UltraGrid)">
            <summary>
            Scales given grid with zoom factor
            </summary>
            <param name="zoomFactor">zoom factor to scale</param>
            <param name="grid">grid to zoom</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ZoomGridProperty.ColumnSize">
            <summary>
            Internal class, which holds origin column size
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ZoomGridProperty.ColumnSize.#ctor">
            <summary>
            Generic constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ZoomGridProperty.ColumnSize.#ctor(System.String,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="CKey"></param>
            <param name="CWidth"></param>
            <param name="CHeight"></param>
            <param name="CHeaderHeight"></param>
            <param name="CBandIndex"></param>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ZoomGridProperty.ColumnSize.Key">
            <summary>
            Column key
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ZoomGridProperty.ColumnSize.Width">
            <summary>
            Column width
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ZoomGridProperty.ColumnSize.Height">
            <summary>
            Column height
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ZoomGridProperty.ColumnSize.HeaderHeight">
            <summary>
            Column header height
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ZoomGridProperty.ColumnSize.BandIndex">
            <summary>
            Column band index
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.NumericRowFilterTextComparer">
            <summary>
            A numeric row filter text comparer.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.NumericRowFilterTextComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or
            greater than the other.
            </summary>
            <exception cref="T:System.ArgumentException">Neither <paramref name="x" />
                                                          nor <paramref name="y" />
                                                          implements the
                                                          <see cref="T:System.IComparable" />
                                                          interface.-or- <paramref name="x" />
                                                          and <paramref name="y" />
                                                          are of different types and neither one can
                                                          handle comparisons with the other.</exception>
            <param name="x">  The first object to compare.</param>
            <param name="y">  The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" />
             and <paramref name="y" />
            , as shown in the following table.Value Meaning Less than zero <paramref name="x" />
             is less than <paramref name="y" />
            . Zero <paramref name="x" />
             equals <paramref name="y" />
            . Greater than zero <paramref name="x" />
             is greater than <paramref name="y" />
            .
            </returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CustomSummarySetting">
            <summary>
            A class which manages custom summaries settings in Tags
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.#ctor(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor
            </summary>
            <param name="dataGridControl"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.AddSummary(Infragistics.Win.UltraWinGrid.UltraGridColumn,Aveva.Core.Presentation.DataGrid.CustomSummarySetting.CustomSummaries)">
            <summary>
            Add custom summary to column
            </summary>
            <param name="column">Column to add summary</param>
            <param name="customSummary">Summary which will be added to column</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.RemoveSummary(Infragistics.Win.UltraWinGrid.UltraGridColumn,Aveva.Core.Presentation.DataGrid.CustomSummarySetting.CustomSummaries)">
            <summary>
            Remove custom summary from column
            </summary>
            <param name="column">Column to remove summary</param>
            <param name="customSummary">Sumamry to remove</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.SummaryExists(Infragistics.Win.UltraWinGrid.UltraGridColumn,Aveva.Core.Presentation.DataGrid.CustomSummarySetting.CustomSummaries)">
            <summary>
            Check if summary exists in given column
            </summary>
            <param name="column">Column to check summaries</param>
            <param name="customSummary">Summary type to check</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.RecalculateSummaries(Infragistics.Win.UltraWinGrid.UltraGridColumn)">
            <summary>
            Recalculate summaries in given column
            </summary>
            <param name="column">Column with summaries to recalculate</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.RefreshSummariesDisplayFormat(Infragistics.Win.UltraWinGrid.UltraGridColumn)">
            <summary>
            Refresh summaries display format in given column
            </summary>
            <param name="column">Column with summaries to refresh display foramt</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.GetCustomSummaries(Infragistics.Win.UltraWinGrid.UltraGridColumn)">
            <summary>
            Get custom summaries for given column
            </summary>
            <param name="column">Column to get summaries</param>
            <returns>List of custom summaries in column</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.SetCustomSummaries(Infragistics.Win.UltraWinGrid.UltraGridColumn,System.Collections.Generic.List{System.Object})">
            <summary>
            Set custom summaries in column
            </summary>
            <param name="column">Column to set summaries</param>
            <param name="customSummaries">List of custom summaries to set in column</param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.CustomSummaries">
            <summary>
            Custom summaries types
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.CustomSummaries.Average">
            <summary>
            Average summary
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.CustomSummaries.Count">
            <summary>
            Count summary
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.CustomSummaries.Maximum">
            <summary>
            Maximum summary
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.CustomSummaries.Minimum">
            <summary>
            Minimum summary
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.CustomSummaries.Sum">
            <summary>
            Sum summary
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.CustomSummarySetting.CustomSummaries.None">
            <summary>
            None summary
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ColumnComparer">
            <summary>
            Comparer for columns positions.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ColumnComparer.grid">
            <summary>
            Grid which columns are compared.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnComparer.#ctor(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor.
            </summary>
            <param name="grid">Grid which columns will be compared.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnComparer.Compare(System.String,System.String)">
            <summary>
            Compares positions of two columns and returns a value indicating whether one is 
            less than, equal to, or greater than the other.
            </summary>
            <param name="a">Column key of first column to compare.</param>
            <param name="b">Column key of second column to compare.</param>
            <returns>
            Value Condition Less than zero - position of a is smaller than position of b.
            Zero - positions a and b are equal. 
            Greater than zero - position of a is greater than position of b.
            </returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnComparer.GetColumnOrigin(System.String)">
            <summary>
            Gets column origin.
            </summary>
            <param name="key">Column key</param>
            <returns>Column origin.</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnComparer.GetGroupOrign(System.String)">
            <summary>
            Gets group origin.
            </summary>
            <param name="key">Group name</param>
            <returns>Group origin.</returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ColumnSortOrderUIElement">
            <summary>
            A column sort order user interface element.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnSortOrderUIElement.#ctor(Infragistics.Win.UIElement,System.Int32)">
            <summary>
            Construcotr.
            </summary>
            <param name="parent"></param>
            <param name="sortOrder"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnSortOrderUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            InitAppearance.
            </summary>
            <param name="appearance"> [in,out].</param>
            <param name="requestedProps"> [in,out].</param>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ColumnSortOrderUIElement.SortOrder">
            <summary>
            Sort order.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ColumnSortOrderUIElement.PreferredSize">
            <summary>
            Gets preferred size.
            </summary>
            <value>
            The size of the preferred.
            </value>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.UltraGridCache">
            <summary>
            Enhances the effectivity of the UltraGrid class by using memory cache.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.UltraGridCache.cancellableEvent">
            <summary>
            List of cancellable events for which the BeginDbCaching function was called.
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.UltraGridCache.nonCancellableEvent">
            <summary>
            List of non cancellable events for which the BeginDbCaching function was called.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.BeginDbCaching(System.ComponentModel.CancelEventArgs)">
            <summary>
            Starts caching db for cancelable events.
            All notes for the BeginDbCaching() are applicable.
            </summary>
            <param name="e">Cancelable event.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.BeginDbCaching(System.EventArgs)">
            <summary>
            Starts caching db for non cancelable events.
            All notes for the BeginDbCaching() are applicable.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.EndDbCaching(System.Type)">
            <summary>
            Stops caching db for cancelable and non cancelable events.
            </summary>
            <param name="type">Type of event.</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.HandleCanceledEvents">
            <summary>
            Calls the EndDbCaching() function for all canceled events.
            It is required because the OnAfter... functions are not called for canceled events.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.GetCellFromPoint(System.Drawing.Point)">
            <summary>
            Gets cell from point.
            </summary>
            <param name="point">Coordinates in pixels, relative to the top-left corner of the control.</param>
            <returns>Returns null if there is not cell under point.</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.GetUIElementFromPoint(System.Drawing.Point)">
            <summary>
            Gets uielement from point.
            </summary>
            <param name="point">Coordinates in pixels, relative to the top-left corner of the control.</param>
            <returns>Returns null if there is not uielement under point.</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Override OnPaint.
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Override OnMouseWheel.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.OnBeforeRowRegionScroll(Infragistics.Win.UltraWinGrid.BeforeRowRegionScrollEventArgs)">
            <summary>
             Override OnBeforeRowRegionScroll.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.OnAfterRowRegionScroll(Infragistics.Win.UltraWinGrid.RowScrollRegionEventArgs)">
            <summary>
             Override OnAfterRowRegionScroll.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.OnBeforeColRegionScroll(Infragistics.Win.UltraWinGrid.BeforeColRegionScrollEventArgs)">
            <summary>
             Override OnBeforeColRegionScroll.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.OnAfterColRegionScroll(Infragistics.Win.UltraWinGrid.ColScrollRegionEventArgs)">
            <summary>
             Override OnAfterColRegionScroll.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.OnBeforeSortChange(Infragistics.Win.UltraWinGrid.BeforeSortChangeEventArgs)">
            <summary>
             Override OnBeforeSortChange.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.OnAfterSortChange(Infragistics.Win.UltraWinGrid.BandEventArgs)">
            <summary>
            Override OnAfterSortChange.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseDown.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseUp.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UltraGridCache.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseMove.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.UltraGridCache.Cursor">
            <summary>
            Override Cursor property.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Clipboard.Base.GetSortedVisibleGridColumnKeys(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Get list of grid column keys sorted by it real visible index
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.Clipboard.Coord">
            <summary>
            Coords used to handle cells parsed from clipboard
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Clipboard.Paste.#ctor(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Create a paste class with destination grid
            </summary>
            <param name="dataGridControl"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Clipboard.Paste.PasteRows">
            <summary>
            Paste clipboard text to selected destination rows
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Clipboard.Paste.PasteCells">
            <summary>
            Get clipboard text, parse it and paste into grid depending on source and destination selections
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Clipboard.Paste.PasteIntoCells(System.Int32,System.Int32,System.Collections.Generic.List{System.String[]},System.Collections.Generic.List{Infragistics.Win.UltraWinGrid.UltraGridCell}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="destinationColumnsCount"></param>
            <param name="destinationRowsCount"></param>
            <param name="rowsSource"></param>
            <param name="modifiedCells"></param>
            <param name="areasNotSameError"></param>
            <returns>True if succeeded</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Clipboard.Paste.ParseClipboard(System.String,System.Int32@,System.Int32@,System.Collections.Generic.List{System.String[]}@)">
            <summary>
            Parse clipboard string
            </summary>
            <param name="clipboardText"></param>
            <param name="columnsToPaste"></param>
            <param name="rowsToPaste"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Clipboard.Paste.CalculateClipboardCoords(Aveva.Core.Presentation.DataGrid.DataGridControl,System.Int32@,System.Int32@)">
            <summary>
            Get max row and column index and add all cells in selection to the list of selected cells with its row and column index
            </summary>
            <param name="grid"></param>
            <param name="maxRowIndex"></param>
            <param name="maxColumnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Clipboard.Copy.#ctor(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Create a paste class with destination grid
            </summary>
            <param name="dataGridControl"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Clipboard.Cut.#ctor(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Create a paste class with destination grid
            </summary>
            <param name="dataGridControl"></param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.UnitOfMeasure">
            <summary>
            The unit of measure for a column in the datagrid. It holds various information about a unit represented in the datagrid
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.UnitOfMeasure.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.UnitOfMeasure.TrailZeros">
            <summary>
            If the unit includes trailing zeros
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.UnitOfMeasure.Precision">
            <summary>
            Unit precision
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.UnitOfMeasure.DbUnit">
            <summary>
            The database unit
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.UnitOfMeasure.DisplayLabel">
            <summary>
            The display label of the unit
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.UnitOfMeasure.UnitSetPrecision">
            <summary>
            Unit precision
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.CustomSelectionStrategy">
            <summary>
            Class represents custom selection strategy for grid headers
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSelectionStrategy.OnMouseDown(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Custom mouse down processing
            </summary>
            <param name="item"></param>
            <param name="msginfo"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSelectionStrategy.ColumnSelectedShiftKeyGroupRangeError(Infragistics.Shared.ISelectableItem)">
            <summary>
            Custom selection strategy for column selection with shift key pressed, when the first item in selection is a group
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSelectionStrategy.GroupSelectedShiftKey(Infragistics.Win.UltraWinGrid.GroupHeader)">
            <summary>
            Custom selection strategy for group selection with shift key pressed
            </summary>
            <param name="groupHeader"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSelectionStrategy.GetSortedColumns">
            <summary>
            Returns list of columns keys in layout order
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSelectionStrategy.ResetHeaderSelection(System.Collections.Generic.List{System.String})">
            <summary>
            Resets all headers selection
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSelectionStrategy.GetSelectedColumns(System.Collections.Generic.List{System.String})">
            <summary>
            Returns list of selected column keys
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.CustomSelectionStrategy.SelectColumns(System.Collections.Generic.List{System.String})">
            <summary>
            Set selection on given column keys list
            </summary>
            <param name="columns"></param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.SelectionManager">
            <summary>
            Selection manager class
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.SelectionManager.#ctor(Infragistics.Win.UltraWinGrid.UltraGrid)">
            <summary>
            
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.SelectionManager.GetSelectionStrategy(Infragistics.Shared.ISelectableItem)">
            <summary>
            Called to get the selection strategy for a specific item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.HeaderCaseButton">
            <summary>
            Button for case in column header
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.HeaderCaseButton.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.HeaderCaseButton.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Override InitAppearance
            </summary>
            <param name="appearance"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.HeaderCaseButton.OnDoubleClick(System.Boolean)">
            <summary>
            Override OnDoubleClick event
            </summary>
            <param name="adjustableArea"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.HeaderCaseButton.OnMouseEnter">
            <summary>
            Override MouseEnter event
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.HeaderCaseButton.OnMouseLeave">
            <summary>
            Override MouseLeave event
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderCaseButton.StyleOfButton">
            <summary>
            Set Button style
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderCaseButton.ButtonStyle">
            <summary>
            Override Button style
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderCaseButton.Enabled">
            <summary>
            Override Enabled property
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.HeaderCaseButton.CaseImage">
            <summary>
            Get the image used for the button
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ColumnHeaderCase">
            <summary>
            Manage column case button clicked
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnHeaderCase.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UltraWinGrid.HeaderBase,Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ColumnHeaderCase.HandleCaseButton">
            <summary>
            Display the case control
            </summary>
        </member>
        <member name="E:Aveva.Core.Presentation.DataGrid.ColumnHeaderCase.CasesSelected">
            <summary>
            Event when new cases are selected and handled.
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ExternalBidingListDbViewElement">
            <summary>
            Extended grid datasource 
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExternalBidingListDbViewElement.#ctor(Aveva.Core.Database.View.ExtBindingList{Aveva.Core.Database.View.DbViewElement})">
            <summary>
            Constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ExternalBidingListDbViewElement.extBindingList">
            <summary>
            Original dbview list
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.ExternalBidingListDbViewElement.lastIndex">
            <summary>
            Used to increase remove performance
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExternalBidingListDbViewElement.Source_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Events when list was changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExternalBidingListDbViewElement.Source_ItemRemoved(System.Object,Aveva.Core.Database.View.ItemRemovedEventArgs)">
            <summary>
            Event when list element was removed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExternalBidingListDbViewElement.Dispose">
            <summary>
            Implement IDisposable
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExternalBidingListDbViewElement.Dispose(System.Boolean)">
            <summary>
            Dispose object
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ExtDataSource">
            <summary>
            Extended grid datasource to support cases
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtDataSource.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtDataSource.#ctor(Aveva.Core.Database.View.DbView,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="dbView"></param>
            <param name="emptyRows"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtDataSource.RaiseListChanged">
            <summary>
            Method to trigger list changed event after source properties change
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtDataSource.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ExtDataSource.source">
            <summary>
            Source object
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ExtDataSource.Cases">
            <summary>
            Cases object related with source
            </summary>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.ExtDataSource.DbView">
            <summary>
            DbView object related with source
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.ExtDbViewElementPropertyDescriptor">
            <summary>
            Class for extended DbViewElementPropertyDescriptor, it gives possibility to overide getvalue and set value methods.
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtDbViewElementPropertyDescriptor.#ctor(System.String,Aveva.Core.Database.View.IColumn,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="columnName"></param>
            <param name="column"></param>
            <param name="caseTag"></param>
            <param name="emptyData"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtDbViewElementPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Overriden GetValue methods. It gets value for extended 'Case' property or example data for empty source
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.ExtDbViewElementPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Overriden SetValue method. It sets value for extended 'Case' property.
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.Cases">
            <summary>
            Class to manage cases in grid control
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.#ctor(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor
            </summary>
            <param name="dataGridControl"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.ChangeColumnProperties(System.Boolean)">
            <summary>
            Set case columns properties 
            </summary>
            <param name="fromLayout"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.SetLayoutPosition(System.String,System.String)">
            <summary>
            Set case column layout posiiton realative to main column
            </summary>
            <param name="mainColumn"></param>
            <param name="caseColumn"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.GetGridCaseColumns">
            <summary>
            Returns all supporting cases columns from grid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.Refresh(System.Boolean)">
            <summary>
            Refresh datasource after case changes
            </summary>
            <param name="fromLayout"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.GetDataBaseCases">
            <summary>
            Get all cases RefNo's defined in Engineering DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.GetGridData">
            <summary>
            Returns all case supporting columns with current cases 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.Add(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Add given case list to all case column in grid
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.Add(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Add/Modify cases for given column
            </summary>
            <param name="baseColumnKey"></param>
            /// <param name="currentCaseColumn"></param>
            <param name="columnCases"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.GenerateColumnCaseKey(System.String,System.String)">
            <summary>
            Generate unique case column key
            </summary>
            <param name="mainColumnKey"></param>
            <param name="caseId"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.RecoverCaseIdFromColumnCasKey(System.String,System.String)">
            <summary>
            Get case id (dbref) from column key
            </summary>
            <param name="maincolumnKey"></param>
            <param name="caseColumnKey"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.GenerateColumnCaseCaption(System.String,System.String)">
            <summary>
            Generate case column caption.
            This method throws an exception if attribute is invalid.
            </summary>
            <param name="mainColumnCaption">Caption of main column</param>
            <param name="caseId">Case element</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.GenerateCaseCaption(System.String)">
            <summary>
            Generate case caption accorting to CAPTIO and DISTAG attributes.
            This method throws an exception if input is invalid.
            </summary>
            <param name="caseId">Case Id element.</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.GenerateCaseCaption(Aveva.Core.Database.DbElement)">
            <summary>
            Generate case caption accorting to CAPTIO and DISTAG attributes.
            This method throws an exception if input is invalid.
            </summary>
            <param name="caseElement">Case element.</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.GenerateColumnCaseCaption(System.String,Aveva.Core.Database.DbElement)">
            <summary>
            Generate case column caption.
            This method throws an exception if attribute is invalid.
            </summary>
            <param name="mainColumnCaption">Caption of main column</param>
            <param name="caseElement">Case element</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.SetVerticalCasesPosition">
            <summary>
            Set layout position for data created in vertical mode
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.ResetVerticalCases">
            <summary>
            Clear list of cases created in vertical mode
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.Cases.MainCaseColumn(System.String)">
            <summary>
            Get main column for given case column
            </summary>
            <param name="caseColumn"></param>
            <returns></returns>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.Cases.Data">
            <summary>
            It keeps the actual case data, case main column and list of cases for it
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools">
            <summary>
            Calculation of DataGrid layout
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.#ctor(Aveva.Core.Presentation.DataGrid.DataGridControl)">
            <summary>
            Constructor
            </summary>
            <param name="dataGrid"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.UpdateColumnHeaderLayout">
            <summary>
            Updates nodes after layout changes
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.GenerateColumnHeaderLayout">
            <summary>
            Create new layout from nodes 
            </summary>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.GetColumnVisualPosition(System.String,System.Boolean)">
            <summary>
            Returns visual position of node
            </summary>
            <param name="columnName">Node</param>
            <param name="isgroup">Search group or column</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.SetColumnVisualPosition(System.String,System.Boolean,System.Int32)">
            <summary>
            Set node visual position
            </summary>
            <param name="columnName">Node</param>
            <param name="isgroup">Set group or column</param>
            <param name="position">Visual position</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.UpdateColumnHeaderLayout(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates nodes after layout changes,
            </summary>
            <param name="list">Nodes</param>
            <param name="updateSpan">Update span hint</param>
            <param name="updatePosition">Update position hint</param>
            <param name="recalculateSpan">Recalculate span</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.GetAsLinearList(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout},System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout})">
            <summary>
            Convert nested list to linear list
            </summary>
            <param name="nestedList">List with nested sublists</param>
            <param name="linearList">Result list where all nodes are on the same level</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.CreateColumnHeaderGroups(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout})">
            <summary>
            Create groups from column nodes
            </summary>
            <param name="list">Nodes</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.GetColumHeaderLayout(System.Boolean)">
            <summary>
            Read layout from data grid
            </summary>
            <returns>List of layout nodes, forming tree structure</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.CalculateLayout(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout})">
            <summary>
            Calculates positions in layout
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.GetColumnLayoutPosition">
            <summary>
            Method returhs list of column keys in displayed layout order
            </summary>
            <returns>Layout order list of column keys</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.SortList(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout})">
            <summary>
            Sort list of header items
            </summary>
            <param name="headerItems"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.Compare(Aveva.Core.Presentation.DataGrid.DataGridColumnLayout,Aveva.Core.Presentation.DataGrid.DataGridColumnLayout)">
            <summary>
            Compare position of nodes
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.GetMaxHeaderLevel(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout})">
            <summary>
            Number of levels in header structure
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.SetHeaderLevels(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout},System.Int32)">
            <summary>
            Calculate level for given node
            </summary>
            <param name="list">List of nodes</param>
            <param name="level">Level to set</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.CalculateColumnPosition(Aveva.Core.Presentation.DataGrid.DataGridColumnLayout,System.Int32)">
            <summary>
            Calculate position of node
            </summary>
            <param name="item">Node</param>
            <param name="startPosition">Origin position</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.SetColumnProperties(Aveva.Core.Presentation.DataGrid.DataGridColumnLayout,Aveva.Core.Presentation.DataGrid.DataGridColumnLayout,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Update column properties
            </summary>
            <param name="item">Node</param>
            <param name="parentNode">Parent</param>
            <param name="maxLevel">Number of header levels</param>
            <param name="setSpan">True if span should be updated</param>
            <param name="setOrigin">True if origin should be updated</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.GetColumnSpan(Aveva.Core.Presentation.DataGrid.DataGridColumnLayout)">
            <summary>
            Returns summary span for node and his children
            </summary>
            <param name="item">Node</param>
            <returns>Span</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.GetColumnAbsOrigin(Aveva.Core.Presentation.DataGrid.DataGridColumnLayout)">
            <summary>
            Get node absolute origin
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.CalculateLayout(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout},System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Caluclates positions of nodes in layout
            </summary>
            <param name="list"></param>
            <param name="origin"></param>
            <param name="level"></param>
            <param name="spanX"></param>
            <param name="spanY"></param>
            <param name="groupSpanY"></param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.GetColumnPositionFromNodes(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout},System.Collections.Generic.List{System.String})">
            <summary>
            Recursive method to get column keys list from node structure
            </summary>
            <param name="colNodes">Column nodes structure</param>
            <param name="colPosition">Column keys list</param>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.GetNode(System.String,System.Boolean,System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout})">
            <summary>
            Search for node with given name
            </summary>
            <param name="name"></param>
            <param name="isgroup"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.GetColumnVisualPosition(Aveva.Core.Presentation.DataGrid.DataGridColumnLayout)">
            <summary>
            Returns visual position of node
            </summary>
            <param name="node">Node</param>
            <returns>Visual position</returns>
        </member>
        <member name="M:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.RepositionMultiLevelGrups(System.Collections.Generic.List{Aveva.Core.Presentation.DataGrid.DataGridColumnLayout})">
            <summary>
            Reparent groups if groups form tree structure
            Such structure may come from grid layout if user manualy drags groups
            </summary>
            <param name="list"></param>
        </member>
        <member name="P:Aveva.Core.Presentation.DataGrid.DataGridLayoutTools.gridControl">
            <summary>
            Data grid control
            </summary>
        </member>
        <member name="T:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout">
            <summary>
            DataGrid column layout properties
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.key">
            <summary>
            Key
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.caption">
            <summary>
            Caption
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.originX">
            <summary>
            Origin X
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.originY">
            <summary>
            Origin Y
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.spanX">
            <summary>
            Span X
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.spanY">
            <summary>
            Span Y
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.isgroup">
            <summary>
            Is group
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.visible">
            <summary>
            Is visible
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.parent">
            <summary>
            Parent
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.nodes">
            <summary>
            Child nodes
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.groupSpanY">
            <summary>
            Span Y for group elements
            </summary>
        </member>
        <member name="F:Aveva.Core.Presentation.DataGrid.DataGridColumnLayout.globalOriginX">
            <summary>
            Global origin X
            </summary>
        </member>
    </members>
</doc>
